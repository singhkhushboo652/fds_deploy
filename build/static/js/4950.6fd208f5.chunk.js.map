{"version":3,"file":"static/js/4950.6fd208f5.chunk.js","mappings":"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","sources":["views/base/popovers/Popovers.js","../node_modules/@coreui/react-pro/src/components/card/CCard.tsx","../node_modules/@coreui/react-pro/src/components/card/CCardBody.tsx","../node_modules/@coreui/react-pro/src/components/card/CCardHeader.tsx","../node_modules/@coreui/react-pro/src/components/grid/CCol.tsx","../node_modules/@coreui/react-pro/src/components/grid/CRow.tsx","../node_modules/@coreui/react-pro/src/components/popover/CPopover.tsx","../node_modules/@coreui/react-pro/src/utils/getRTLPlacement.ts"],"sourcesContent":["import React from 'react'\nimport { CButton, CCard, CCardBody, CCardHeader, CPopover, CRow, CCol } from '@coreui/react-pro'\nimport { DocsExample } from 'src/components'\n\nconst Popovers = () => {\n  return (\n    <CRow>\n      <CCol xs={12}>\n        <CCard className=\"mb-4\">\n          <CCardHeader>\n            <strong>React Popover</strong> <small>Basic example</small>\n          </CCardHeader>\n          <CCardBody>\n            <DocsExample href=\"components/popover\">\n              <CPopover\n                title=\"Popover title\"\n                content=\"And here’s some amazing content. It’s very engaging. Right?\"\n                placement=\"right\"\n              >\n                <CButton color=\"danger\" size=\"lg\">\n                  Click to toggle popover\n                </CButton>\n              </CPopover>\n            </DocsExample>\n          </CCardBody>\n        </CCard>\n      </CCol>\n      <CCol xs={12}>\n        <CCard className=\"mb-4\">\n          <CCardHeader>\n            <strong>React Popover</strong> <small>Four directions</small>\n          </CCardHeader>\n          <CCardBody>\n            <p className=\"text-body-secondary small\">\n              Four options are available: top, right, bottom, and left aligned. Directions are\n              mirrored when using CoreUI for React in RTL.\n            </p>\n            <DocsExample href=\"components/popover#four-directions\">\n              <CPopover\n                content=\"Vivamus sagittis lacus vel augue laoreet rutrum faucibus.\"\n                placement=\"top\"\n              >\n                <CButton color=\"secondary\">Popover on top</CButton>\n              </CPopover>\n              <CPopover\n                content=\"Vivamus sagittis lacus vel augue laoreet rutrum faucibus.\"\n                placement=\"right\"\n              >\n                <CButton color=\"secondary\">Popover on right</CButton>\n              </CPopover>\n              <CPopover\n                content=\"Vivamus sagittis lacus vel augue laoreet rutrum faucibus.\"\n                placement=\"bottom\"\n              >\n                <CButton color=\"secondary\">Popover on bottom</CButton>\n              </CPopover>\n              <CPopover\n                content=\"Vivamus sagittis lacus vel augue laoreet rutrum faucibus.\"\n                placement=\"left\"\n              >\n                <CButton color=\"secondary\">Popover on left</CButton>\n              </CPopover>\n            </DocsExample>\n          </CCardBody>\n        </CCard>\n      </CCol>\n    </CRow>\n  )\n}\n\nexport default Popovers\n","import React, { forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { colorPropType, gradientsPropType } from '../../props'\nimport type { Colors, Gradients } from '../../types'\n\nexport interface CCardProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n  /**\n   * Sets the color context of the component to one of CoreUI’s themed colors.\n   *\n   * @type {'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | 'primary-gradient' | 'secondary-gradient' | 'success-gradient' | 'danger-gradient' | 'warning-gradient' | 'info-gradient' | 'dark-gradient' | 'light-gradient' | string }\n   */\n  color?: Colors | Gradients\n  /**\n   * Sets the text color context of the component to one of CoreUI’s themed colors.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | 'primary-emphasis' | 'secondary-emphasis' | 'success-emphasis' | 'danger-emphasis' | 'warning-emphasis' | 'info-emphasis' | 'light-emphasis' | 'body' | 'body-emphasis' | 'body-secondary' | 'body-tertiary' | 'black' | 'black-50' | 'white' | 'white-50' | string\n   */\n  textColor?: string\n  /**\n   * Sets the component's color scheme to one of CoreUI's themed colors, ensuring the text color contrast adheres to the WCAG 4.5:1 contrast ratio standard for accessibility.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | string\n   * @since 5.0.0\n   */\n  textBgColor?: Colors\n}\n\nexport const CCard = forwardRef<HTMLDivElement, CCardProps>(\n  ({ children, className, color, textBgColor, textColor, ...rest }, ref) => {\n    return (\n      <div\n        className={classNames(\n          'card',\n          {\n            [`bg-${color}`]: color,\n            [`text-${textColor}`]: textColor,\n            [`text-bg-${textBgColor}`]: textBgColor,\n          },\n          className,\n        )}\n        {...rest}\n        ref={ref}\n      >\n        {children}\n      </div>\n    )\n  },\n)\n\nCCard.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  color: PropTypes.oneOfType([colorPropType, gradientsPropType]),\n  textBgColor: colorPropType,\n  textColor: PropTypes.string,\n}\n\nCCard.displayName = 'CCard'\n","import React, { forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nexport interface CCardBodyProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n}\n\nexport const CCardBody = forwardRef<HTMLDivElement, CCardBodyProps>(\n  ({ children, className, ...rest }, ref) => {\n    return (\n      <div className={classNames('card-body', className)} {...rest} ref={ref}>\n        {children}\n      </div>\n    )\n  },\n)\n\nCCardBody.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n}\n\nCCardBody.displayName = 'CCardBody'\n","import React, { ElementType, forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { PolymorphicRefForwardingComponent } from '../../helpers'\n\nexport interface CCardHeaderProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * Component used for the root node. Either a string to use a HTML element or a component.\n   */\n  as?: ElementType\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n}\n\nexport const CCardHeader: PolymorphicRefForwardingComponent<'div', CCardHeaderProps> = forwardRef<\n  HTMLDivElement,\n  CCardHeaderProps\n>(({ children, as: Component = 'div', className, ...rest }, ref) => {\n  return (\n    <Component className={classNames('card-header', className)} {...rest} ref={ref}>\n      {children}\n    </Component>\n  )\n})\n\nCCardHeader.propTypes = {\n  as: PropTypes.elementType,\n  children: PropTypes.node,\n  className: PropTypes.string,\n}\n\nCCardHeader.displayName = 'CCardHeader'\n","import React, { forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\ntype Span = 'auto' | number | string | boolean | null\n\ntype BPObject = {\n  span?: Span\n  offset?: number | string | null\n  order?: 'first' | 'last' | number | string | null\n}\n\ntype Col = Span | BPObject\n\nexport interface CColProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n  /**\n   * The number of columns/offset/order on extra small devices (<576px).\n   *\n   * @type { 'auto' | number | string | boolean | { span: 'auto' | number | string | boolean } | { offset: number | string } | { order: 'first' | 'last' | number | string }}\n   */\n  xs?: Col\n  /**\n   * The number of columns/offset/order on small devices (<768px).\n   *\n   * @type { 'auto' | number | string | boolean | { span: 'auto' | number | string | boolean } | { offset: number | string } | { order: 'first' | 'last' | number | string }}\n   */\n  sm?: Col\n  /**\n   * The number of columns/offset/order on medium devices (<992px).\n   *\n   * @type { 'auto' | number | string | boolean | { span: 'auto' | number | string | boolean } | { offset: number | string } | { order: 'first' | 'last' | number | string }}\n   */\n  md?: Col\n  /**\n   * The number of columns/offset/order on large devices (<1200px).\n   *\n   * @type { 'auto' | number | string | boolean | { span: 'auto' | number | string | boolean } | { offset: number | string } | { order: 'first' | 'last' | number | string }}\n   */\n  lg?: Col\n  /**\n   * The number of columns/offset/order on X-Large devices (<1400px).\n   *\n   * @type { 'auto' | number | string | boolean | { span: 'auto' | number | string | boolean } | { offset: number | string } | { order: 'first' | 'last' | number | string }}\n   */\n  xl?: Col\n  /**\n   * The number of columns/offset/order on XX-Large devices (≥1400px).\n   *\n   * @type { 'auto' | number | string | boolean | { span: 'auto' | number | string | boolean } | { offset: number | string } | { order: 'first' | 'last' | number | string }}\n   */\n  xxl?: Col\n}\n\nconst BREAKPOINTS = [\n  'xxl' as const,\n  'xl' as const,\n  'lg' as const,\n  'md' as const,\n  'sm' as const,\n  'xs' as const,\n]\n\nexport const CCol = forwardRef<HTMLDivElement, CColProps>(\n  ({ children, className, ...rest }, ref) => {\n    const repsonsiveClassNames: string[] = []\n\n    BREAKPOINTS.forEach((bp) => {\n      const breakpoint = rest[bp]\n      delete rest[bp]\n\n      const infix = bp === 'xs' ? '' : `-${bp}`\n\n      if (typeof breakpoint === 'number' || typeof breakpoint === 'string') {\n        repsonsiveClassNames.push(`col${infix}-${breakpoint}`)\n      }\n\n      if (typeof breakpoint === 'boolean') {\n        repsonsiveClassNames.push(`col${infix}`)\n      }\n\n      if (breakpoint && typeof breakpoint === 'object') {\n        if (typeof breakpoint.span === 'number' || typeof breakpoint.span === 'string') {\n          repsonsiveClassNames.push(`col${infix}-${breakpoint.span}`)\n        }\n\n        if (typeof breakpoint.span === 'boolean') {\n          repsonsiveClassNames.push(`col${infix}`)\n        }\n\n        if (typeof breakpoint.order === 'number' || typeof breakpoint.order === 'string') {\n          repsonsiveClassNames.push(`order${infix}-${breakpoint.order}`)\n        }\n\n        if (typeof breakpoint.offset === 'number') {\n          repsonsiveClassNames.push(`offset${infix}-${breakpoint.offset}`)\n        }\n      }\n    })\n\n    return (\n      <div\n        className={classNames(\n          repsonsiveClassNames.length > 0 ? repsonsiveClassNames : 'col',\n          className,\n        )}\n        {...rest}\n        ref={ref}\n      >\n        {children}\n      </div>\n    )\n  },\n)\n\nconst span = PropTypes.oneOfType([\n  PropTypes.bool,\n  PropTypes.number,\n  PropTypes.string,\n  PropTypes.oneOf(['auto']),\n])\n\nconst col = PropTypes.oneOfType([\n  span,\n  PropTypes.shape({\n    span: span,\n    offset: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n    order: PropTypes.oneOfType([\n      PropTypes.oneOf(['first', 'last']),\n      PropTypes.number,\n      PropTypes.string,\n    ]),\n  }),\n])\n\nCCol.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  xs: col,\n  sm: col,\n  md: col,\n  lg: col,\n  xl: col,\n  xxl: col,\n}\n\nCCol.displayName = 'CCol'\n","import React, { forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nexport type BPObject = {\n  cols?: 'auto' | number | string | null\n  gutter?: number | string | null\n  gutterX?: number | string | null\n  gutterY?: number | string | null\n}\n\nexport interface CRowProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n  /**\n   * The number of columns/offset/order on extra small devices (<576px).\n   *\n   * @type {{ cols: 'auto' | number | string } | { gutter: number | string } | { gutterX: number | string } | { gutterY: number | string }}\n   */\n  xs?: BPObject\n  /**\n   * The number of columns/offset/order on small devices (<768px).\n   *\n   * @type {{ cols: 'auto' | number | string } | { gutter: number | string } | { gutterX: number | string } | { gutterY: number | string }}\n   */\n  sm?: BPObject\n  /**\n   * The number of columns/offset/order on medium devices (<992px).\n   *\n   * @type {{ cols: 'auto' | number | string } | { gutter: number | string } | { gutterX: number | string } | { gutterY: number | string }}\n   */\n  md?: BPObject\n  /**\n   * The number of columns/offset/order on large devices (<1200px).\n   *\n   * @type {{ cols: 'auto' | number | string } | { gutter: number | string } | { gutterX: number | string } | { gutterY: number | string }}\n   */\n  lg?: BPObject\n  /**\n   * The number of columns/offset/order on X-Large devices (<1400px).\n   *\n   * @type {{ cols: 'auto' | number | string } | { gutter: number | string } | { gutterX: number | string } | { gutterY: number | string }}\n   */\n  xl?: BPObject\n  /**\n   * The number of columns/offset/order on XX-Large devices (≥1400px).\n   *\n   * @type {{ cols: 'auto' | number | string } | { gutter: number | string } | { gutterX: number | string } | { gutterY: number | string }}\n   */\n  xxl?: BPObject\n}\n\nconst BREAKPOINTS = [\n  'xxl' as const,\n  'xl' as const,\n  'lg' as const,\n  'md' as const,\n  'sm' as const,\n  'xs' as const,\n]\n\nexport const CRow = forwardRef<HTMLDivElement, CRowProps>(\n  ({ children, className, ...rest }, ref) => {\n    const repsonsiveClassNames: string[] = []\n\n    BREAKPOINTS.forEach((bp) => {\n      const breakpoint = rest[bp]\n      delete rest[bp]\n\n      const infix = bp === 'xs' ? '' : `-${bp}`\n\n      if (typeof breakpoint === 'object') {\n        if (breakpoint.cols) {\n          repsonsiveClassNames.push(`row-cols${infix}-${breakpoint.cols}`)\n        }\n\n        if (typeof breakpoint.gutter === 'number') {\n          repsonsiveClassNames.push(`g${infix}-${breakpoint.gutter}`)\n        }\n\n        if (typeof breakpoint.gutterX === 'number') {\n          repsonsiveClassNames.push(`gx${infix}-${breakpoint.gutterX}`)\n        }\n\n        if (typeof breakpoint.gutterY === 'number') {\n          repsonsiveClassNames.push(`gy${infix}-${breakpoint.gutterY}`)\n        }\n      }\n    })\n\n    return (\n      <div className={classNames('row', repsonsiveClassNames, className)} ref={ref}>\n        {children}\n      </div>\n    )\n  },\n)\n\nconst bp = PropTypes.shape({\n  cols: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.number, PropTypes.string]),\n  gutter: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  gutterX: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  gutterY: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n})\n\nCRow.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  xs: bp,\n  sm: bp,\n  md: bp,\n  lg: bp,\n  xl: bp,\n  xxl: bp,\n}\n\nCRow.displayName = 'CRow'\n","import React, { forwardRef, HTMLAttributes, ReactNode, useRef, useEffect, useState } from 'react'\nimport classNames from 'classnames'\nimport PropTypes from 'prop-types'\nimport { Transition } from 'react-transition-group'\n\nimport { CConditionalPortal } from '../conditional-portal'\nimport { useForkedRef, usePopper } from '../../hooks'\nimport { fallbackPlacementsPropType, triggerPropType } from '../../props'\nimport type { Placements, Triggers } from '../../types'\nimport { getRTLPlacement, getTransitionDurationFromElement } from '../../utils'\n\nexport interface CPopoverProps extends Omit<HTMLAttributes<HTMLDivElement>, 'title' | 'content'> {\n  /**\n   * Apply a CSS fade transition to the popover.\n   *\n   * @since 4.9.0\n   */\n  animation?: boolean\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * Appends the react popover to a specific element. You can pass an HTML element or function that returns a single element. By default `document.body`.\n   *\n   * @since v4.11.0\n   */\n  container?: Element | (() => Element | null) | null\n  /**\n   * Content node for your component.\n   */\n  content: ReactNode | string\n  /**\n   * Offset of the popover relative to its target.\n   */\n  offset?: [number, number]\n  /**\n   * The delay for displaying and hiding the popover (in milliseconds). When a numerical value is provided, the delay applies to both the hide and show actions. The object structure for specifying the delay is as follows: delay: `{ 'show': 500, 'hide': 100 }`.\n   *\n   * @since 4.9.0\n   */\n  delay?: number | { show: number; hide: number }\n  /**\n   * Specify the desired order of fallback placements by providing a list of placements as an array. The placements should be prioritized based on preference.\n   *\n   * @since 4.9.0\n   */\n  fallbackPlacements?: Placements | Placements[]\n  /**\n   * Callback fired when the component requests to be hidden.\n   */\n  onHide?: () => void\n  /**\n   * Callback fired when the component requests to be shown.\n   */\n  onShow?: () => void\n  /**\n   * Title node for your component.\n   */\n  title?: ReactNode | string\n  /**\n   * Sets which event handlers you’d like provided to your toggle prop. You can specify one trigger or an array of them.\n   *\n   * @type 'hover' | 'focus' | 'click'\n   */\n  trigger?: Triggers | Triggers[]\n  /**\n   * Describes the placement of your component after Popper.js has applied all the modifiers that may have flipped or altered the originally provided placement property.\n   */\n  placement?: 'auto' | 'top' | 'right' | 'bottom' | 'left'\n  /**\n   * Toggle the visibility of popover component.\n   */\n  visible?: boolean\n}\n\nexport const CPopover = forwardRef<HTMLDivElement, CPopoverProps>(\n  (\n    {\n      children,\n      animation = true,\n      className,\n      container,\n      content,\n      delay = 0,\n      fallbackPlacements = ['top', 'right', 'bottom', 'left'],\n      offset = [0, 8],\n      onHide,\n      onShow,\n      placement = 'top',\n      title,\n      trigger = 'click',\n      visible,\n      ...rest\n    },\n    ref,\n  ) => {\n    const popoverRef = useRef<HTMLDivElement>(null)\n    const togglerRef = useRef(null)\n    const forkedRef = useForkedRef(ref, popoverRef)\n    const uID = useRef(`popover${Math.floor(Math.random() * 1_000_000)}`)\n\n    const { initPopper, destroyPopper } = usePopper()\n    const [_visible, setVisible] = useState(visible)\n\n    const _delay = typeof delay === 'number' ? { show: delay, hide: delay } : delay\n\n    const popperConfig = {\n      modifiers: [\n        {\n          name: 'arrow',\n          options: {\n            element: '.popover-arrow',\n          },\n        },\n        {\n          name: 'flip',\n          options: {\n            fallbackPlacements: fallbackPlacements,\n          },\n        },\n        {\n          name: 'offset',\n          options: {\n            offset: offset,\n          },\n        },\n      ],\n      placement: getRTLPlacement(placement, togglerRef.current),\n    }\n\n    useEffect(() => {\n      setVisible(visible)\n    }, [visible])\n\n    const toggleVisible = (visible: boolean) => {\n      if (visible) {\n        setTimeout(() => setVisible(true), _delay.show)\n        return\n      }\n\n      setTimeout(() => setVisible(false), _delay.hide)\n    }\n\n    return (\n      <>\n        {React.cloneElement(children as React.ReactElement<any>, {\n          ...(_visible && {\n            'aria-describedby': uID.current,\n          }),\n          ref: togglerRef,\n          ...((trigger === 'click' || trigger.includes('click')) && {\n            onClick: () => toggleVisible(!_visible),\n          }),\n          ...((trigger === 'focus' || trigger.includes('focus')) && {\n            onFocus: () => toggleVisible(true),\n            onBlur: () => toggleVisible(false),\n          }),\n          ...((trigger === 'hover' || trigger.includes('hover')) && {\n            onMouseEnter: () => toggleVisible(true),\n            onMouseLeave: () => toggleVisible(false),\n          }),\n        })}\n        <CConditionalPortal container={container} portal={true}>\n          <Transition\n            in={_visible}\n            mountOnEnter\n            nodeRef={popoverRef}\n            onEnter={() => {\n              if (togglerRef.current && popoverRef.current) {\n                initPopper(togglerRef.current, popoverRef.current, popperConfig)\n              }\n\n              onShow\n            }}\n            onEntering={() => {\n              if (togglerRef.current && popoverRef.current) {\n                popoverRef.current.style.display = 'initial'\n              }\n            }}\n            onExit={onHide}\n            onExited={() => {\n              destroyPopper()\n            }}\n            timeout={{\n              enter: 0,\n              exit: popoverRef.current\n                ? getTransitionDurationFromElement(popoverRef.current) + 50\n                : 200,\n            }}\n            unmountOnExit\n          >\n            {(state) => (\n              <div\n                className={classNames(\n                  'popover',\n                  'bs-popover-auto',\n                  {\n                    fade: animation,\n                    show: state === 'entered',\n                  },\n                  className,\n                )}\n                id={uID.current}\n                ref={forkedRef}\n                role=\"tooltip\"\n                style={{\n                  display: 'none',\n                }}\n                {...rest}\n              >\n                <div className=\"popover-arrow\"></div>\n                <div className=\"popover-header\">{title}</div>\n                <div className=\"popover-body\">{content}</div>\n              </div>\n            )}\n          </Transition>\n        </CConditionalPortal>\n      </>\n    )\n  },\n)\n\nCPopover.propTypes = {\n  animation: PropTypes.bool,\n  children: PropTypes.node,\n  className: PropTypes.string,\n  container: PropTypes.any,\n  content: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n  delay: PropTypes.oneOfType([\n    PropTypes.number,\n    PropTypes.shape({\n      show: PropTypes.number.isRequired,\n      hide: PropTypes.number.isRequired,\n    }),\n  ]),\n  fallbackPlacements: fallbackPlacementsPropType,\n  offset: PropTypes.any, // TODO: find good proptype\n  onHide: PropTypes.func,\n  onShow: PropTypes.func,\n  placement: PropTypes.oneOf(['auto', 'top', 'right', 'bottom', 'left']),\n  title: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n  trigger: triggerPropType,\n  visible: PropTypes.bool,\n}\n\nCPopover.displayName = 'CPopover'\n","import { Placement } from '@popperjs/core'\nimport isRTL from './isRTL'\n\nconst getRTLPlacement = (placement: string, element: HTMLDivElement | null): Placement => {\n  switch (placement) {\n    case 'right': {\n      return isRTL(element) ? 'left' : 'right'\n    }\n    case 'left': {\n      return isRTL(element) ? 'right' : 'left'\n    }\n    default: {\n      return placement as Placement\n    }\n  }\n}\n\nexport default getRTLPlacement\n"],"names":["Popovers","_jsxs","CRow","children","_jsx","CCol","xs","CCard","className","CCardHeader","CCardBody","DocsExample","href","CPopover","title","content","placement","CButton","color","size","forwardRef","_a","ref","textBgColor","textColor","rest","__rest","React","__assign","classNames","_b","concat","propTypes","PropTypes","colorPropType","gradientsPropType","displayName","as","Component","BREAKPOINTS","repsonsiveClassNames","forEach","bp","breakpoint","infix","push","span","order","offset","length","col","sm","md","lg","xl","xxl","cols","gutter","gutterX","gutterY","animation","container","_c","delay","_d","fallbackPlacements","_e","onHide","onShow","_f","_g","trigger","visible","popoverRef","useRef","togglerRef","forkedRef","useForkedRef","uID","Math","floor","random","_h","usePopper","initPopper","destroyPopper","_j","useState","_visible","setVisible","_delay","show","hide","popperConfig","modifiers","name","options","element","getRTLPlacement","current","useEffect","toggleVisible","setTimeout","includes","onClick","onFocus","onBlur","onMouseEnter","onMouseLeave","CConditionalPortal","portal","Transition","in","mountOnEnter","nodeRef","onEnter","onEntering","style","display","onExit","onExited","timeout","enter","exit","getTransitionDurationFromElement","unmountOnExit","state","fade","id","role","isRequired","fallbackPlacementsPropType","triggerPropType","isRTL"],"sourceRoot":""}