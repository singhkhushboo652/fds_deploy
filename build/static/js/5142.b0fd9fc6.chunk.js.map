{"version":3,"file":"static/js/5142.b0fd9fc6.chunk.js","mappings":"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","sources":["views/pages/product/AddProduct.js","../node_modules/@coreui/react-pro/src/components/alert/CAlert.tsx","../node_modules/@coreui/react-pro/src/components/form/CForm.tsx","../node_modules/@coreui/react-pro/src/components/form/CFormInput.tsx","../node_modules/@coreui/react-pro/src/components/form/CFormSelect.tsx","../node_modules/@coreui/react-pro/src/components/form/CFormTextarea.tsx"],"sourcesContent":["import React, {useEffect, useState} from 'react'\nimport { Link, useNavigate } from 'react-router-dom'\nimport {\n  CButton,\n  CCard,\n  CCardBody,\n  CCol,\n  CContainer,\n  CForm,\n  CFormInput,\n  CImage,\n  CFormSelect,\n  CFormCheck,\n  CInputGroup,\n  CInputGroupText,\n  CRow,\n  CAlert,\n  CCardHeader,\n  CDatePicker,\n  CFormTextarea,\n  CMultiSelect,\n  CNavGroup\n} from '@coreui/react-pro'\nimport axios from 'axios'\nimport CIcon from '@coreui/icons-react'\nimport { toast } from 'react-toastify'\n\nconst AddProduct = () => {\n    const navigate = useNavigate();\n    const [manuDesc, setManuDesc] = useState(\"\")\n    const [distItemNum, setDistItemNum] = useState(\"\")\n    const [name, setName] = useState(\"\")\n    const [manuItemNum, setManuItemNum] = useState(\"\")\n    const [productType, setProductType] = useState(\"\")\n    const [caseDimeTitle, setCaseDimeTitle] = useState(\"\")\n    const [caseDimeLength, setCaseDimeLength] = useState(0)\n    const [caseDimeWidth, setCaseDimeWidth] = useState(0)\n    const [caseDimeHeight, setCaseDimeHeight] = useState(0)\n    const [servingSize, setServingSize] = useState(\"\")\n    const [shelfLifeManu, setShelfLifeManu] = useState(\"\")\n    const [storageMethod, setStorageMethod] = useState(\"\")\n    const [tips, setTips] = useState(\"\")\n    const [ingreList, setIngreList] = useState(\"\")\n    const [servicePerCont, setServicePerCont] = useState(\"\")\n    const [serviceSizeQty, setServiceSizeQty] = useState(\"\")\n    const [serviceSizeWt, setServiceSizeWt] = useState(\"\")\n    const [serviceSizeWtUOM, setServiceSizeWtUOM] = useState(\"\")\n    const [shelfLife, setshelfLife] = useState(\"\")\n    \n    const [distributerIds, setDistributerIds] = useState(\"\")\n    const [allergyFreeIds, setAllergyFreeIds] = useState(\"\")\n    const [allergyContainIds, setAllergyContainIds] = useState(\"\")\n    const [manuMarkStmt, setManuMarkStmt] = useState(\"\")\n    const [caseCount, setCaseCount] = useState(\"\")\n    const [masterPack, setMasterPack] = useState(\"\")\n    const [grossCaseWeight, setGrossCaseWeight] = useState(\"\")\n    const [gtinNum, setGtinNum] = useState(\"\")\n    const [upc, setUPC] = useState(\"\")\n\n    const [calories, setCalories] = useState(\"\")\n    const [cholestrol, setCholestrol] = useState(\"\")\n    const [totalFat, setTotalFat] = useState(\"\")\n    const [saturatedFat, setSaturatedFat] = useState(\"\")\n    const [transFat, setTransFat] = useState(\"\")\n    const [sodium, setSodium] = useState(\"\")\n    const [totalCarboht, setTotalCarboht] = useState(\"\")\n    const [dietaryFiber, setDietaryFiber] = useState(\"\")\n    const [totalSugar, setTotalSugar] = useState(\"\")\n    const [addedSugar, setAddedSugar] = useState(\"\")\n    const [protein, setProtein] = useState(\"\")\n    const [vitD, setVitD] = useState(\"\")\n    const [calcuim, setCalcuim] = useState(\"\")\n    const [iron, setIron] = useState(\"\")\n    const [potassium, setPotassium] = useState(\"\")\n    const [casePack, setCasePack] = useState(\"\")\n    const [caseBreakable, setCaseBreakable] = useState(\"Yes\")\n    const [brokenCase, setBrokenCase] = useState(\"\")\n    const [netWeight, setNetWeight] = useState(\"\")\n    const [unitMeasure, setUnitMeasure] = useState(\"\")\n\n    const [cnLabel, setCnLabel] = useState(\"Yes\")\n    const [isActive, setIsActive] = useState(1)\n\n    const [isSubmitting, setIsSubmitting] = useState(false);\n    const [formData, setFormData] = useState([{ imageType: '', logo: '', logoFile: null, base64Image: '' }]);\n\n    const [clients, setClients] = useState([])\n    const [allergies, setAllergies] = useState([])\n    const [errors, setErrors] = useState({});\n\n    const handleAddForm = () => {\n      setFormData([...formData, { imageType: '', logo: '', logoFile: null, base64Image: '' }]);\n    };\n  \n    const handleRemoveForm = (index) => {\n      const updatedFormData = [...formData];\n      updatedFormData.splice(index, 1);\n      setFormData(updatedFormData);\n    };\n  \n    const handleInputChange = async (index, event) => {\n      const { name, value, files } = event.target;\n      const updatedFormData = [...formData];\n  \n      if (files) {\n        const file = files[0];\n        updatedFormData[index]['logoFile'] = URL.createObjectURL(file);\n  \n        // Convert the image file to a base64 encoded string\n        const reader = new FileReader();\n        reader.readAsDataURL(file);\n        reader.onloadend = () => {\n          updatedFormData[index]['base64Image'] = reader.result;\n          setFormData(updatedFormData);\n        };\n      } else {\n        updatedFormData[index][name] = value;\n        setFormData(updatedFormData);\n      }\n    };\n\n  useEffect(() => {  \n    axios.get('client/findAll/distributer', {headers: { Authorization: `Bearer ${localStorage.getItem('token')}` }}).then(response => {\n      let dataFromDatabase = response.data.data;\n      const formattedOptions = dataFromDatabase.map(item => ({\n        value: item.id,\n        label: item.companyName\n      }));\n      console.log(formattedOptions);\n      setClients(formattedOptions);\n    })\n    .catch(error => console.error('error fetching clients', error));\n\n    const allergies = [\n      {value: 'milk', label: 'Milk'},\n      {value: 'eggs', label: 'Eggs'},\n      {value: 'fish', label: 'Fish'},\n      {value: 'crustacean shellfish', label: 'Crustacean Shellfish'},\n      {value: 'tree nuts', label: 'Tree Nuts'},\n      {value: 'peanuts', label: 'Peanuts'},\n      {value: 'wheat', label: 'Wheat'},\n      {value: 'soybeans', label: 'Soybeans'}\n    ]\n    setAllergies(allergies);\n  }, [])\n\n  const validateForm = () => {\n    const errors = {};\n    if (!manuItemNum.trim()) {\n      errors.manuItemNum = 'First Name is required';\n    }\n    if (!manuDesc.trim()) {\n      errors.manuDesc = 'Last Name is required';\n    }\n    if (!name.trim()) {\n      errors.name = 'Email is required';\n    }\n    if (!manuMarkStmt.trim()) {\n      errors.manuMarkStmt = 'username is required';\n    }\n    if (!productType.trim()) {\n      errors.productType = 'Work address is required';\n    }\n    if (!caseCount.trim()) {\n      errors.caseCount = 'Work address is required';\n    }\n    if (!masterPack.trim()) {\n      errors.masterPack = 'State is required';\n    }\n    if (!grossCaseWeight.trim()) {\n      errors.grossCaseWeight = 'City is required';\n    }\n    if (!caseDimeTitle.trim()) {\n      errors.caseDimeTitle = 'Zip code is required';\n    }\n    if (!servingSize.trim()) {\n      errors.servingSize = 'Zip code is required';\n    }\n    if (!shelfLife.trim()) {\n      errors.shelfLife = 'Zip code is required';\n    }\n    if (!shelfLifeManu.trim()) {\n      errors.shelfLifeManu = 'Zip code is required';\n    }\n    if (!storageMethod.trim()) {\n      errors.storageMethod = 'Zip code is required';\n    }\n    if (!ingreList.trim()) {\n      errors.ingreList = 'Zip code is required';\n    }\n    if (!tips.trim()) {\n      errors.tips = 'Zip code is required';\n    }\n    if (!servicePerCont.trim()) {\n      errors.servicePerCont = 'Zip code is required';\n    }\n    if (!serviceSizeWt.trim()) {\n      errors.serviceSizeWt = 'Zip code is required';\n    }\n    if (!serviceSizeQty.trim()) {\n      errors.serviceSizeQty = 'Zip code is required';\n    }\n    if (!calories.trim()) {\n      errors.calories = 'Zip code is required';\n    }\n    if (!cholestrol.trim()) {\n      errors.cholestrol = 'Zip code is required';\n    }\n    if (!sodium.trim()) {\n      errors.sodium = 'Zip code is required';\n    }\n    if (!totalFat.trim()) {\n      errors.totalFat = 'Zip code is required';\n    }\n    if (!saturatedFat.trim()) {\n      errors.saturatedFat = 'Zip code is required';\n    }\n    if (!transFat.trim()) {\n      errors.transFat = 'Zip code is required';\n    }\n    if (!totalCarboht.trim()) {\n      errors.totalCarboht = 'Zip code is required';\n    }\n    if (!dietaryFiber.trim()) {\n      errors.dietaryFiber = 'Zip code is required';\n    }\n    if (!totalSugar.trim()) {\n      errors.totalSugar = 'Zip code is required';\n    }\n    if (!addedSugar.trim()) {\n      errors.addedSugar = 'Zip code is required';\n    }\n    if (!protein.trim()) {\n      errors.protein = 'Zip code is required';\n    }\n    if (!vitD.trim()) {\n      errors.vitD = 'Zip code is required';\n    }\n    if (!calcuim.trim()) {\n      errors.calcuim = 'Zip code is required';\n    }\n    if (!iron.trim()) {\n      errors.iron = 'Zip code is required';\n    }\n    if (!potassium.trim()) {\n      errors.potassium = 'Zip code is required';\n    }\n    \n    console.log(errors);\n    // Add validations for other fields\n\n    setErrors(errors);\n    return Object.keys(errors).length === 0;\n  };\n\n  const handleChange = (selectedOptions) => {\n    const ids = selectedOptions.map(option => option.value);\n        console.log(ids);\n        setDistributerIds(ids);\n  };\n\n  const handleChangeAllergyFree = (selectedOptions) => {\n    const ids = selectedOptions.map(option => option.value);\n        console.log(ids);\n        setAllergyFreeIds(ids);\n  };\n\n  const handleChangeAllergyContain = (selectedOptions) => {\n    const ids = selectedOptions.map(option => option.value);\n        console.log(ids);\n        setAllergyContainIds(ids);\n  };\n\n  const calculateCasePack = () => {\n    setCasePack(caseCount+'/'+masterPack+' '+unitMeasure);\n  }\n\n  const calculateNetWeight = () => {\n    let netWeightValue = (caseCount*masterPack); \n    setNetWeight(netWeightValue);\n  }\n\n  const calculateCaseDime = () =>{\n    let casedimension = caseDimeLength +'L X '+caseDimeWidth+'W X '+caseDimeHeight+'H';\n    setCaseDimeTitle(casedimension);\n  }\n\n \n    \n    const addProductAction = async (e) => {\n        e.preventDefault();\n        if(validateForm()){\n          setIsSubmitting(true)\n          let payload = {\n              manuDesc: manuDesc,\n              name: name,\n              distItemNum:distItemNum,\n              manuItemNum:manuItemNum,\n              manuMarkStmt:manuMarkStmt,\n              distributerIds: distributerIds,\n              productType: productType,\n              caseDimeTitle: caseDimeTitle,\n              caseDimeLength: caseDimeLength,\n              caseDimeWidth: caseDimeWidth,\n              caseDimeHeight: caseDimeHeight,\n              servingSize: servingSize,\n              shelfLifeManu: shelfLifeManu,\n              storageMethod: storageMethod,\n              tips: tips,\n              ingreList: ingreList,\n              servicePerCont: servicePerCont,\n              serviceSizeQty: serviceSizeQty,\n              serviceSizeWt: serviceSizeWt,\n              shelfLife: shelfLife,\n              masterPack: masterPack,\n              grossCaseWeight: grossCaseWeight,\n              gtinNum: gtinNum,\n              upc: upc,\n              caseCount: caseCount,\n              calories: calories,\n              cholestrol: cholestrol,\n              totalFat: totalFat,\n              saturatedFat: saturatedFat,\n              transFat: transFat,\n              sodium: sodium,\n              totalCarboht: totalCarboht,\n              dietaryFiber: dietaryFiber,\n              totalSugar: totalSugar,\n              addedSugar: addedSugar,\n              protein: protein,\n              vitD: vitD,\n              calcuim: calcuim,\n              iron: iron,\n              potassium: potassium,\n              allergyContains: allergyContainIds,\n              allergyFree: allergyFreeIds,\n              caseBreakable: caseBreakable,\n              unitMeasure: unitMeasure,\n              brokenCase: brokenCase,\n              serviceSizeWtUOM:serviceSizeWtUOM,\n              cnLabel: cnLabel,\n              isActive: isActive\n          }\n          const productImages = formData.map(data => ({\n            imageType: data.imageType,\n            image: data.base64Image,\n          }));\n\n          const dataToSend = {\n            ...payload,\n            images: JSON.stringify(productImages)\n          };\n          axios.post('/product/create', dataToSend, {headers: { Authorization: `Bearer ${localStorage.getItem('token')}` }} )\n          .then((r) => {\n              setIsSubmitting(false)\n              navigate(\"/products\");\n          })\n          .catch((e) => {\n              setIsSubmitting(false)\n              toast.error(\"There is something wrong !!\");\n          });\n        }else{\n          toast.error(\"Please fill all required field\");\n        }\n    }\n  return (\n    <div className=\"bg-body-tertiary min-vh-75 d-flex flex-row align-items-center\">\n      <CContainer>\n        <CAlert className='mb-4' color='danger'>Note: All fields are required except GTIN Number, if any field not available please input 0 or NA !!</CAlert>\n        <CForm className=\"row g-3\" onSubmit={(e)=>addProductAction(e)}>\n        <CRow className=\"justify-content-center\">\n          <CCol md={9} lg={7} xl={12}>\n            <CCard className=\"mb-4\">\n              <CCardHeader>MFG Product Information</CCardHeader>\n              <CCardBody className=\"p-4\">\n                <CRow className='mb-4'>\n                <CCol md={6}>\n                  <CMultiSelect options={clients} label=\"Distributer\" onChange={handleChange} value={clients.filter(option => distributerIds.includes(option.value))}/>\n                </CCol>\n                  <CCol md={6}>\n                    <CFormInput type=\"text\" id=\"manuItemNum\" label=\"Manufacturer Item Number\" onChange={(e)=>{setManuItemNum(e.target.value)}} value={manuItemNum} name='manuItemNum' invalid={!!errors.manuItemNum} />\n                  </CCol>\n                </CRow>\n\n                <CRow className='mb-4'>\n                  {/* <CCol md={6}>\n                    <CFormInput type=\"text\" id=\"distItemNum\" label=\"Distributor Item Number\" onChange={(e)=>{setDistItemNum(e.target.value)}} value={distItemNum} name='distItemNum' invalid={!!errors.distItemNum} />\n                  </CCol> */}\n                    <CCol md={6}>\n                      <CFormInput type=\"number\" id=\"gtinNum\" label=\"GTIN Number\" onChange={(e)=>{setGtinNum(e.target.value)}} value={gtinNum} name='gtinNum' />\n                    </CCol>\n                    <CCol md={6}>\n                      <CFormInput type=\"number\" id=\"upc\" label=\"UPC\" onChange={(e)=>{setUPC(e.target.value)}} value={upc} name='upc' />\n                    </CCol>\n                </CRow>\n                <CRow className='mb-4'>\n                <CCol md={12}>\n                  <CFormInput type=\"text\" id=\"name\" label=\"Name\" onChange={(e)=>{setName(e.target.value)}} value={name} name='name' invalid={!!errors.name} />\n                </CCol>\n                </CRow>\n                <CRow className='mb-4'>\n                  <CCol md={12}>\n                    <CFormTextarea id=\"manuDesc\" label=\"Product Description\" onChange={(e)=>{setManuDesc(e.target.value)}} value={manuDesc} name='manuDesc' invalid={!!errors.manuDesc}></CFormTextarea>\n                  </CCol>\n                </CRow>\n                <CRow className='mb-4'>\n                  <CCol md={12}>\n                    <CFormTextarea id=\"manuMarkStmt\" label=\"Product Marketing Statement\" onChange={(e)=>{setManuMarkStmt(e.target.value)}} value={manuMarkStmt} name='manuMarkStmt' invalid={!!errors.manuMarkStmt}></CFormTextarea>\n                  </CCol>\n                </CRow>\n                <CRow className='mb-4'>\n                <CCol md={6}>\n                  <CFormSelect id=\"productType\" label=\"Product Type\" name='productType' onChange={(e)=>{setProductType(e.target.value)}} value={productType} invalid={!!errors.productType}>\n                    <option>Choose...</option>\n                    <option value='Paper' >Paper</option>\n                    <option value='Disposables' >Disposables</option>\n                    <option value='Beverages' >Beverages</option>\n                    <option value='FoodFrozen' >Food-Frozen</option>\n                    <option value='FoodFresh' >Food-Fresh</option>\n                    <option value='DryFoods' >Dry Foods</option>\n                    <option value='SmallWares' >Small Wares</option>\n                  </CFormSelect>\n                </CCol>\n                </CRow>\n                </CCardBody>\n                </CCard>\n                </CCol>\n                </CRow>\n                <CRow>\n                  <CCol md={9} lg={7} xl={12}>                    \n                    <CCard className=\"mb-4\">\n                      <CCardHeader>Product Images</CCardHeader>\n                      <CCardBody className=\"p-4\">\n                      {formData.map((data, index) => (\n                        <CRow key={index} className=\"mb-3\">\n                          <CCol>\n                            <CFormSelect\n                              id={`imageType${index}`}\n                              name=\"imageType\"\n                              value={data.imageType}\n                              onChange={(e) => handleInputChange(index, e)} \n                            >\n                              <option value=\"\">...Choose</option>\n                              <option value=\"close\">Closed Case</option>\n                              <option value=\"open\">Open Case</option>\n                              <option value=\"innerPack\">Inner Pack</option>\n                              <option value=\"raw\">Raw/Uncooked</option>\n                              <option value=\"plated\">Plated</option>\n                              <option value=\"styled\">Styled</option>\n                            </CFormSelect>\n                          </CCol>\n                          <CCol>\n                            <CFormInput\n                              type=\"file\"\n                              id={`productImage${index}`}\n                              name=\"logo\"\n                              onChange={(e) => handleInputChange(index, e)}\n                            />\n                            {data.logoFile && <CImage rounded thumbnail width={200} height={200} src={data.logoFile} />}\n                          </CCol>\n                          <CCol>\n                            <CButton color=\"danger\" onClick={() => handleRemoveForm(index)}>\n                              Remove\n                            </CButton>\n                          </CCol>\n                        </CRow>\n                      ))}\n                      <CButton type=\"button\" className='btn btn-primary' onClick={handleAddForm}>\n                        Add Image\n                      </CButton>\n                      </CCardBody>\n                    </CCard>\n                  </CCol>\n                </CRow>\n                <CRow>\n                  <CCol md={9} lg={7} xl={12}>\n                    \n                    <CCard className=\"mb-4\">\n                    <CCardHeader>Product Attributes</CCardHeader>\n                  <CCardBody className=\"p-4\">\n                    \n                <CRow className='mb-4'>\n                    <CCol>\n                    <CFormInput type='number' locale=\"en-US\" id=\"caseCount\" label=\"Units in Case\" onChange={(e)=>{setCaseCount(e.target.value)}} value={caseCount} name='caseCount' invalid={!!errors.caseCount}/>\n                    </CCol>\n                    <CCol>\n                    <CFormInput type=\"number\" id=\"masterPack\" label=\"Unit Size\" onChange={(e)=>{setMasterPack(e.target.value)}} value={masterPack} name='masterPack' invalid={!!errors.masterPack} />\n                    </CCol>\n                    <CCol>\n                    <CFormSelect id=\"unitMeasure\" label=\"Unit of Measure\" name='unitMeasure' onChange={(e)=>{setUnitMeasure(e.target.value)}} value={unitMeasure} invalid={!!errors.unitMeasure}>\n                        <option>Choose...</option>\n                        <option value='Pounds(LB)' >Pounds (LB)</option>\n                        <option value='Ounces(OZ)' >Ounces (OZ)</option>\n                        <option value='Grams(G)' >Grams (G)</option>\n                        <option value='Kilograms(KG)' >Kilograms (KG)</option>\n                        <option value='Gallons(GAL)' >Gallons (GAL)</option>\n                        <option value='Quarts(QT)' >Quarts (QT)</option>\n                        <option value='Pints(PT)' >Pints (PT)</option>\n                        <option value='FluidOunces(FLOZ)' >Fluid Ounces (FL OZ)</option>\n                        <option value='Liters(L)' >Liters (L)</option>\n                        <option value='Milliliters(ML)' >Milliliters (ML)</option>\n                        <option value='Dozen(DZ)' >Dozen (DZ)</option>\n                        <option value='Count(CT)' >Count (CT)</option>\n                        <option value='Each(EA)' >Each (EA)</option>\n                        <option value='Cases(CS)' >Cases (CS)</option>\n                        <option value='AveCatchWeight(CW)' >Ave Catch Weight (CW)</option>\n                      </CFormSelect>\n                    </CCol>\n                </CRow>\n                <CRow className='mb-4'>\n                    <CCol>\n                    <CFormInput type='text' locale=\"en-US\" id=\"casePack\" label=\"Case Pack\"  value={casePack} name='casePack' onClick={calculateCasePack} onMouseOver={calculateCasePack} />\n                    </CCol>\n                    <CCol>\n                      <CFormInput type=\"text\" id=\"netWeight\" label=\"Net Weight\" value={netWeight} name='netWeight' onClick={calculateNetWeight} onMouseOver={calculateNetWeight}/>\n                    </CCol>\n                    <CCol>\n                      <CFormSelect id=\"caseBreakable\" label=\"Case Breakable\" name='caseBreakable' value={caseBreakable} invalid={!!errors.caseBreakable} onChange={(e)=>{setCaseBreakable(e.target.value)}}>\n                        <option value='Yes' >Yes</option>\n                        <option value='No' >No</option>\n                      </CFormSelect>\n                    </CCol>\n                    <CCol>\n                      <CFormSelect id=\"brokenCase\" label=\"Broken Case UOM\" name='brokenCase' onChange={(e)=>{setBrokenCase(e.target.value)}} value={brokenCase} invalid={!!errors.brokenCase}>\n                        <option>Choose...</option>\n                        <option value='Pounds(LB)' >Pounds (LB)</option>\n                        <option value='Ounces(OZ)' >Ounces (OZ)</option>\n                        <option value='Gallons(GAL)' >Gallons (GAL)</option>\n                        <option value='Quarts(QT)' >Quarts (QT)</option>\n                        <option value='Pints(PT)' >Pints (PT)</option>\n                        <option value='Liters(L)' >Liters (L)</option>\n                        <option value='Milliliters(ML)' >Milliliters (ML)</option>\n                        <option value='Dozen(DZ)' >Dozen (DZ)</option>\n                        <option value='Count(CT)' >Count (CT)</option>\n                        <option value='Each(EA)' >Each (EA)</option>\n                      </CFormSelect>\n                    </CCol>\n                </CRow>\n                <CRow className='mb-4'>\n                    <CCol>\n                    <CFormInput type=\"number\" id=\"grossCaseWeight\" label=\"Gross Case Weight\" onChange={(e)=>{setGrossCaseWeight(e.target.value)}} value={grossCaseWeight} name='grossCaseWeight' invalid={!!errors.grossCaseWeight} />\n                    </CCol>\n                </CRow>\n                    <CRow className='mb-4'>\n                      <CCol>\n                      <CFormInput type=\"number\" id=\"caseDimeLength\" label=\"Length\" onChange={(e)=>{setCaseDimeLength(e.target.value)}} value={caseDimeLength} name='caseDimeLength' invalid={!!errors.caseDimeLength} />\n                      </CCol>\n                      <CCol>\n                      <CFormInput type=\"number\" id=\"caseDimeWidth\" label=\"Width\" onChange={(e)=>{setCaseDimeWidth(e.target.value)}} value={caseDimeWidth} name='caseDimeWidth' invalid={!!errors.caseDimeWidth} />\n                      </CCol>\n                      <CCol>\n                      <CFormInput type=\"number\" id=\"caseDimeHeight\" label=\"Height\" onChange={(e)=>{setCaseDimeHeight(e.target.value)}} value={caseDimeHeight} name='caseDimeHeight' invalid={!!errors.caseDimeHeight} />\n                      </CCol>\n                      <CCol>\n                        <CFormInput type='text' id=\"caseDimeTitle\" name=\"caseDimeTitle\" label=\"Case Dimensions\" placeholder=\"title\"  value={caseDimeTitle} onClick={calculateCaseDime} onMouseOver={calculateCaseDime}/>\n                      </CCol>\n\n                    </CRow>\n                    <CRow className='mb-4'>\n                    <CCol>\n                      <CFormInput type='text' id=\"shelfLifeManu\" label=\"Shelf Life from Manufacturer\" name=\"shelfLifeManu\" onChange={(e)=>{setShelfLifeManu(e.target.value)}} value={shelfLifeManu} invalid={!!errors.shelfLifeManu}/>\n                    </CCol>\n                    <CCol>\n                      <CFormSelect id=\"storageMethod\" label=\"Storage Method\" name='storageMethod' onChange={(e)=>{setStorageMethod(e.target.value)}} value={storageMethod} invalid={!!errors.storageMethod}>\n                        <option>Choose...</option>\n                        <option value='Dry' >Dry</option>\n                        <option value='Refrigerated' >Refrigerated</option>\n                        <option value='Frozen' >Frozen</option>\n                      </CFormSelect>\n                    </CCol>\n                    <CCol>\n                      <CFormSelect id=\"shelfLife\" label=\"Shelf Life\" name='shelfLife' onChange={(e)=>{setshelfLife(e.target.value)}} value={shelfLife} invalid={!!errors.shelfLife} >\n                        <option>Choose...</option>\n                        <option value='UseByDate' >Use By Date</option>\n                        <option value='days365' >365 days</option>\n                        <option value='days365Plus' >365 days plus</option>\n                      </CFormSelect>\n                    </CCol>\n                    </CRow>\n                    <CRow className='mb-4'>\n                  <CCol md={12}>\n                    <CFormTextarea id=\"ingreList\" label=\"List of all Ingredients\" onChange={(e)=>{setIngreList(e.target.value)}} value={ingreList} name='ingreList' invalid={!!errors.ingreList}></CFormTextarea>\n                  </CCol>\n                </CRow>\n                <CRow className='mb-4'>\n                  <CCol md={12}>\n                    <CFormTextarea id=\"tips\" label=\"Tips & Handling\" onChange={(e)=>{setTips(e.target.value)}} value={tips} name='tips' invalid={!!errors.tips}></CFormTextarea>\n                  </CCol>\n                </CRow>\n                    <CRow className='mb-4'>\n                    <CCol>\n                    <CMultiSelect options={allergies} label=\"Allergy Info - Free From\" onChange={handleChangeAllergyFree} value={allergies.filter(option => allergyFreeIds.includes(option.value))}/>\n                    </CCol>\n                    <CCol>\n                    <CMultiSelect options={allergies} label=\"Allergy Info - Contains\" onChange={handleChangeAllergyContain} value={allergies.filter(option => allergyContainIds.includes(option.value))}/>\n                    </CCol>\n                    </CRow>\n                  </CCardBody>\n                </CCard>\n                  </CCol>\n            </CRow>\n            <CRow>\n              <CCard>\n                <CCardHeader>Nutrition Facts - Based by Serving</CCardHeader>\n                <CCardBody className=\"p-4\">\n                <CRow>\n                    <CCol>\n                    <CFormInput type=\"number\" id=\"calories\" label=\"Calories\" onChange={(e)=>{setCalories(e.target.value)}} value={calories} name='calories' invalid={!!errors.calories} />\n                    </CCol>\n                    <CCol>\n                    <CFormInput type=\"number\" id=\"cholestrol\" label=\"Cholesterol (mg)\" onChange={(e)=>{setCholestrol(e.target.value)}} value={cholestrol} name='cholestrol' invalid={!!errors.cholestrol}/>\n                    </CCol>\n                    <CCol>\n                    <CFormInput type=\"number\" id=\"sodium\" label=\"Sodium (mg)\" onChange={(e)=>{setSodium(e.target.value)}} value={sodium} name='sodium' invalid={!!errors.sodium} />\n                    </CCol>\n                  </CRow>\n                  <CRow>\n                    <CCol>\n                    <CFormInput type=\"number\" id=\"totalFat\" label=\"Total Fat (g)\" onChange={(e)=>{setTotalFat(e.target.value)}} value={totalFat} name='totalFat' invalid={!!errors.totalFat} />\n                    </CCol>\n                    <CCol>\n                    <CFormInput type=\"number\" id=\"saturatedFat\" label=\"Saturated Fat (g)\" onChange={(e)=>{setSaturatedFat(e.target.value)}} value={saturatedFat} name='saturatedFat' invalid={!!errors.saturatedFat} />\n                    </CCol>\n                    <CCol>\n                    <CFormInput type=\"number\" id=\"transFat\" label=\"Trans Fat (g)\" onChange={(e)=>{setTransFat(e.target.value)}} value={transFat} name='transFat' invalid={!!errors.transFat} />\n                    </CCol>\n                  </CRow>\n                  <CRow>\n                    <CCol>\n                    <CFormInput type=\"number\" id=\"totalCarboht\" label=\"Total Carbohydrate (g)\" onChange={(e)=>{setTotalCarboht(e.target.value)}} value={totalCarboht} name='totalCarboht' invalid={!!errors.totalCarboht} />\n                    </CCol>\n                    <CCol>\n                    <CFormInput type=\"number\" id=\"totalSugar\" label=\"Total Sugars (g)\" onChange={(e)=>{setTotalSugar(e.target.value)}} value={totalSugar} name='totalSugar' invalid={!!errors.totalSugar} />\n                    </CCol>\n                    <CCol>\n                    <CFormInput type=\"number\" id=\"addedSugar\" label=\"Added Sugars (g)\" onChange={(e)=>{setAddedSugar(e.target.value)}} value={addedSugar} name='addedSugar' invalid={!!errors.addedSugar}/>\n                    </CCol>\n                  </CRow>\n                  <CRow>\n                    <CCol>\n                    <CFormInput type=\"number\" id=\"protein\" label=\"Protein (g)\" onChange={(e)=>{setProtein(e.target.value)}} value={protein} name='protein' invalid={!!errors.protein} />\n                    </CCol>\n                    <CCol>\n                    <CFormInput type=\"number\" id=\"dietaryFiber\" label=\"Dietary Fiber (g)\" onChange={(e)=>{setDietaryFiber(e.target.value)}} value={dietaryFiber} name='dietaryFiber' invalid={!!errors.dietaryFiber} />\n                    </CCol>\n                    <CCol>\n                    <CFormInput type=\"number\" id=\"vitD\" label=\" Vitamin D (mcg)\" onChange={(e)=>{setVitD(e.target.value)}} value={vitD} name='vitD' invalid={!!errors.vitD} />\n                    </CCol>\n                  </CRow>\n                  <CRow>\n                    <CCol>\n                    <CFormInput type=\"number\" id=\"calcuim\" label=\"Calcium (mg)\" onChange={(e)=>{setCalcuim(e.target.value)}} value={calcuim} name='calcuim' invalid={!!errors.calcuim} />\n                    </CCol>\n                    <CCol>\n                    <CFormInput type=\"number\" id=\"iron\" label=\"Iron (mg)\" onChange={(e)=>{setIron(e.target.value)}} value={iron} name='iron' invalid={!!errors.iron} />\n                    </CCol>\n                    <CCol>\n                    <CFormInput type=\"number\" id=\"potassium\" label=\"Potassium (mg)\" onChange={(e)=>{setPotassium(e.target.value)}} value={potassium} name='potassium' invalid={!!errors.potassium} />\n                    </CCol>\n                  </CRow>\n                <CRow>\n                    <CCol>\n                      <CFormInput type='number' id=\"servingSize\" label=\"Serving Size\" name=\"servingSize\"  onChange={(e)=>{setServingSize(e.target.value)}} value={servingSize} invalid={!!errors.servingSize} />\n                    </CCol>\n                    <CCol>\n                    <CFormSelect id=\"serviceSizeQty\" label=\"Serving Size UOM\" name='serviceSizeQty' onChange={(e)=>{setServiceSizeQty(e.target.value)}} value={serviceSizeQty}  >\n                      <optgroup label=\"Weight\">\n                          <option value='Pounds (lbs)' >Pounds (lbs)</option>\n                          <option value='Ounces (oz)' >Ounces (oz)</option>\n                          <option value='Grams (g)' >Grams (g)</option>\n                          <option value='Kilograms (kg)' >Kilograms (kg)</option>\n                      </optgroup>\n                      <optgroup label=\"Volume\">\n                          <option value='Gallons (gal)' >Gallons (gal)</option>\n                          <option value='Quarts (qt)' >Quarts (qt)</option>\n                          <option value='Pints (pt)' >Pints (pt)</option>\n                          <option value='Cups (cup)' >Cups (cup)</option>\n                          <option value='Fluid Ounces (fl oz)' >Fluid Ounces (fl oz)</option>\n                          <option value='Liters (L)' >Liters (L)</option>\n                          <option value='Milliliters (ml)' >Milliliters (ml)</option>\n                      </optgroup>\n                      <optgroup label=\"Count\">\n                          <option value='Each (ea)' >Each (ea)</option>\n                          <option value='Pieces (pcs)' >Pieces (pcs)</option>\n                          <option value='Slices (slices)' >Slices (slices)</option>\n                          <option value='Dozen (dz)' >Dozen (dz)</option>\n                          <option value='Units (units)' >Units (units)</option>\n                      </optgroup>\n                      <optgroup label=\"Other\">\n                          <option value='Tablespoons (tbsp)' >Tablespoons (tbsp)</option>\n                          <option value='Teaspoons (tsp)' >Teaspoons (tsp)</option>\n                          <option value='Packets (packets)' >Packets (packets)</option>\n                      </optgroup>\n                    </CFormSelect>\n                    </CCol>\n                    <CCol>\n                    <CFormInput type=\"number\" id=\"servicePerCont\" label=\"Servings per Case\" onChange={(e)=>{setServicePerCont(e.target.value)}} value={servicePerCont} name='servicePerCont' invalid={!!errors.servicePerCont}/>\n                    </CCol>\n                    <CCol>\n                    <CFormInput type=\"number\" id=\"serviceSizeWt\" label=\"Serving Size Weight\" onChange={(e)=>{setServiceSizeWt(e.target.value)}} value={serviceSizeWt} name='serviceSizeWt' invalid={!!errors.serviceSizeWt} />\n                    </CCol>\n                    <CCol>                      \n                    <CFormSelect id=\"serviceSizeWtUOM\" label=\"Serving Size Weight UOM\" name='serviceSizeWtUOM' onChange={(e)=>{setServiceSizeWtUOM(e.target.value)}} value={serviceSizeWtUOM}  >\n                      <optgroup label=\"Weight\">\n                          <option value='Pounds (lbs)' >Pounds (lbs)</option>\n                          <option value='Ounces (oz)' >Ounces (oz)</option>\n                          <option value='Grams (g)' >Grams (g)</option>\n                          <option value='Kilograms (kg)' >Kilograms (kg)</option>\n                      </optgroup>\n                      <optgroup label=\"Volume\">\n                          <option value='Gallons (gal)' >Gallons (gal)</option>\n                          <option value='Quarts (qt)' >Quarts (qt)</option>\n                          <option value='Pints (pt)' >Pints (pt)</option>\n                          <option value='Cups (cup)' >Cups (cup)</option>\n                          <option value='Fluid Ounces (fl oz)' >Fluid Ounces (fl oz)</option>\n                          <option value='Liters (L)' >Liters (L)</option>\n                          <option value='Milliliters (ml)' >Milliliters (ml)</option>\n                      </optgroup>\n                      <optgroup label=\"Count\">\n                          <option value='Each (ea)' >Each (ea)</option>\n                          <option value='Pieces (pcs)' >Pieces (pcs)</option>\n                          <option value='Slices (slices)' >Slices (slices)</option>\n                          <option value='Dozen (dz)' >Dozen (dz)</option>\n                          <option value='Units (units)' >Units (units)</option>\n                      </optgroup>\n                      <optgroup label=\"Other\">\n                          <option value='Tablespoons (tbsp)' >Tablespoons (tbsp)</option>\n                          <option value='Teaspoons (tsp)' >Teaspoons (tsp)</option>\n                          <option value='Packets (packets)' >Packets (packets)</option>\n                      </optgroup>\n                    </CFormSelect>\n                    </CCol>\n                  </CRow>\n                    <CRow className='mb-4'>\n                      <CCol>\n                        <CFormSelect id=\"cnLabel\" label=\"C N Label\" name='cnLabel' onChange={(e)=>{setCnLabel(e.target.value)}} value={cnLabel}  >\n                          <option value='Yes' >Yes</option>\n                          <option value='No' >No</option>\n                        </CFormSelect>\n                      </CCol>\n                    </CRow>\n              </CCardBody>\n              </CCard>\n              </CRow>\n              <CRow>\n                <CCard className=\"mb-4\">\n                  <CCardHeader>Visibility</CCardHeader>\n                  <CCardBody className=\"p-4\">\n                    <CRow className='mb-4'>\n                      <CCol>\n                        <CFormSelect id=\"isActive\" label=\"Published Product\" name='isActive' onChange={(e)=>{setIsActive(e.target.value)}} value={isActive} >\n                          <option value='1' >Published</option>\n                          <option value='0' >Unpublished</option>\n                        </CFormSelect>\n                      </CCol>\n                    </CRow>\n                  </CCardBody>\n                </CCard>\n              </CRow>\n              <CRow className='p-4'>\n              <CCol xs={12}>\n                  <CButton color=\"primary\" type=\"submit\" disabled={isSubmitting} className='float-end'>Add Product</CButton>\n                </CCol>\n              </CRow>\n              </CForm>\n      </CContainer>\n    </div>\n  )\n}\n\nexport default AddProduct\n","import React, { forwardRef, HTMLAttributes, useEffect, useState, useRef } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\nimport { Transition } from 'react-transition-group'\n\nimport { CCloseButton } from '../close-button/CCloseButton'\n\nimport { useForkedRef } from '../../hooks'\nimport { colorPropType } from '../../props'\nimport type { Colors } from '../../types'\n\nexport interface CAlertProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * Sets the color context of the component to one of CoreUI’s themed colors.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | string\n   */\n  color: Colors\n  /**\n   * Optionally add a close button to alert and allow it to self dismiss.\n   */\n  dismissible?: boolean\n  /**\n   * Callback fired when the component requests to be closed.\n   */\n  onClose?: () => void\n  /**\n   * Set the alert variant to a solid.\n   */\n  variant?: 'solid' | string\n  /**\n   * Toggle the visibility of component.\n   */\n  visible?: boolean\n}\n\nexport const CAlert = forwardRef<HTMLDivElement, CAlertProps>(\n  (\n    {\n      children,\n      className,\n      color = 'primary',\n      dismissible,\n      variant,\n      visible = true,\n      onClose,\n      ...rest\n    },\n    ref,\n  ) => {\n    const alertRef = useRef<HTMLDivElement>(null)\n    const forkedRef = useForkedRef(ref, alertRef)\n    const [_visible, setVisible] = useState(visible)\n\n    useEffect(() => {\n      setVisible(visible)\n    }, [visible])\n\n    return (\n      <Transition\n        in={_visible}\n        mountOnEnter\n        nodeRef={alertRef}\n        onExit={onClose}\n        timeout={150}\n        unmountOnExit\n      >\n        {(state) => (\n          <div\n            className={classNames(\n              'alert',\n              variant === 'solid' ? `bg-${color} text-white` : `alert-${color}`,\n              {\n                'alert-dismissible fade': dismissible,\n                show: state === 'entered',\n              },\n              className,\n            )}\n            role=\"alert\"\n            {...rest}\n            ref={forkedRef}\n          >\n            {children}\n            {dismissible && <CCloseButton onClick={() => setVisible(false)} />}\n          </div>\n        )}\n      </Transition>\n    )\n  },\n)\n\nCAlert.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  color: colorPropType.isRequired,\n  dismissible: PropTypes.bool,\n  onClose: PropTypes.func,\n  variant: PropTypes.string,\n  visible: PropTypes.bool,\n}\n\nCAlert.displayName = 'CAlert'\n","import React, { forwardRef, FormHTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nexport interface CFormProps extends FormHTMLAttributes<HTMLFormElement> {\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * Mark a form as validated. If you set it `true`, all validation styles will be applied to the forms component.\n   */\n  validated?: boolean\n}\n\nexport const CForm = forwardRef<HTMLFormElement, CFormProps>(\n  ({ children, className, validated, ...rest }, ref) => {\n    return (\n      <form\n        className={classNames({ 'was-validated': validated }, className) || undefined}\n        {...rest}\n        ref={ref}\n      >\n        {children}\n      </form>\n    )\n  },\n)\n\nCForm.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  validated: PropTypes.bool,\n}\n\nCForm.displayName = 'CForm'\n","import React, {\n  ChangeEventHandler,\n  forwardRef,\n  InputHTMLAttributes,\n  useEffect,\n  useState,\n} from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { CFormControlWrapper, CFormControlWrapperProps } from './CFormControlWrapper'\n\nexport interface CFormInputProps\n  extends CFormControlWrapperProps,\n    Omit<InputHTMLAttributes<HTMLInputElement>, 'size'> {\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * Delay onChange event while typing. If set to true onChange event will be delayed 500ms, you can also provide the number of milliseconds you want to delay the onChange event.\n   */\n  delay?: boolean | number\n  /**\n   * Toggle the disabled state for the component.\n   */\n  disabled?: boolean\n  /**\n   * Method called immediately after the `value` prop changes.\n   */\n  onChange?: ChangeEventHandler<HTMLInputElement>\n  /**\n   * Render the component styled as plain text. Removes the default form field styling and preserve the correct margin and padding. Recommend to use only along side `readonly`.\n   */\n  plainText?: boolean\n  /**\n   * Toggle the readonly state for the component.\n   */\n  readOnly?: boolean\n  /**\n   * Size the component small or large.\n   */\n  size?: 'sm' | 'lg'\n  /**\n   * Specifies the type of component.\n   */\n  type?: 'color' | 'file' | 'text' | string\n  /**\n   * The `value` attribute of component.\n   *\n   * @controllable onChange\n   * */\n  value?: string | string[] | number\n}\n\nexport const CFormInput = forwardRef<HTMLInputElement, CFormInputProps>(\n  (\n    {\n      children,\n      className,\n      delay = false,\n      feedback,\n      feedbackInvalid,\n      feedbackValid,\n      floatingClassName,\n      floatingLabel,\n      id,\n      invalid,\n      label,\n      onChange,\n      plainText,\n      size,\n      text,\n      tooltipFeedback,\n      type = 'text',\n      valid,\n      ...rest\n    },\n    ref,\n  ) => {\n    const [value, setValue] = useState<React.ChangeEvent<HTMLInputElement>>()\n\n    useEffect(() => {\n      const timeOutId = setTimeout(\n        () => value && onChange && onChange(value),\n        typeof delay === 'number' ? delay : 500,\n      )\n\n      return () => clearTimeout(timeOutId)\n    }, [value])\n\n    return (\n      <CFormControlWrapper\n        describedby={rest['aria-describedby']}\n        feedback={feedback}\n        feedbackInvalid={feedbackInvalid}\n        feedbackValid={feedbackValid}\n        floatingClassName={floatingClassName}\n        floatingLabel={floatingLabel}\n        id={id}\n        invalid={invalid}\n        label={label}\n        text={text}\n        tooltipFeedback={tooltipFeedback}\n        valid={valid}\n      >\n        <input\n          className={classNames(\n            plainText ? 'form-control-plaintext' : 'form-control',\n            {\n              [`form-control-${size}`]: size,\n              'form-control-color': type === 'color',\n              'is-invalid': invalid,\n              'is-valid': valid,\n            },\n            className,\n          )}\n          id={id}\n          type={type}\n          onChange={(event) => (delay ? setValue(event) : onChange && onChange(event))}\n          {...rest}\n          ref={ref}\n        >\n          {children}\n        </input>\n      </CFormControlWrapper>\n    )\n  },\n)\n\nCFormInput.propTypes = {\n  className: PropTypes.string,\n  id: PropTypes.string,\n  delay: PropTypes.oneOfType([PropTypes.bool, PropTypes.number]),\n  plainText: PropTypes.bool,\n  size: PropTypes.oneOf(['sm', 'lg']),\n  type: PropTypes.oneOfType([PropTypes.oneOf(['color', 'file', 'text']), PropTypes.string]),\n  ...CFormControlWrapper.propTypes,\n}\n\nCFormInput.displayName = 'CFormInput'\n","import React, { ChangeEventHandler, forwardRef, InputHTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { CFormControlWrapper, CFormControlWrapperProps } from './CFormControlWrapper'\n\ntype Option = {\n  disabled?: boolean\n  label?: string\n  value?: string\n}\n\nexport interface CFormSelectProps\n  extends CFormControlWrapperProps,\n    Omit<InputHTMLAttributes<HTMLSelectElement>, 'size'> {\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * Specifies the number of visible options in a drop-down list.\n   */\n  htmlSize?: number\n  /**\n   * Method called immediately after the `value` prop changes.\n   */\n  onChange?: ChangeEventHandler<HTMLSelectElement>\n  /**\n   * Options list of the select component. Available keys: `label`, `value`, `disabled`.\n   * Examples:\n   * - `options={[{ value: 'js', label: 'JavaScript' }, { value: 'html', label: 'HTML', disabled: true }]}`\n   * - `options={['js', 'html']}`\n   */\n  options?: Option[] | string[]\n  /**\n   * Size the component small or large.\n   */\n  size?: 'sm' | 'lg'\n  /**\n   * The `value` attribute of component.\n   *\n   * @controllable onChange\n   */\n  value?: string | string[] | number\n}\n\nexport const CFormSelect = forwardRef<HTMLSelectElement, CFormSelectProps>(\n  (\n    {\n      children,\n      className,\n      feedback,\n      feedbackInvalid,\n      feedbackValid,\n      floatingClassName,\n      floatingLabel,\n      htmlSize,\n      id,\n      invalid,\n      label,\n      options,\n      size,\n      text,\n      tooltipFeedback,\n      valid,\n      ...rest\n    },\n    ref,\n  ) => {\n    return (\n      <CFormControlWrapper\n        describedby={rest['aria-describedby']}\n        feedback={feedback}\n        feedbackInvalid={feedbackInvalid}\n        feedbackValid={feedbackValid}\n        floatingClassName={floatingClassName}\n        floatingLabel={floatingLabel}\n        id={id}\n        invalid={invalid}\n        label={label}\n        text={text}\n        tooltipFeedback={tooltipFeedback}\n        valid={valid}\n      >\n        <select\n          id={id}\n          className={classNames(\n            'form-select',\n            {\n              [`form-select-${size}`]: size,\n              'is-invalid': invalid,\n              'is-valid': valid,\n            },\n            className,\n          )}\n          size={htmlSize}\n          {...rest}\n          ref={ref}\n        >\n          {options\n            ? options.map((option, index) => {\n                return (\n                  <option\n                    {...(typeof option === 'object' &&\n                      option.disabled && { disabled: option.disabled })}\n                    {...(typeof option === 'object' &&\n                      option.value !== undefined && { value: option.value })}\n                    key={index}\n                  >\n                    {typeof option === 'string' ? option : option.label}\n                  </option>\n                )\n              })\n            : children}\n        </select>\n      </CFormControlWrapper>\n    )\n  },\n)\n\nCFormSelect.propTypes = {\n  className: PropTypes.string,\n  htmlSize: PropTypes.number,\n  options: PropTypes.array,\n  ...CFormControlWrapper.propTypes,\n}\n\nCFormSelect.displayName = 'CFormSelect'\n","import React, { ChangeEventHandler, forwardRef, TextareaHTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { CFormControlWrapper, CFormControlWrapperProps } from './CFormControlWrapper'\n\nexport interface CFormTextareaProps\n  extends CFormControlWrapperProps,\n    TextareaHTMLAttributes<HTMLTextAreaElement> {\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * Toggle the disabled state for the component.\n   */\n  disabled?: boolean\n  /**\n   * Method called immediately after the `value` prop changes.\n   */\n  onChange?: ChangeEventHandler<HTMLTextAreaElement>\n  /**\n   * Render the component styled as plain text. Removes the default form field styling and preserve the correct margin and padding. Recommend to use only along side `readonly`.\n   */\n  plainText?: boolean\n  /**\n   * Toggle the readonly state for the component.\n   */\n  readOnly?: boolean\n  /**\n   * The `value` attribute of component.\n   *\n   * @controllable onChange\n   * */\n  value?: string | string[] | number\n}\n\nexport const CFormTextarea = forwardRef<HTMLTextAreaElement, CFormTextareaProps>(\n  (\n    {\n      children,\n      className,\n      feedback,\n      feedbackInvalid,\n      feedbackValid,\n      floatingClassName,\n      floatingLabel,\n      id,\n      invalid,\n      label,\n      plainText,\n      text,\n      tooltipFeedback,\n      valid,\n      ...rest\n    },\n    ref,\n  ) => {\n    return (\n      <CFormControlWrapper\n        describedby={rest['aria-describedby']}\n        feedback={feedback}\n        feedbackInvalid={feedbackInvalid}\n        feedbackValid={feedbackValid}\n        floatingClassName={floatingClassName}\n        floatingLabel={floatingLabel}\n        id={id}\n        invalid={invalid}\n        label={label}\n        text={text}\n        tooltipFeedback={tooltipFeedback}\n        valid={valid}\n      >\n        <textarea\n          className={classNames(\n            plainText ? 'form-control-plaintext' : 'form-control',\n            {\n              'is-invalid': invalid,\n              'is-valid': valid,\n            },\n            className,\n          )}\n          id={id}\n          {...rest}\n          ref={ref}\n        >\n          {children}\n        </textarea>\n      </CFormControlWrapper>\n    )\n  },\n)\n\nCFormTextarea.propTypes = {\n  className: PropTypes.string,\n  id: PropTypes.string,\n  plainText: PropTypes.bool,\n  ...CFormControlWrapper.propTypes,\n}\n\nCFormTextarea.displayName = 'CFormTextarea'\n"],"names":["AddProduct","navigate","useNavigate","manuDesc","setManuDesc","useState","distItemNum","setDistItemNum","name","setName","manuItemNum","setManuItemNum","productType","setProductType","caseDimeTitle","setCaseDimeTitle","caseDimeLength","setCaseDimeLength","caseDimeWidth","setCaseDimeWidth","caseDimeHeight","setCaseDimeHeight","servingSize","setServingSize","shelfLifeManu","setShelfLifeManu","storageMethod","setStorageMethod","tips","setTips","ingreList","setIngreList","servicePerCont","setServicePerCont","serviceSizeQty","setServiceSizeQty","serviceSizeWt","setServiceSizeWt","serviceSizeWtUOM","setServiceSizeWtUOM","shelfLife","setshelfLife","distributerIds","setDistributerIds","allergyFreeIds","setAllergyFreeIds","allergyContainIds","setAllergyContainIds","manuMarkStmt","setManuMarkStmt","caseCount","setCaseCount","masterPack","setMasterPack","grossCaseWeight","setGrossCaseWeight","gtinNum","setGtinNum","upc","setUPC","calories","setCalories","cholestrol","setCholestrol","totalFat","setTotalFat","saturatedFat","setSaturatedFat","transFat","setTransFat","sodium","setSodium","totalCarboht","setTotalCarboht","dietaryFiber","setDietaryFiber","totalSugar","setTotalSugar","addedSugar","setAddedSugar","protein","setProtein","vitD","setVitD","calcuim","setCalcuim","iron","setIron","potassium","setPotassium","casePack","setCasePack","caseBreakable","setCaseBreakable","brokenCase","setBrokenCase","netWeight","setNetWeight","unitMeasure","setUnitMeasure","cnLabel","setCnLabel","isActive","setIsActive","isSubmitting","setIsSubmitting","formData","setFormData","imageType","logo","logoFile","base64Image","clients","setClients","allergies","setAllergies","errors","setErrors","handleInputChange","async","index","event","value","files","target","updatedFormData","file","URL","createObjectURL","reader","FileReader","readAsDataURL","onloadend","result","useEffect","axios","get","headers","Authorization","concat","localStorage","getItem","then","response","formattedOptions","data","map","item","id","label","companyName","console","log","catch","error","calculateCasePack","calculateNetWeight","calculateCaseDime","addProductAction","e","preventDefault","validateForm","trim","Object","keys","length","payload","allergyContains","allergyFree","productImages","image","dataToSend","images","JSON","stringify","post","r","toast","_jsx","className","children","_jsxs","CContainer","CAlert","color","CForm","onSubmit","CRow","CCol","md","lg","xl","CCard","CCardHeader","CCardBody","CMultiSelect","options","onChange","selectedOptions","ids","option","filter","includes","CFormInput","type","invalid","CFormTextarea","CFormSelect","CImage","rounded","thumbnail","width","height","src","CButton","onClick","splice","handleRemoveForm","handleAddForm","locale","onMouseOver","placeholder","xs","disabled","forwardRef","_a","ref","_b","dismissible","variant","_c","visible","onClose","rest","__rest","alertRef","useRef","forkedRef","useForkedRef","_d","_visible","setVisible","React","Transition","in","mountOnEnter","nodeRef","onExit","timeout","unmountOnExit","state","__assign","classNames","show","role","CCloseButton","propTypes","PropTypes","colorPropType","isRequired","displayName","validated","undefined","delay","feedback","feedbackInvalid","feedbackValid","floatingClassName","floatingLabel","plainText","size","text","tooltipFeedback","valid","_e","setValue","timeOutId","setTimeout","clearTimeout","CFormControlWrapper","describedby","htmlSize","key"],"sourceRoot":""}