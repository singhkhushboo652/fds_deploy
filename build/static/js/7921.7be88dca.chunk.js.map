{"version":3,"file":"static/js/7921.7be88dca.chunk.js","mappings":"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","sources":["views/pages/product/EditProduct.js","../node_modules/@coreui/react-pro/src/components/form/CFormTextarea.tsx"],"sourcesContent":["import React, {useEffect, useState} from 'react'\nimport { Link, useLocation, useNavigate, useParams } from 'react-router-dom'\nimport {\n  CButton,\n  CCard,\n  CCardBody,\n  CCol,\n  CContainer,\n  CForm,\n  CFormInput,\n  CImage,\n  CFormSelect,\n  CFormCheck,\n  CInputGroup,\n  CInputGroupText,\n  CRow,\n  CAlert,\n  CCardHeader,\n  CDatePicker,\n  CFormTextarea,\n  CFormLabel\n} from '@coreui/react-pro'\nimport axios from 'axios'\nimport { toast } from 'react-toastify'\nimport Select from 'react-select'; // Import react-select\n\nconst EditProduct = () => {\n  const navigate = useNavigate();\n  const productId = useLocation().state?.productId;\n  const permission = useLocation().state?.permission;\n    const [manuDesc, setManuDesc] = useState(\"\")\n    const [distItemNum, setDistItemNum] = useState(\"\")\n    const [name, setName] = useState(\"\")\n    const [manuItemNum, setManuItemNum] = useState(\"\")\n    const [productType, setProductType] = useState(\"\")\n    const [caseDimeTitle, setCaseDimeTitle] = useState(\"\")\n    const [caseDimeLength, setCaseDimeLength] = useState(0)\n    const [caseDimeWidth, setCaseDimeWidth] = useState(0)\n    const [caseDimeHeight, setCaseDimeHeight] = useState(0)\n    const [servingSize, setServingSize] = useState(\"\")\n    const [shelfLifeManu, setShelfLifeManu] = useState(\"\")\n    const [storageMethod, setStorageMethod] = useState(\"\")\n    const [tips, setTips] = useState(\"\")\n    const [ingreList, setIngreList] = useState(\"\")\n    const [servicePerCont, setServicePerCont] = useState(\"\")\n    const [serviceSizeQty, setServiceSizeQty] = useState(\"\")\n    const [serviceSizeWt, setServiceSizeWt] = useState(\"\")\n    const [shelfLife, setshelfLife] = useState(\"\")\n    \n    const [distributerIds, setDistributerIds] = useState(\"\")\n    const [selectedDistributer, setSelectedDistributer] = useState([]); \n    const [manuMarkStmt, setManuMarkStmt] = useState(\"\")\n    const [caseCount, setCaseCount] = useState(\"\")\n    const [masterPack, setMasterPack] = useState(\"\")\n    const [grossCaseWeight, setGrossCaseWeight] = useState(\"\")\n    const [masterUnitSize, setMasterUnitSize] = useState(\"\")\n    const [gtinNum, setGtinNum] = useState(\"\")\n\n    const [calories, setCalories] = useState(\"\")\n    const [cholestrol, setCholestrol] = useState(\"\")\n    const [totalFat, setTotalFat] = useState(\"\")\n    const [saturatedFat, setSaturatedFat] = useState(\"\")\n    const [transFat, setTransFat] = useState(\"\")\n    const [sodium, setSodium] = useState(\"\")\n    const [totalCarboht, setTotalCarboht] = useState(\"\")\n    const [dietaryFiber, setDietaryFiber] = useState(\"\")\n    const [totalSugar, setTotalSugar] = useState(\"\")\n    const [addedSugar, setAddedSugar] = useState(\"\")\n    const [protein, setProtein] = useState(\"\")\n    const [vitD, setVitD] = useState(\"\")\n    const [calcuim, setCalcuim] = useState(\"\")\n    const [iron, setIron] = useState(\"\")\n    const [potassium, setPotassium] = useState(\"\")\n\n    const [cnLabel, setCnLabel] = useState(\"\")\n    const [isActive, setIsActive] = useState(\"\")\n\n    const [serverImageURLs, setServerImageURLs] = useState([]);\n    const [uploadedImages, setUploadedImages] = useState([]);\n    const [displayImageURLs, setDisplayImageURLs] = useState([]);\n    const [newImagesBase64, setNewImagesBase64] = useState([]);\n    \n    const [formData, setFormData] = useState([{ imageType: '', logo: '', logoFile: null, base64Image: '' }]);\n\n    const [isSubmitting, setIsSubmitting] = useState(false);\n\n    const [clients, setClients] = useState([])\n    const [errors, setErrors] = useState({});\n\n    const handleAddForm = () => {\n      setFormData([...formData, { imageType: '', logo: '', logoFile: null, base64Image: '' }]);\n    };\n  \n    const handleRemoveForm = (index) => {\n      const updatedFormData = [...formData];\n      updatedFormData.splice(index, 1);\n      setFormData(updatedFormData);\n    };\n  \n    const handleInputChange = async (index, event) => {\n      const { name, value, files } = event.target;\n      const updatedFormData = [...formData];\n  \n      if (files) {\n        const file = files[0];\n        updatedFormData[index]['logoFile'] = URL.createObjectURL(file);\n  \n        // Convert the image file to a base64 encoded string\n        const reader = new FileReader();\n        reader.readAsDataURL(file);\n        reader.onloadend = () => {\n          updatedFormData[index]['base64Image'] = reader.result;\n          setFormData(updatedFormData);\n        };\n      } else {\n        updatedFormData[index][name] = value;\n        setFormData(updatedFormData);\n      }\n    };\n\n    useEffect(() => {  \n    axios.get('client/findAll/distributer', {headers: { Authorization: `Bearer ${localStorage.getItem('token')}` }}).then(response => {\n      let dataFromDatabase = response.data.data;\n      const formattedOptions = dataFromDatabase.map(item => ({\n        value: item.id,\n        label: item.companyName\n      }));\n      setClients(formattedOptions);  \n    })\n    .catch(error => console.error('error fetching clients', error));\n  }, [])\n\n    useEffect(() => {\n      axios.get('product/'+productId, {headers: { Authorization: `Bearer ${localStorage.getItem('token')}` }})\n          .then((response) => {\n            if(response.data){\n              \n              let productDetail = response.data.data;\n              setName(productDetail.name);\n              setProductType(productDetail.productType);\n              setManuItemNum (productDetail.manuItemNum);\n              setManuDesc(productDetail.manuDesc);\n              setDistItemNum(productDetail.distItemNum);\n              setManuMarkStmt(productDetail.manuMarkStmt);\n              setSelectedDistributer(productDetail.distributers.map(br => ({ value: br.id, label: br.companyName }))); \n              setGtinNum(productDetail.gtinNum);\n              setCaseCount(productDetail.caseCount);\n              setMasterPack(productDetail.masterPack);\n              setGrossCaseWeight(productDetail.grossCaseWeight);\n              setMasterUnitSize(productDetail.masterUnitSize);\n              setCaseDimeTitle(productDetail.caseDimeTitle);\n              setCaseDimeLength(productDetail.caseDimeLength);\n              setCaseDimeWidth(productDetail.caseDimeWidth);\n              setCaseDimeHeight(productDetail.caseDimeHeight);\n              setServingSize(productDetail.servingSize);\n              setShelfLifeManu(productDetail.shelfLifeManu);\n              setStorageMethod(productDetail.storageMethod);\n              setshelfLife(productDetail.shelfLife);\n              setIngreList(productDetail.ingreList);\n              setTips(productDetail.tips);\n              setServicePerCont(productDetail.servicePerCont);\n              setServiceSizeQty(productDetail.serviceSizeQty);\n              setServiceSizeWt(productDetail.serviceSizeWt);\n              setCalories(productDetail.calories);\n              setCholestrol(productDetail.cholestrol);\n              setSodium(productDetail.sodium);\n              setTotalFat(productDetail.totalFat);\n              setSaturatedFat(productDetail.saturatedFat);\n              setTransFat(productDetail.transFat);\n              setTotalSugar(productDetail.totalSugar);\n              setAddedSugar(productDetail.addedSugar);\n              setTotalCarboht(productDetail.totalCarboht);\n              setDietaryFiber(productDetail.dietaryFiber);\n              setProtein(productDetail.protein);\n              setVitD(productDetail.vitD);\n              setCalcuim(productDetail.calcuim);\n              setIron(productDetail.iron);\n              setPotassium(productDetail.potassium);\n              setCnLabel(productDetail.cnLabel);\n              setIsActive(productDetail.isActive);\n              let images = productDetail.images;\n              let imageData = []\n              images.map(img => {\n                let imgDetail = { imageType: img.imageType, logo: img.imagePath, logoFile: process.env.REACT_APP_API_URL+img.imagePath, base64Image: '', id: img.id }\n                imageData.push(imgDetail);\n              });\n              setFormData(imageData); \n            }\n          })\n  }, [])\n\n  const validateForm = () => {\n    const errors = {};\n    if (!manuItemNum.trim()) {\n      errors.manuItemNum = 'First Name is required';\n    }\n    if (!manuDesc.trim()) {\n      errors.manuDesc = 'Last Name is required';\n    }\n    if (!name.trim()) {\n      errors.name = 'Email is required';\n    }\n    if (!manuMarkStmt.trim()) {\n      errors.manuMarkStmt = 'username is required';\n    }\n    if (!productType.trim()) {\n      errors.productType = 'Work address is required';\n    }\n    if (!caseCount.trim()) {\n      errors.caseCount = 'Work address is required';\n    }\n    if (!masterPack.trim()) {\n      errors.masterPack = 'State is required';\n    }\n    if (!grossCaseWeight.trim()) {\n      errors.grossCaseWeight = 'City is required';\n    }\n    if (!masterUnitSize.trim()) {\n      errors.masterUnitSize = 'Zip code is required';\n    }\n    if (!caseDimeTitle.trim()) {\n      errors.caseDimeTitle = 'Zip code is required';\n    }\n    if (!servingSize.trim()) {\n      errors.servingSize = 'Zip code is required';\n    }\n    if (!shelfLife.trim()) {\n      errors.shelfLife = 'Zip code is required';\n    }\n    if (!shelfLifeManu.trim()) {\n      errors.shelfLifeManu = 'Zip code is required';\n    }\n    if (!storageMethod.trim()) {\n      errors.storageMethod = 'Zip code is required';\n    }\n    if (!ingreList.trim()) {\n      errors.ingreList = 'Zip code is required';\n    }\n    if (!tips.trim()) {\n      errors.tips = 'Zip code is required';\n    }\n    if (!servicePerCont.trim()) {\n      errors.servicePerCont = 'Zip code is required';\n    }\n    if (!serviceSizeWt.trim()) {\n      errors.serviceSizeWt = 'Zip code is required';\n    }\n    if (!serviceSizeQty.trim()) {\n      errors.serviceSizeQty = 'Zip code is required';\n    }\n    if (!calories.trim()) {\n      errors.calories = 'Zip code is required';\n    }\n    if (!cholestrol.trim()) {\n      errors.cholestrol = 'Zip code is required';\n    }\n    if (!sodium.trim()) {\n      errors.sodium = 'Zip code is required';\n    }\n    if (!totalFat.trim()) {\n      errors.totalFat = 'Zip code is required';\n    }\n    if (!saturatedFat.trim()) {\n      errors.saturatedFat = 'Zip code is required';\n    }\n    if (!transFat.trim()) {\n      errors.transFat = 'Zip code is required';\n    }\n    if (!totalCarboht.trim()) {\n      errors.totalCarboht = 'Zip code is required';\n    }\n    if (!dietaryFiber.trim()) {\n      errors.dietaryFiber = 'Zip code is required';\n    }\n    if (!totalSugar.trim()) {\n      errors.totalSugar = 'Zip code is required';\n    }\n    if (!addedSugar.trim()) {\n      errors.addedSugar = 'Zip code is required';\n    }\n    if (!protein.trim()) {\n      errors.protein = 'Zip code is required';\n    }\n    if (!vitD.trim()) {\n      errors.vitD = 'Zip code is required';\n    }\n    if (!calcuim.trim()) {\n      errors.calcuim = 'Zip code is required';\n    }\n    if (!iron.trim()) {\n      errors.iron = 'Zip code is required';\n    }\n    if (!potassium.trim()) {\n      errors.potassium = 'Zip code is required';\n    }\n    \n    console.log(errors);\n    // Add validations for other fields\n\n    setErrors(errors);\n    return Object.keys(errors).length === 0;\n  };\n \n \n    const editProductAction = async (e) => {\n        e.preventDefault();\n        setIsSubmitting(true)\n        const productImages = formData.map(data => ({\n          imageType: data.imageType,\n          image: data.base64Image || data.logo,\n          id: data.id || null\n        }));\n        let payload = {\n          manuDesc: manuDesc,\n            name: name,\n            distItemNum:distItemNum,\n            manuItemNum:manuItemNum,\n            manuMarkStmt:manuMarkStmt,\n            distributerIds: selectedDistributer.map(client => client.value),\n            productType: productType,\n            caseDimeTitle: caseDimeTitle,\n            caseDimeLength: caseDimeLength,\n            caseDimeWidth: caseDimeWidth,\n            caseDimeHeight: caseDimeHeight,\n            servingSize: servingSize,\n            shelfLifeManu: shelfLifeManu,\n            storageMethod: storageMethod,\n            tips: tips,\n            ingreList: ingreList,\n            servicePerCont: servicePerCont,\n            serviceSizeQty: serviceSizeQty,\n            serviceSizeWt: serviceSizeWt,\n            shelfLife: shelfLife,\n            masterPack: masterPack,\n            grossCaseWeight: grossCaseWeight,\n            masterUnitSize: masterUnitSize,\n            gtinNum: gtinNum,\n            caseCount: caseCount,\n            calories: calories,\n            cholestrol: cholestrol,\n            totalFat: totalFat,\n            saturatedFat: saturatedFat,\n            transFat: transFat,\n            sodium: sodium,\n            totalCarboht: totalCarboht,\n            dietaryFiber: dietaryFiber,\n            totalSugar: totalSugar,\n            addedSugar: addedSugar,\n            protein: protein,\n            vitD: vitD,\n            calcuim: calcuim,\n            iron: iron,\n            potassium: potassium,\n            cnLabel: cnLabel,\n            isActive: isActive,\n            images: productImages\n        }\n        axios.patch('/product/update/'+productId, payload, {headers: { Authorization: `Bearer ${localStorage.getItem('token')}` }} )\n        .then((r) => {\n          toast.success(r.data.message);     \n          setIsSubmitting(false)\n\n        })\n        .catch((e) => {\n            setIsSubmitting(false)\n            console.log(e);\n        });\n    }\n\n  return (\n    <div className=\"bg-body-tertiary min-vh-75 d-flex flex-row align-items-center\">\n      <CContainer>\n              <CForm className=\"row g-3\" onSubmit={(e)=>editProductAction(e)}>\n        <CRow className=\"justify-content-center\">\n          <CCol md={9} lg={7} xl={12}>\n            <CCard className=\"mb-4\">\n              <CCardHeader>MFG Product Information</CCardHeader>\n              <CCardBody className=\"p-4\">\n                <CRow className='mb-4'>\n                <CCol md={6}>\n                  <CFormLabel htmlFor='Distributor'>Distributor</CFormLabel>\n                <Select\n                    label=\"Distributor\"\n                    options={clients}\n                    isMulti\n                    value={selectedDistributer}\n                    onChange={(selectedOptions) => setSelectedDistributer(selectedOptions)}\n                    placeholder=\"Select distributor...\"\n                    className=\"basic-multi-select\"\n                    classNamePrefix=\"select\"\n                    isClearable={false}\n                    closeMenuOnSelect={false}\n                    styles={{\n                      control: (provided) => ({\n                        ...provided,\n                        borderRadius: 0,\n                        borderColor: '#ced4da',\n                      }),\n                      menu: (provided) => ({\n                        ...provided,\n                        zIndex: 9999,\n                      }),\n                    }}\n                  />\n                </CCol>\n                  <CCol md={6}>\n                    <CFormInput type=\"number\" id=\"manuItemNum\" label=\"Manufacturer Item Number\" onChange={(e)=>{setManuItemNum(e.target.value)}} value={manuItemNum} name='manuItemNum' />\n                  </CCol>\n                </CRow>\n\n                <CRow className='mb-4'>\n                  {/* <CCol md={6}>\n                    <CFormInput type=\"text\" id=\"distItemNum\" label=\"Distributor Item Number\" onChange={(e)=>{setDistItemNum(e.target.value)}} value={distItemNum} name='distItemNum' />\n                  </CCol> */}\n                    <CCol md={6}>\n                      <CFormInput type=\"number\" id=\"gtinNum\" label=\"GTIN Number\" onChange={(e)=>{setGtinNum(e.target.value)}} value={gtinNum} name='gtinNum' />\n                    </CCol>\n                </CRow>\n                <CRow className='mb-4'>\n                <CCol md={12}>\n                  <CFormInput type=\"text\" id=\"name\" label=\"Name\" onChange={(e)=>{setName(e.target.value)}} value={name} name='name' />\n                </CCol>\n                </CRow>\n                <CRow className='mb-4'>\n                  <CCol md={12}>\n                    <CFormTextarea id=\"manuDesc\" label=\"Product Description\" onChange={(e)=>{setManuDesc(e.target.value)}} value={manuDesc} name='manuDesc'></CFormTextarea>\n                  </CCol>\n                </CRow>\n                <CRow className='mb-4'>\n                  <CCol md={12}>\n                    <CFormTextarea id=\"manuMarkStmt\" label=\"Product Marketing Statement\" onChange={(e)=>{setManuMarkStmt(e.target.value)}} value={manuMarkStmt} name='manuMarkStmt'></CFormTextarea>\n                  </CCol>\n                </CRow>\n                <CRow className='mb-4'>\n                <CCol md={6}>\n                  <CFormSelect id=\"productType\" label=\"Product Type\" name='productType' onChange={(e)=>{setProductType(e.target.value)}} value={productType} >\n                    <option>Choose...</option>\n                    <option value='Paper' >Paper</option>\n                    <option value='Disposables' >Disposables</option>\n                    <option value='Beverages' >Beverages</option>\n                    <option value='FoodFrozen' >Food-Frozen</option>\n                    <option value='FoodFresh' >Food-Fresh</option>\n                    <option value='DryFoods' >Dry Foods</option>\n                    <option value='SmallWares' >Small Wares</option>\n                  </CFormSelect>\n                </CCol>\n                </CRow>\n                </CCardBody>\n                </CCard>\n                </CCol>\n                </CRow>\n                <CRow>\n                  <CCol md={9} lg={7} xl={12}>                    \n                    <CCard className=\"mb-4\">\n                      <CCardHeader>Product Images</CCardHeader>\n                      <CCardBody className=\"p-4\">\n                      {formData.map((data, index) => (\n                        <CRow key={index} className=\"mb-3\">\n                          <CCol>\n                            <CFormSelect\n                              id={`imageType${index}`}\n                              name=\"imageType\"\n                              value={data.imageType}\n                              onChange={(e) => handleInputChange(index, e)}\n                            >\n                              <option value=\"\">...Choose</option>\n                              <option value=\"close\">Closed Case</option>\n                              <option value=\"open\">Open Case</option>\n                              <option value=\"innerPack\">Inner Pack</option>\n                              <option value=\"raw\">Raw/Uncooked</option>\n                              <option value=\"plated\">Plated</option>\n                              <option value=\"styled\">Styled</option>\n                            </CFormSelect>\n                          </CCol>\n                          <CCol>\n                            <CFormInput\n                              type=\"file\"\n                              id={`productImage${index}`}\n                              name=\"logo\"\n                              onChange={(e) => handleInputChange(index, e)}\n                            />\n                            {data.logoFile && <CImage rounded thumbnail width={200} height={200} src={data.logoFile} />}\n                          </CCol>\n                          <CCol>\n                            <CButton color=\"danger\" onClick={() => handleRemoveForm(index)}>\n                              Remove\n                            </CButton>\n                          </CCol>\n                        </CRow>\n                      ))}\n                      <CButton type=\"button\" onClick={handleAddForm} className='btn btn-primary'>\n                        Add Image\n                      </CButton>\n                      </CCardBody>\n                    </CCard>\n                  </CCol>\n                </CRow>\n                <CRow>\n                  <CCol md={9} lg={7} xl={12}>\n                    \n                    <CCard className=\"mb-4\">\n                    <CCardHeader>Product Attributes</CCardHeader>\n                  <CCardBody className=\"p-4\">\n                    \n                  <CRow className='mb-4'>\n                    <CCol>\n                    <CFormInput type='number' locale=\"en-US\" id=\"caseCount\" label=\"Case Count\" onChange={(e)=>{setCaseCount(e.target.value)}} value={caseCount} name='caseCount' />\n                    </CCol>\n                    <CCol>\n                    <CFormInput type=\"number\" id=\"masterPack\" label=\"Master Pack\" onChange={(e)=>{setMasterPack(e.target.value)}} value={masterPack} name='masterPack' />\n                    </CCol>\n                    <CCol>\n                    <CFormInput type=\"number\" id=\"grossCaseWeight\" label=\"Gross Case Weight\" onChange={(e)=>{setGrossCaseWeight(e.target.value)}} value={grossCaseWeight} name='grossCaseWeight' />\n                    </CCol>\n                    <CCol>\n                    <CFormInput type=\"number\" id=\"masterUnitSize\" label=\"Master Unit Size\" onChange={(e)=>{setMasterUnitSize(e.target.value)}} value={masterUnitSize} name='masterUnitSize' />\n                    </CCol>\n                  </CRow>\n                  <CRow className='mb-4'>\n                      <CCol>\n                        <CFormInput type='text' id=\"caseDimeTitle\" name=\"caseDimeTitle\" label=\"Case Dimensions\" placeholder=\"title\" onChange={(e)=>{setCaseDimeTitle(e.target.value)}} value={caseDimeTitle}  invalid={!!errors.caseDimeTitle}/>\n                      </CCol>\n                      <CCol>\n                      <CFormInput type=\"number\" id=\"caseDimeLength\" label=\"Length\" onChange={(e)=>{setCaseDimeLength(e.target.value)}} value={caseDimeLength} name='masterUnitSize' invalid={!!errors.caseDimeLength} />\n                      </CCol>\n                      <CCol>\n                      <CFormInput type=\"number\" id=\"caseDimeWidth\" label=\"Width\" onChange={(e)=>{setCaseDimeWidth(e.target.value)}} value={caseDimeWidth} name='masterUnitSize' invalid={!!errors.caseDimeWidth} />\n                      </CCol>\n                      <CCol>\n                      <CFormInput type=\"number\" id=\"caseDimeHeight\" label=\"Height\" onChange={(e)=>{setCaseDimeHeight(e.target.value)}} value={caseDimeHeight} name='masterUnitSize' invalid={!!errors.caseDimeHeight} />\n                      </CCol>\n                    </CRow>\n                    <CRow className='mb-4'>\n                    <CCol>\n                      <CFormInput type='text' id=\"shelfLifeManu\" label=\"Shelf Life from Manufacturer\" name=\"shelfLifeManu\" onChange={(e)=>{setShelfLifeManu(e.target.value)}} value={shelfLifeManu} />\n                    </CCol>\n                    <CCol>\n                      <CFormSelect id=\"storageMethod\" label=\"Storage Method\" name='storageMethod' onChange={(e)=>{setStorageMethod(e.target.value)}} value={storageMethod} >\n                        <option>Choose...</option>\n                        <option value='Dry' >Dry</option>\n                        <option value='Refrigerated' >Refrigerated</option>\n                        <option value='Frozen' >Frozen</option>\n                      </CFormSelect>\n                    </CCol>\n                    <CCol>\n                      <CFormSelect id=\"shelfLife\" label=\"Shelf Life\" name='shelfLife' onChange={(e)=>{setshelfLife(e.target.value)}} value={shelfLife} >\n                        <option>Choose...</option>\n                        <option value='UseByDate' >Use By Date</option>\n                        <option value='days365' >365 days</option>\n                        <option value='days365Plus' >365 days plus</option>\n                      </CFormSelect>\n                    </CCol>\n                    </CRow>\n                    <CRow className='mb-4'>\n                  <CCol md={12}>\n                    <CFormTextarea id=\"ingreList\" label=\"List of all Ingredients\" onChange={(e)=>{setIngreList(e.target.value)}} value={ingreList} name='ingreList'></CFormTextarea>\n                  </CCol>\n                </CRow>\n                <CRow className='mb-4'>\n                  <CCol md={12}>\n                    <CFormTextarea id=\"tips\" label=\"Tips & Handling\" onChange={(e)=>{setTips(e.target.value)}} value={tips} name='tips'></CFormTextarea>\n                  </CCol>\n                </CRow>\n                  </CCardBody>\n                </CCard>\n                  </CCol>\n            </CRow>\n            <CRow>\n              <CCard>\n                <CCardHeader>Nutritional Facts</CCardHeader>\n                <CCardBody className=\"p-4\">\n                <CRow>\n                    <CCol>\n                    <CFormInput type=\"number\" id=\"calories\" label=\"Calories\" onChange={(e)=>{setCalories(e.target.value)}} value={calories} name='calories' />\n                    </CCol>\n                    <CCol>\n                    <CFormInput type=\"number\" id=\"cholestrol\" label=\"Cholesterol (mg)\" onChange={(e)=>{setCholestrol(e.target.value)}} value={cholestrol} name='cholestrol' />\n                    </CCol>\n                    <CCol>\n                    <CFormInput type=\"number\" id=\"sodium\" label=\"Sodium (mg)\" onChange={(e)=>{setSodium(e.target.value)}} value={sodium} name='sodium' />\n                    </CCol>\n                  </CRow>\n                  <CRow>\n                    <CCol>\n                    <CFormInput type=\"number\" id=\"totalFat\" label=\"Total Fat (g)\" onChange={(e)=>{setTotalFat(e.target.value)}} value={totalFat} name='totalFat' />\n                    </CCol>\n                    <CCol>\n                    <CFormInput type=\"number\" id=\"saturatedFat\" label=\"Saturated Fat (g)\" onChange={(e)=>{setSaturatedFat(e.target.value)}} value={saturatedFat} name='saturatedFat' />\n                    </CCol>\n                    <CCol>\n                    <CFormInput type=\"number\" id=\"transFat\" label=\"Trans Fat (g)\" onChange={(e)=>{setTransFat(e.target.value)}} value={transFat} name='transFat' />\n                    </CCol>\n                  </CRow>\n                  <CRow>\n                    <CCol>\n                    <CFormInput type=\"number\" id=\"totalCarboht\" label=\"Total Carbohydrate (g)\" onChange={(e)=>{setTotalCarboht(e.target.value)}} value={totalCarboht} name='totalCarboht' />\n                    </CCol>\n                    <CCol>\n                    <CFormInput type=\"number\" id=\"totalSugar\" label=\"Total Sugars (g)\" onChange={(e)=>{setTotalSugar(e.target.value)}} value={totalSugar} name='totalSugar' />\n                    </CCol>\n                    <CCol>\n                    <CFormInput type=\"number\" id=\"addedSugar\" label=\"Added Sugars (g)\" onChange={(e)=>{setAddedSugar(e.target.value)}} value={addedSugar} name='addedSugar' />\n                    </CCol>\n                  </CRow>\n                  <CRow>\n                    <CCol>\n                    <CFormInput type=\"number\" id=\"protein\" label=\"Protein (g)\" onChange={(e)=>{setProtein(e.target.value)}} value={protein} name='protein' />\n                    </CCol>\n                    <CCol>\n                    <CFormInput type=\"number\" id=\"dietaryFiber\" label=\"Dietary Fiber (g)\" onChange={(e)=>{setDietaryFiber(e.target.value)}} value={dietaryFiber} name='dietaryFiber' />\n                    </CCol>\n                    <CCol>\n                    <CFormInput type=\"number\" id=\"vitD\" label=\" Vitamin D (mcg)\" onChange={(e)=>{setVitD(e.target.value)}} value={vitD} name='vitD' />\n                    </CCol>\n                  </CRow>\n                  <CRow>\n                    <CCol>\n                    <CFormInput type=\"number\" id=\"calcuim\" label=\"Calcium (mg)\" onChange={(e)=>{setCalcuim(e.target.value)}} value={calcuim} name='calcuim' />\n                    </CCol>\n                    <CCol>\n                    <CFormInput type=\"number\" id=\"iron\" label=\"Iron (mg)\" onChange={(e)=>{setIron(e.target.value)}} value={iron} name='iron' />\n                    </CCol>\n                    <CCol>\n                    <CFormInput type=\"number\" id=\"potassium\" label=\"Potassium (mg)\" onChange={(e)=>{setPotassium(e.target.value)}} value={potassium} name='potassium' />\n                    </CCol>\n                  </CRow>\n                <CRow>\n                    <CCol>\n                      <CFormInput type='number' id=\"servingSize\" label=\"Serving Size\" name=\"servingSize\"  onChange={(e)=>{setServingSize(e.target.value)}} value={servingSize} />\n                    </CCol>\n                    <CCol>\n                    <CFormInput type=\"number\" id=\"servicePerCont\" label=\"Servings per Container\" onChange={(e)=>{setServicePerCont(e.target.value)}} value={servicePerCont} name='servicePerCont' />\n                    </CCol>\n                    <CCol>\n                    <CFormInput type=\"number\" id=\"serviceSizeQty\" label=\"Serving Size Qty\" onChange={(e)=>{setServiceSizeQty(e.target.value)}} value={serviceSizeQty} name='serviceSizeQty' />\n                    </CCol>\n                    <CCol>\n                    <CFormInput type=\"number\" id=\"serviceSizeWt\" label=\"Serving Size Weight (g)\" onChange={(e)=>{setServiceSizeWt(e.target.value)}} value={serviceSizeWt} name='serviceSizeWt' />\n                    </CCol>\n                  </CRow>\n                    <CRow className='mb-4'>\n                      <CCol>\n                        <CFormSelect id=\"cnLabel\" label=\"C N Label\" name='cnLabel' onChange={(e)=>{setCnLabel(e.target.value)}} value={cnLabel} >\n                          <option value='Yes' >Yes</option>\n                          <option value='No' >No</option>\n                        </CFormSelect>\n                      </CCol>\n                    </CRow>\n              </CCardBody>\n              </CCard>\n              </CRow>\n              <CRow>\n                <CCard className=\"mb-4\">\n                  <CCardHeader>Visibility</CCardHeader>\n                  <CCardBody className=\"p-4\">\n                    <CRow className='mb-4'>\n                      <CCol>\n                        <CFormSelect id=\"isActive\" label=\"Published Product\" name='isActive' onChange={(e)=>{setIsActive(e.target.value)}} value={isActive} >\n                          <option value='true' >Published</option>\n                          <option value='false' >Unpublished</option>\n                        </CFormSelect>\n                      </CCol>\n                    </CRow>\n                  </CCardBody>\n                </CCard>\n              </CRow>\n              {permission?\n              <CRow className='p-4'>\n              <CCol xs={12}>\n                  <CButton color=\"primary\" type=\"submit\" disabled={isSubmitting} className='float-end'>Update Product</CButton>\n                </CCol>\n              </CRow>:''}\n              </CForm>\n      </CContainer>\n    </div>\n  )\n}\n\nexport default EditProduct\n","import React, { ChangeEventHandler, forwardRef, TextareaHTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { CFormControlWrapper, CFormControlWrapperProps } from './CFormControlWrapper'\n\nexport interface CFormTextareaProps\n  extends CFormControlWrapperProps,\n    TextareaHTMLAttributes<HTMLTextAreaElement> {\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * Toggle the disabled state for the component.\n   */\n  disabled?: boolean\n  /**\n   * Method called immediately after the `value` prop changes.\n   */\n  onChange?: ChangeEventHandler<HTMLTextAreaElement>\n  /**\n   * Render the component styled as plain text. Removes the default form field styling and preserve the correct margin and padding. Recommend to use only along side `readonly`.\n   */\n  plainText?: boolean\n  /**\n   * Toggle the readonly state for the component.\n   */\n  readOnly?: boolean\n  /**\n   * The `value` attribute of component.\n   *\n   * @controllable onChange\n   * */\n  value?: string | string[] | number\n}\n\nexport const CFormTextarea = forwardRef<HTMLTextAreaElement, CFormTextareaProps>(\n  (\n    {\n      children,\n      className,\n      feedback,\n      feedbackInvalid,\n      feedbackValid,\n      floatingClassName,\n      floatingLabel,\n      id,\n      invalid,\n      label,\n      plainText,\n      text,\n      tooltipFeedback,\n      valid,\n      ...rest\n    },\n    ref,\n  ) => {\n    return (\n      <CFormControlWrapper\n        describedby={rest['aria-describedby']}\n        feedback={feedback}\n        feedbackInvalid={feedbackInvalid}\n        feedbackValid={feedbackValid}\n        floatingClassName={floatingClassName}\n        floatingLabel={floatingLabel}\n        id={id}\n        invalid={invalid}\n        label={label}\n        text={text}\n        tooltipFeedback={tooltipFeedback}\n        valid={valid}\n      >\n        <textarea\n          className={classNames(\n            plainText ? 'form-control-plaintext' : 'form-control',\n            {\n              'is-invalid': invalid,\n              'is-valid': valid,\n            },\n            className,\n          )}\n          id={id}\n          {...rest}\n          ref={ref}\n        >\n          {children}\n        </textarea>\n      </CFormControlWrapper>\n    )\n  },\n)\n\nCFormTextarea.propTypes = {\n  className: PropTypes.string,\n  id: PropTypes.string,\n  plainText: PropTypes.bool,\n  ...CFormControlWrapper.propTypes,\n}\n\nCFormTextarea.displayName = 'CFormTextarea'\n"],"names":["EditProduct","_useLocation$state","_useLocation$state2","useNavigate","productId","useLocation","state","permission","manuDesc","setManuDesc","useState","distItemNum","setDistItemNum","name","setName","manuItemNum","setManuItemNum","productType","setProductType","caseDimeTitle","setCaseDimeTitle","caseDimeLength","setCaseDimeLength","caseDimeWidth","setCaseDimeWidth","caseDimeHeight","setCaseDimeHeight","servingSize","setServingSize","shelfLifeManu","setShelfLifeManu","storageMethod","setStorageMethod","tips","setTips","ingreList","setIngreList","servicePerCont","setServicePerCont","serviceSizeQty","setServiceSizeQty","serviceSizeWt","setServiceSizeWt","shelfLife","setshelfLife","distributerIds","setDistributerIds","selectedDistributer","setSelectedDistributer","manuMarkStmt","setManuMarkStmt","caseCount","setCaseCount","masterPack","setMasterPack","grossCaseWeight","setGrossCaseWeight","masterUnitSize","setMasterUnitSize","gtinNum","setGtinNum","calories","setCalories","cholestrol","setCholestrol","totalFat","setTotalFat","saturatedFat","setSaturatedFat","transFat","setTransFat","sodium","setSodium","totalCarboht","setTotalCarboht","dietaryFiber","setDietaryFiber","totalSugar","setTotalSugar","addedSugar","setAddedSugar","protein","setProtein","vitD","setVitD","calcuim","setCalcuim","iron","setIron","potassium","setPotassium","cnLabel","setCnLabel","isActive","setIsActive","serverImageURLs","setServerImageURLs","uploadedImages","setUploadedImages","displayImageURLs","setDisplayImageURLs","newImagesBase64","setNewImagesBase64","formData","setFormData","imageType","logo","logoFile","base64Image","isSubmitting","setIsSubmitting","clients","setClients","errors","setErrors","handleInputChange","async","index","event","value","files","target","updatedFormData","file","URL","createObjectURL","reader","FileReader","readAsDataURL","onloadend","result","useEffect","axios","get","headers","Authorization","concat","localStorage","getItem","then","response","formattedOptions","data","map","item","id","label","companyName","catch","error","console","productDetail","distributers","br","images","imageData","img","imgDetail","imagePath","process","push","_jsx","className","children","CContainer","_jsxs","CForm","onSubmit","e","preventDefault","productImages","image","payload","client","patch","r","toast","success","message","log","editProductAction","CRow","CCol","md","lg","xl","CCard","CCardHeader","CCardBody","CFormLabel","htmlFor","Select","options","isMulti","onChange","selectedOptions","placeholder","classNamePrefix","isClearable","closeMenuOnSelect","styles","control","provided","borderRadius","borderColor","menu","zIndex","CFormInput","type","CFormTextarea","CFormSelect","CImage","rounded","thumbnail","width","height","src","CButton","color","onClick","splice","handleRemoveForm","handleAddForm","locale","invalid","xs","disabled","forwardRef","_a","ref","feedback","feedbackInvalid","feedbackValid","floatingClassName","floatingLabel","plainText","text","tooltipFeedback","valid","rest","__rest","React","CFormControlWrapper","describedby","__assign","classNames","propTypes","PropTypes","displayName"],"sourceRoot":""}