{"version":3,"file":"static/js/532.9c302e56.chunk.js","mappings":"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","sources":["views/theme/typography/Typography.js","../node_modules/@coreui/react-pro/src/components/card/CCard.tsx","../node_modules/@coreui/react-pro/src/components/card/CCardBody.tsx","../node_modules/@coreui/react-pro/src/components/card/CCardHeader.tsx"],"sourcesContent":["import React from 'react'\nimport { CCard, CCardHeader, CCardBody } from '@coreui/react-pro'\n\nconst Typography = () => {\n  return (\n    <>\n      <CCard className=\"mb-4\">\n        <CCardHeader>Headings</CCardHeader>\n        <CCardBody>\n          <p>\n            Documentation and examples for Bootstrap typography, including global settings,\n            headings, body text, lists, and more.\n          </p>\n          <table className=\"table\">\n            <thead>\n              <tr>\n                <th>Heading</th>\n                <th>Example</th>\n              </tr>\n            </thead>\n            <tbody>\n              <tr>\n                <td>\n                  <p>\n                    <code className=\"highlighter-rouge\">&lt;h1&gt;&lt;/h1&gt;</code>\n                  </p>\n                </td>\n                <td>\n                  <span className=\"h1\">h1. Bootstrap heading</span>\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  <p>\n                    <code className=\"highlighter-rouge\">&lt;h2&gt;&lt;/h2&gt;</code>\n                  </p>\n                </td>\n                <td>\n                  <span className=\"h2\">h2. Bootstrap heading</span>\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  <p>\n                    <code className=\"highlighter-rouge\">&lt;h3&gt;&lt;/h3&gt;</code>\n                  </p>\n                </td>\n                <td>\n                  <span className=\"h3\">h3. Bootstrap heading</span>\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  <p>\n                    <code className=\"highlighter-rouge\">&lt;h4&gt;&lt;/h4&gt;</code>\n                  </p>\n                </td>\n                <td>\n                  <span className=\"h4\">h4. Bootstrap heading</span>\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  <p>\n                    <code className=\"highlighter-rouge\">&lt;h5&gt;&lt;/h5&gt;</code>\n                  </p>\n                </td>\n                <td>\n                  <span className=\"h5\">h5. Bootstrap heading</span>\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  <p>\n                    <code className=\"highlighter-rouge\">&lt;h6&gt;&lt;/h6&gt;</code>\n                  </p>\n                </td>\n                <td>\n                  <span className=\"h6\">h6. Bootstrap heading</span>\n                </td>\n              </tr>\n            </tbody>\n          </table>\n        </CCardBody>\n      </CCard>\n      <CCard className=\"mb-4\">\n        <CCardHeader>Headings</CCardHeader>\n        <CCardBody>\n          <p>\n            <code className=\"highlighter-rouge\">.h1</code> through\n            <code className=\"highlighter-rouge\">.h6</code>\n            classes are also available, for when you want to match the font styling of a heading but\n            cannot use the associated HTML element.\n          </p>\n          <div className=\"bd-example\">\n            <p className=\"h1\">h1. Bootstrap heading</p>\n            <p className=\"h2\">h2. Bootstrap heading</p>\n            <p className=\"h3\">h3. Bootstrap heading</p>\n            <p className=\"h4\">h4. Bootstrap heading</p>\n            <p className=\"h5\">h5. Bootstrap heading</p>\n            <p className=\"h6\">h6. Bootstrap heading</p>\n          </div>\n        </CCardBody>\n      </CCard>\n      <CCard className=\"mb-4\">\n        <div className=\"card-header\">Display headings</div>\n        <div className=\"card-body\">\n          <p>\n            Traditional heading elements are designed to work best in the meat of your page content.\n            When you need a heading to stand out, consider using a <strong>display heading</strong>\n            —a larger, slightly more opinionated heading style.\n          </p>\n          <div className=\"bd-example bd-example-type\">\n            <table className=\"table\">\n              <tbody>\n                <tr>\n                  <td>\n                    <span className=\"display-1\">Display 1</span>\n                  </td>\n                </tr>\n                <tr>\n                  <td>\n                    <span className=\"display-2\">Display 2</span>\n                  </td>\n                </tr>\n                <tr>\n                  <td>\n                    <span className=\"display-3\">Display 3</span>\n                  </td>\n                </tr>\n                <tr>\n                  <td>\n                    <span className=\"display-4\">Display 4</span>\n                  </td>\n                </tr>\n              </tbody>\n            </table>\n          </div>\n        </div>\n      </CCard>\n      <CCard className=\"mb-4\">\n        <CCardHeader>Inline text elements</CCardHeader>\n        <CCardBody>\n          <p>\n            Traditional heading elements are designed to work best in the meat of your page content.\n            When you need a heading to stand out, consider using a <strong>display heading</strong>\n            —a larger, slightly more opinionated heading style.\n          </p>\n          <div className=\"bd-example\">\n            <p>\n              You can use the mark tag to <mark>highlight</mark> text.\n            </p>\n            <p>\n              <del>This line of text is meant to be treated as deleted text.</del>\n            </p>\n            <p>\n              <s>This line of text is meant to be treated as no longer accurate.</s>\n            </p>\n            <p>\n              <ins>This line of text is meant to be treated as an addition to the document.</ins>\n            </p>\n            <p>\n              <u>This line of text will render as underlined</u>\n            </p>\n            <p>\n              <small>This line of text is meant to be treated as fine print.</small>\n            </p>\n            <p>\n              <strong>This line rendered as bold text.</strong>\n            </p>\n            <p>\n              <em>This line rendered as italicized text.</em>\n            </p>\n          </div>\n        </CCardBody>\n      </CCard>\n      <CCard className=\"mb-4\">\n        <CCardHeader>Description list alignment</CCardHeader>\n        <CCardBody>\n          <p>\n            Align terms and descriptions horizontally by using our grid system’s predefined classes\n            (or semantic mixins). For longer terms, you can optionally add a{' '}\n            <code className=\"highlighter-rouge\">.text-truncate</code> class to truncate the text\n            with an ellipsis.\n          </p>\n          <div className=\"bd-example\">\n            <dl className=\"row\">\n              <dt className=\"col-sm-3\">Description lists</dt>\n              <dd className=\"col-sm-9\">A description list is perfect for defining terms.</dd>\n\n              <dt className=\"col-sm-3\">Euismod</dt>\n              <dd className=\"col-sm-9\">\n                <p>\n                  Vestibulum id ligula porta felis euismod semper eget lacinia odio sem nec elit.\n                </p>\n                <p>Donec id elit non mi porta gravida at eget metus.</p>\n              </dd>\n\n              <dt className=\"col-sm-3\">Malesuada porta</dt>\n              <dd className=\"col-sm-9\">Etiam porta sem malesuada magna mollis euismod.</dd>\n\n              <dt className=\"col-sm-3 text-truncate\">Truncated term is truncated</dt>\n              <dd className=\"col-sm-9\">\n                Fusce dapibus, tellus ac cursus commodo, tortor mauris condimentum nibh, ut\n                fermentum massa justo sit amet risus.\n              </dd>\n\n              <dt className=\"col-sm-3\">Nesting</dt>\n              <dd className=\"col-sm-9\">\n                <dl className=\"row\">\n                  <dt className=\"col-sm-4\">Nested definition list</dt>\n                  <dd className=\"col-sm-8\">\n                    Aenean posuere, tortor sed cursus feugiat, nunc augue blandit nunc.\n                  </dd>\n                </dl>\n              </dd>\n            </dl>\n          </div>\n        </CCardBody>\n      </CCard>\n    </>\n  )\n}\n\nexport default Typography\n","import React, { forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { colorPropType, gradientsPropType } from '../../props'\nimport type { Colors, Gradients } from '../../types'\n\nexport interface CCardProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n  /**\n   * Sets the color context of the component to one of CoreUI’s themed colors.\n   *\n   * @type {'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | 'primary-gradient' | 'secondary-gradient' | 'success-gradient' | 'danger-gradient' | 'warning-gradient' | 'info-gradient' | 'dark-gradient' | 'light-gradient' | string }\n   */\n  color?: Colors | Gradients\n  /**\n   * Sets the text color context of the component to one of CoreUI’s themed colors.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | 'primary-emphasis' | 'secondary-emphasis' | 'success-emphasis' | 'danger-emphasis' | 'warning-emphasis' | 'info-emphasis' | 'light-emphasis' | 'body' | 'body-emphasis' | 'body-secondary' | 'body-tertiary' | 'black' | 'black-50' | 'white' | 'white-50' | string\n   */\n  textColor?: string\n  /**\n   * Sets the component's color scheme to one of CoreUI's themed colors, ensuring the text color contrast adheres to the WCAG 4.5:1 contrast ratio standard for accessibility.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | string\n   * @since 5.0.0\n   */\n  textBgColor?: Colors\n}\n\nexport const CCard = forwardRef<HTMLDivElement, CCardProps>(\n  ({ children, className, color, textBgColor, textColor, ...rest }, ref) => {\n    return (\n      <div\n        className={classNames(\n          'card',\n          {\n            [`bg-${color}`]: color,\n            [`text-${textColor}`]: textColor,\n            [`text-bg-${textBgColor}`]: textBgColor,\n          },\n          className,\n        )}\n        {...rest}\n        ref={ref}\n      >\n        {children}\n      </div>\n    )\n  },\n)\n\nCCard.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  color: PropTypes.oneOfType([colorPropType, gradientsPropType]),\n  textBgColor: colorPropType,\n  textColor: PropTypes.string,\n}\n\nCCard.displayName = 'CCard'\n","import React, { forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nexport interface CCardBodyProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n}\n\nexport const CCardBody = forwardRef<HTMLDivElement, CCardBodyProps>(\n  ({ children, className, ...rest }, ref) => {\n    return (\n      <div className={classNames('card-body', className)} {...rest} ref={ref}>\n        {children}\n      </div>\n    )\n  },\n)\n\nCCardBody.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n}\n\nCCardBody.displayName = 'CCardBody'\n","import React, { ElementType, forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { PolymorphicRefForwardingComponent } from '../../helpers'\n\nexport interface CCardHeaderProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * Component used for the root node. Either a string to use a HTML element or a component.\n   */\n  as?: ElementType\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n}\n\nexport const CCardHeader: PolymorphicRefForwardingComponent<'div', CCardHeaderProps> = forwardRef<\n  HTMLDivElement,\n  CCardHeaderProps\n>(({ children, as: Component = 'div', className, ...rest }, ref) => {\n  return (\n    <Component className={classNames('card-header', className)} {...rest} ref={ref}>\n      {children}\n    </Component>\n  )\n})\n\nCCardHeader.propTypes = {\n  as: PropTypes.elementType,\n  children: PropTypes.node,\n  className: PropTypes.string,\n}\n\nCCardHeader.displayName = 'CCardHeader'\n"],"names":["Typography","_jsxs","_Fragment","children","CCard","className","_jsx","CCardHeader","CCardBody","forwardRef","_a","ref","color","textBgColor","textColor","rest","__rest","React","__assign","classNames","_b","concat","propTypes","PropTypes","colorPropType","gradientsPropType","displayName","as","Component"],"sourceRoot":""}