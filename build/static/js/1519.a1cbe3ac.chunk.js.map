{"version":3,"file":"static/js/1519.a1cbe3ac.chunk.js","mappings":"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","sources":["views/pages/client/EditClient.js","../node_modules/@coreui/react-pro/src/components/form/CFormCheck.tsx"],"sourcesContent":["import React, {useEffect, useState} from 'react'\nimport { Link, useLocation, useNavigate, useParams } from 'react-router-dom'\nimport {\n  CButton,\n  CCard,\n  CCardBody,\n  CCol,\n  CContainer,\n  CForm,\n  CFormInput,\n  CImage,\n  CFormSelect,\n  CFormCheck,\n  CInputGroup,\n  CInputGroupText,\n  CRow,\n  CAlert,\n  CCardHeader,\n  CDatePicker,\n  CFormLabel,\n  CMultiSelect\n} from '@coreui/react-pro'\nimport CIcon from '@coreui/icons-react'\nimport { cilLockLocked, cilUser } from '@coreui/icons'\nimport axios from 'axios'\nimport { ToastContainer, toast } from 'react-toastify'\nimport './EditClient.css'; // Import custom CSS for styling\nimport Select from 'react-select'; // Import react-select\n\nconst EditClient = () => {\n  const clientId = useLocation().state?.clientId;\n\n  const [companyName, setCompanyName] = useState(\"\")\n  const [clientType, setClientType] = useState(\"\")\n  const [logo, setLogo] = useState()\n  const [logoPath, setLogoPath] = useState()\n  const [contactId, setContactId] = useState(\"\")\n  const [imageDisplayOrder, setImageDisplayOrder] = useState(\"\")\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [users, setUsers] = useState([])\n  const [brands, setBrands] = useState([])\n  const [selectedBrands, setSelectedBrands] = useState([]); \n  const [permission, setPermission] = useState(true)\n   \n    useEffect(() => {\n      axios.get('user/findAll', {headers: { Authorization: `Bearer ${localStorage.getItem('token')}` }}).then(response => setUsers(response.data.data))\n    .catch(error => console.error('error fetching users', error));\n\n    axios.get('brand/findAll', {headers: { Authorization: `Bearer ${localStorage.getItem('token')}` }}).then(response => {\n      let dataFromDatabase = response.data.data;\n      const formattedOptions = dataFromDatabase.map(item => ({\n        value: item.id,\n        label: item.name\n      }));\n      setBrands(formattedOptions);  \n    })\n    .catch(error => console.error('error fetching brand', error));\n\n      axios.get('client/'+clientId, {headers: { Authorization: `Bearer ${localStorage.getItem('token')}` }})\n          .then((response) => {\n            if(response.data){\n              let clientDetail = response.data.data;\n              setCompanyName(clientDetail.companyName);\n              setClientType(clientDetail.clientType);\n              setContactId(clientDetail.contactId);\n              setSelectedBrands(clientDetail.brands.map(br => ({ value: br.id, label: br.name }))); \n              setLogoPath(process.env.REACT_APP_API_URL+clientDetail.logo);\n              setPermission(clientDetail.permission);\n              let displayOrder = clientDetail.imageDisplayOrder;\n              setImageDisplayOrder(displayOrder);\n              if(displayOrder == 'unspecified'){\n                document.getElementById('unspecified').checked = true;\n                document.getElementById('imageDisplay1').disabled = true;\n                document.getElementById('imageDisplay2').disabled = true;\n                document.getElementById('imageDisplay3').disabled = true;\n                document.getElementById('imageDisplay4').disabled = true;\n              }else{\n                displayOrder = displayOrder.split(',')\n                document.getElementById('imageDisplay1').value = displayOrder[0];\n                document.getElementById('imageDisplay2').value = displayOrder[1];\n                document.getElementById('imageDisplay3').value = displayOrder[2];\n                document.getElementById('imageDisplay4').value = displayOrder[3];\n              }\n            }\n          })\n  }, [])\n \n  const changeOrder = (e) => {\n    if(document.getElementById('unspecified').checked){\n      document.getElementById('imageDisplay1').disabled = true;\n      document.getElementById('imageDisplay2').disabled = true;\n      document.getElementById('imageDisplay3').disabled = true;\n      document.getElementById('imageDisplay4').disabled = true;\n      setImageDisplayOrder('unspecified')\n    }else{\n      document.getElementById('imageDisplay1').disabled = false;\n      document.getElementById('imageDisplay2').disabled = false;\n      document.getElementById('imageDisplay3').disabled = false;\n      document.getElementById('imageDisplay4').disabled = false;\n      let value1 = document.getElementById('imageDisplay1').value;\n      let value2 = document.getElementById('imageDisplay2').value;\n      let value3 = document.getElementById('imageDisplay3').value;\n      let value4 = document.getElementById('imageDisplay4').value;\n      setImageDisplayOrder(value1+','+value2+','+value3+','+value4);\n    }\n  }\n\n  const handleCheckboxChange = (event, brandId) => {\n    if (event.target.checked) {\n      setSelectedBrands([...selectedBrands, brandId]); // Add brandId to selectedBrands array\n    } else {\n      setSelectedBrands(selectedBrands.filter(id => id !== brandId)); // Remove brandId from selectedBrands array\n    }\n  };\n\n\n  const convertFileToBase64 = (file) => {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.readAsDataURL(file);\n      reader.onload = () => resolve(reader.result);\n      reader.onerror = error => reject(error);\n    });\n  };\n\n    const editClientAction = async (e) => {\n      \n        e.preventDefault();\n        setIsSubmitting(true)\n        let image = '';\n        if(logo){\n           image = await convertFileToBase64(logo);\n        }\n        console.log(image);\n        let payload = {\n          companyName: companyName,\n          contactId: contactId,\n          clientType: clientType,\n          imageDisplayOrder: imageDisplayOrder,\n          brandIds: selectedBrands.map(brand => brand.value),\n          logo: image\n        }\n\n        axios.patch('/client/update/'+clientId, payload, {headers: { Authorization: `Bearer ${localStorage.getItem('token')}`, \"Contetnt-Type\":\"multipart/form-data\" }} )\n        .then((r) => {\n          toast.success(r.data.message);\n            setIsSubmitting(false)\n\n        })\n        .catch((e) => {\n            setIsSubmitting(false)\n            if (e.response.data.errors != undefined) {\n            }\n        });\n    }\n  return (\n    <div className=\"bg-body-tertiary min-vh-75 d-flex flex-row align-items-center\">\n      <CContainer>\n      <CForm className=\"row g-3\" onSubmit={(e)=>editClientAction(e)}>\n        <CRow className=\"justify-content-center\">\n          <CCol md={9} lg={7} xl={12}>\n            <CCard className=\"mb-4\">\n              <CCardHeader>Client Information</CCardHeader>\n              <CCardBody className=\"p-4\">\n              <CRow className=\"mb-3\">\n                  <CFormLabel htmlFor=\"companyName\" className=\"col-sm-3 col-form-label\">Company Name</CFormLabel>\n                  <div className=\"col-sm-8\">\n                    <CFormInput type=\"text\" id=\"companyName\" onChange={(e)=>{setCompanyName(e.target.value)}} value={companyName} name='companyName' />\n                  </div>\n              </CRow>\n\n                <CRow className='mb-4'>\n                  <CFormLabel htmlFor=\"clientType\" className=\"col-sm-3 col-form-label\">Company Type</CFormLabel>\n                  <div className=\"col-sm-8\">\n                    <CFormSelect id=\"clientType\" name='clientType' onChange={(e)=>{setClientType(e.target.value)}} value={clientType} >\n                      <option>Choose...</option>\n                      <option value='broker' >Broker</option>\n                      <option value='distributer' >Distributer</option>\n                      <option value='Manufacturer' >Manufacturer</option>\n                    </CFormSelect>\n                  </div>\n                </CRow>\n\n                <CRow className=\"mb-3\">\n                  <CFormLabel htmlFor=\"Logo\" className=\"col-sm-3 col-form-label\">Logo</CFormLabel>\n                  <div className=\"col-sm-8\">\n                  <CFormInput type=\"file\" id=\"logo\" onChange={(e)=>{setLogo(e.target.files[0])}} name='logo' />\n                  <CImage rounded thumbnail src={logoPath} width={200} height={200} />\n                  </div>\n              </CRow>\n\n              <CRow className=\"mb-3\">\n                  <CFormLabel htmlFor=\"Brands\" className=\"col-sm-3 col-form-label\">Brands</CFormLabel>\n                  <div className='col-sm-8'>\n                  <Select\n                    options={brands}\n                    isMulti\n                    value={selectedBrands}\n                    onChange={(selectedOptions) => setSelectedBrands(selectedOptions)}\n                    placeholder=\"Select brands...\"\n                    className=\"basic-multi-select\"\n                    classNamePrefix=\"select\"\n                    isClearable={false}\n                    closeMenuOnSelect={false}\n                    styles={{\n                      control: (provided) => ({\n                        ...provided,\n                        borderRadius: 0,\n                        borderColor: '#ced4da',\n                      }),\n                      menu: (provided) => ({\n                        ...provided,\n                        zIndex: 9999,\n                      }),\n                    }}\n                  />\n                </div>\n\n              </CRow>\n\n                <CRow className='mb-4'>\n                <CFormLabel htmlFor=\"imageDisplayOrder\" className=\"col-sm-3 col-form-label\">Image Display Order</CFormLabel>\n                <div className=\"col-sm-9\">\n                <CFormCheck id=\"unspecified\" label=\"Unspecified\" className='col-sm-2' onChange={(e)=>{changeOrder(e.target.value)}}/>\n                <div className='col-sm-2 float-start ml-5'>\n                <CFormSelect id=\"imageDisplay1\" className='col-sm-2 float-start' onChange={(e)=>{changeOrder(e.target.value)}} >\n                  <option value='c'>Closed Case</option>\n                  <option value='o' >Open Case</option>\n                  <option value='e' >Inner Package</option>\n                  <option value='i' >Raw</option>\n                </CFormSelect></div>\n                <div className='col-sm-2 float-start ml-5'>\n                <CFormSelect id=\"imageDisplay2\" className='col-sm-2' onChange={(e)=>{changeOrder(e.target.value)}} >\n                  <option value='c'>Closed Case</option>\n                  <option value='o' >Open Case</option>\n                  <option value='e' >Inner Package</option>\n                  <option value='i' >Raw</option>\n                </CFormSelect></div>\n                <div className='col-sm-2 float-start ml-5'>\n                <CFormSelect id=\"imageDisplay3\" className='col-sm-2' onChange={(e)=>{changeOrder(e.target.value)}} >\n                  <option value='c'>Closed Case</option>\n                  <option value='o' >Open Case</option>\n                  <option value='e' >Inner Package</option>\n                  <option value='i' >Raw</option>\n                </CFormSelect></div>\n                <div className='col-sm-2 float-start ml-5'>\n                <CFormSelect id=\"imageDisplay4\" className='col-sm-2' onChange={(e)=>{changeOrder(e.target.value)}} >\n                  <option value='c'>Closed Case</option>\n                  <option value='o' >Open Case</option>\n                  <option value='e' >Inner Package</option>\n                  <option value='i' >Raw</option>\n                </CFormSelect></div>\n                </div>\n                </CRow>\n\n                <CRow className='mb-4'>\n                  <CFormLabel htmlFor=\"contactPerson\" className=\"col-sm-3 col-form-label\">Contact Person</CFormLabel>\n                  <div className=\"col-sm-8\">\n                    <CFormSelect id=\"contactId\" name='contactId' onChange={(e)=>{setContactId(e.target.value)}} value={contactId} >\n                    {users.map((e, key) => {\n                        return <option key={key} value={e.id}>{e.username}</option>;\n                    })}\n\n                    </CFormSelect>\n                  </div>\n                </CRow>\n                </CCardBody>\n                </CCard>\n                </CCol>\n                </CRow>\n              {permission?\n              <CRow className='p-4'>\n              <CCol xs={12}>\n                  <CButton color=\"primary\" type=\"submit\" disabled={isSubmitting} className='float-end'>Update Company</CButton>\n                </CCol>\n              </CRow>:''}\n              </CForm>\n      </CContainer>\n    </div>\n  )\n}\n\nexport default EditClient\n","import React, { forwardRef, InputHTMLAttributes, ReactNode, useEffect, useRef } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { CFormControlValidation, CFormControlValidationProps } from './CFormControlValidation'\nimport { CFormLabel } from './CFormLabel'\n\nimport { useForkedRef } from '../../hooks'\nimport type { Colors, Shapes } from '../../types'\n\nexport type ButtonObject = {\n  /**\n   * Sets the color context of the component to one of CoreUI’s themed colors.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | string\n   */\n  color?: Colors\n  /**\n   * Select the shape of the component.\n   *\n   * @type 'rounded' | 'rounded-top' | 'rounded-end' | 'rounded-bottom' | 'rounded-start' | 'rounded-circle' | 'rounded-pill' | 'rounded-0' | 'rounded-1' | 'rounded-2' | 'rounded-3' | string\n   */\n  shape?: Shapes\n  /**\n   * Size the component small or large.\n   */\n  size?: 'sm' | 'lg'\n  /**\n   * Set the button variant to an outlined button or a ghost button.\n   */\n  variant?: 'outline' | 'ghost'\n}\n\nexport interface CFormCheckProps\n  extends CFormControlValidationProps,\n    InputHTMLAttributes<HTMLInputElement> {\n  /**\n   * Create button-like checkboxes and radio buttons.\n   */\n  button?: ButtonObject\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * Sets hit area to the full area of the component.\n   */\n  hitArea?: 'full'\n  /**\n   * The id global attribute defines an identifier (ID) that must be unique in the whole document.\n   */\n  id?: string\n  /**\n   * Input Checkbox indeterminate Property.\n   */\n  indeterminate?: boolean\n  /**\n   * Group checkboxes or radios on the same horizontal row.\n   */\n  inline?: boolean\n  /**\n   * Set component validation state to invalid.\n   */\n  invalid?: boolean\n  /**\n   * The element represents a caption for a component.\n   */\n  label?: string | ReactNode\n  /**\n   * Put checkboxes or radios on the opposite side.\n   *\n   * @sinve 4.7.0\n   */\n  reverse?: boolean\n  /**\n   * Specifies the type of component.\n   */\n  type?: 'checkbox' | 'radio'\n  /**\n   * Set component validation state to valid.\n   */\n  valid?: boolean\n}\n\nexport const CFormCheck = forwardRef<HTMLInputElement, CFormCheckProps>(\n  (\n    {\n      className,\n      button,\n      feedback,\n      feedbackInvalid,\n      feedbackValid,\n      floatingLabel,\n      tooltipFeedback,\n      hitArea,\n      id,\n      indeterminate,\n      inline,\n      invalid,\n      label,\n      reverse,\n      type = 'checkbox',\n      valid,\n      ...rest\n    },\n    ref,\n  ) => {\n    const inputRef = useRef<HTMLInputElement>(null)\n    const forkedRef = useForkedRef(ref, inputRef)\n\n    useEffect(() => {\n      if (inputRef.current && indeterminate) {\n        inputRef.current.indeterminate = indeterminate\n      }\n    }, [indeterminate, inputRef.current])\n\n    const FormControl = () => (\n      <input\n        type={type}\n        className={classNames(button ? 'btn-check' : 'form-check-input', {\n          'is-invalid': invalid,\n          'is-valid': valid,\n          'me-2': hitArea,\n        })}\n        id={id}\n        {...rest}\n        ref={forkedRef}\n      />\n    )\n\n    const FormValidation = () => (\n      <CFormControlValidation\n        describedby={rest['aria-describedby']}\n        feedback={feedback}\n        feedbackInvalid={feedbackInvalid}\n        feedbackValid={feedbackValid}\n        floatingLabel={floatingLabel}\n        invalid={invalid}\n        tooltipFeedback={tooltipFeedback}\n        valid={valid}\n      />\n    )\n\n    const FormLabel = () => (\n      <CFormLabel\n        customClassName={classNames(\n          button\n            ? classNames(\n                'btn',\n                button.variant ? `btn-${button.variant}-${button.color}` : `btn-${button.color}`,\n                {\n                  [`btn-${button.size}`]: button.size,\n                },\n                `${button.shape}`,\n              )\n            : 'form-check-label',\n        )}\n        {...(id && { htmlFor: id })}\n      >\n        {label}\n      </CFormLabel>\n    )\n\n    const FormCheck = () => {\n      if (button) {\n        return (\n          <>\n            <FormControl />\n            {label && <FormLabel />}\n            <FormValidation />\n          </>\n        )\n      }\n\n      if (label) {\n        return hitArea ? (\n          <>\n            <FormControl />\n            <CFormLabel\n              customClassName={classNames('form-check-label stretched-link', className)}\n              {...(id && { htmlFor: id })}\n            >\n              {label}\n            </CFormLabel>\n            <FormValidation />\n          </>\n        ) : (\n          <div\n            className={classNames(\n              'form-check',\n              {\n                'form-check-inline': inline,\n                'form-check-reverse': reverse,\n                'is-invalid': invalid,\n                'is-valid': valid,\n              },\n              className,\n            )}\n          >\n            <FormControl />\n            <FormLabel />\n            <FormValidation />\n          </div>\n        )\n      }\n\n      return <FormControl />\n    }\n\n    return <FormCheck />\n  },\n)\n\nCFormCheck.propTypes = {\n  button: PropTypes.object,\n  className: PropTypes.string,\n  hitArea: PropTypes.oneOf(['full']),\n  id: PropTypes.string,\n  indeterminate: PropTypes.bool,\n  inline: PropTypes.bool,\n  label: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n  reverse: PropTypes.bool,\n  type: PropTypes.oneOf(['checkbox', 'radio']),\n  ...CFormControlValidation.propTypes,\n}\n\nCFormCheck.displayName = 'CFormCheck'\n"],"names":["EditClient","_useLocation$state","clientId","useLocation","state","companyName","setCompanyName","useState","clientType","setClientType","logo","setLogo","logoPath","setLogoPath","contactId","setContactId","imageDisplayOrder","setImageDisplayOrder","isSubmitting","setIsSubmitting","users","setUsers","brands","setBrands","selectedBrands","setSelectedBrands","permission","setPermission","useEffect","axios","get","headers","Authorization","concat","localStorage","getItem","then","response","data","catch","error","console","formattedOptions","map","item","value","id","label","name","clientDetail","br","process","displayOrder","document","getElementById","checked","disabled","split","changeOrder","e","value1","value2","value3","value4","editClientAction","async","preventDefault","image","file","Promise","resolve","reject","reader","FileReader","readAsDataURL","onload","result","onerror","log","payload","brandIds","brand","patch","r","toast","success","message","errors","_jsx","className","children","CContainer","_jsxs","CForm","onSubmit","CRow","CCol","md","lg","xl","CCard","CCardHeader","CCardBody","CFormLabel","htmlFor","CFormInput","type","onChange","target","CFormSelect","files","CImage","rounded","thumbnail","src","width","height","Select","options","isMulti","selectedOptions","placeholder","classNamePrefix","isClearable","closeMenuOnSelect","styles","control","provided","borderRadius","borderColor","menu","zIndex","CFormCheck","key","username","xs","CButton","color","forwardRef","_a","ref","button","feedback","feedbackInvalid","feedbackValid","floatingLabel","tooltipFeedback","hitArea","indeterminate","inline","invalid","reverse","_b","valid","rest","__rest","inputRef","useRef","forkedRef","useForkedRef","current","FormControl","React","__assign","classNames","FormValidation","CFormControlValidation","describedby","FormLabel","customClassName","variant","size","shape","propTypes","PropTypes","displayName"],"sourceRoot":""}