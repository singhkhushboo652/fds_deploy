{"version":3,"file":"static/js/5142.db6384ea.chunk.js","mappings":"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","sources":["views/pages/product/AddProduct.js","../node_modules/@coreui/react-pro/src/components/alert/CAlert.tsx","../node_modules/@coreui/react-pro/src/components/card/CCard.tsx","../node_modules/@coreui/react-pro/src/components/card/CCardBody.tsx","../node_modules/@coreui/react-pro/src/components/card/CCardHeader.tsx","../node_modules/@coreui/react-pro/src/components/form/CForm.tsx","../node_modules/@coreui/react-pro/src/components/form/CFormControlValidation.tsx","../node_modules/@coreui/react-pro/src/components/form/CFormText.tsx","../node_modules/@coreui/react-pro/src/components/form/CFormControlWrapper.tsx","../node_modules/@coreui/react-pro/src/components/form/CFormFeedback.tsx","../node_modules/@coreui/react-pro/src/components/form/CFormFloating.tsx","../node_modules/@coreui/react-pro/src/components/form/CFormInput.tsx","../node_modules/@coreui/react-pro/src/components/form/CFormSelect.tsx","../node_modules/@coreui/react-pro/src/components/form/CFormTextarea.tsx","../node_modules/@coreui/react-pro/src/components/grid/CCol.tsx","../node_modules/@coreui/react-pro/src/components/grid/CRow.tsx"],"sourcesContent":["import React, {useEffect, useState} from 'react'\nimport { Link, useNavigate } from 'react-router-dom'\nimport {\n  CButton,\n  CCard,\n  CCardBody,\n  CCol,\n  CContainer,\n  CForm,\n  CFormInput,\n  CImage,\n  CFormSelect,\n  CFormCheck,\n  CInputGroup,\n  CInputGroupText,\n  CRow,\n  CAlert,\n  CCardHeader,\n  CDatePicker,\n  CFormTextarea\n} from '@coreui/react-pro'\nimport axios from 'axios'\nimport CIcon from '@coreui/icons-react'\nimport { toast } from 'react-toastify'\n\nconst AddProduct = () => {\n    const navigate = useNavigate();\n    const [manuDesc, setManuDesc] = useState(\"\")\n    const [distItemNum, setDistItemNum] = useState(\"\")\n    const [name, setName] = useState(\"\")\n    const [manuItemNum, setManuItemNum] = useState(\"\")\n    const [productType, setProductType] = useState(\"\")\n    const [caseDime, setCaseDime] = useState(\"\")\n    const [servingSize, setServingSize] = useState(\"\")\n    const [shelfLifeManu, setShelfLifeManu] = useState(\"\")\n    const [storageMethod, setStorageMethod] = useState(\"\")\n    const [tips, setTips] = useState(\"\")\n    const [ingreList, setIngreList] = useState(\"\")\n    const [servicePerCont, setServicePerCont] = useState(\"\")\n    const [serviceSizeQty, setServiceSizeQty] = useState(\"\")\n    const [serviceSizeWt, setServiceSizeWt] = useState(\"\")\n    const [shelfLife, setshelfLife] = useState(\"\")\n    \n    const [distributerId, setDistributerId] = useState(\"\")\n    const [manuMarkStmt, setManuMarkStmt] = useState(\"\")\n    const [caseCount, setCaseCount] = useState(\"\")\n    const [masterPack, setMasterPack] = useState(\"\")\n    const [grossCaseWeight, setGrossCaseWeight] = useState(\"\")\n    const [masterUnitSize, setMasterUnitSize] = useState(\"\")\n    const [gtinNum, setGtinNum] = useState(\"\")\n\n    const [calories, setCalories] = useState(\"\")\n    const [cholestrol, setCholestrol] = useState(\"\")\n    const [totalFat, setTotalFat] = useState(\"\")\n    const [saturatedFat, setSaturatedFat] = useState(\"\")\n    const [transFat, setTransFat] = useState(\"\")\n    const [sodium, setSodium] = useState(\"\")\n    const [totalCarboht, setTotalCarboht] = useState(\"\")\n    const [dietaryFiber, setDietaryFiber] = useState(\"\")\n    const [totalSugar, setTotalSugar] = useState(\"\")\n    const [addedSugar, setAddedSugar] = useState(\"\")\n    const [protein, setProtein] = useState(\"\")\n    const [vitD, setVitD] = useState(\"\")\n    const [calcuim, setCalcuim] = useState(\"\")\n    const [iron, setIron] = useState(\"\")\n    const [potassium, setPotassium] = useState(\"\")\n\n    const [cnLabel, setCnLabel] = useState(\"Yes\")\n    const [isActive, setIsActive] = useState(1)\n\n    const [validationErrors, setValidationErrors] = useState({});\n    const [isSubmitting, setIsSubmitting] = useState(false);\n    const [formData, setFormData] = useState([{ imageType: '', logo: '', logoFile: null, base64Image: '' }]);\n\n    const [clients, setClients] = useState([])\n\n    const handleAddForm = () => {\n      setFormData([...formData, { imageType: '', logo: '', logoFile: null, base64Image: '' }]);\n    };\n  \n    const handleRemoveForm = (index) => {\n      const updatedFormData = [...formData];\n      updatedFormData.splice(index, 1);\n      setFormData(updatedFormData);\n    };\n  \n    const handleInputChange = async (index, event) => {\n      const { name, value, files } = event.target;\n      const updatedFormData = [...formData];\n  \n      if (files) {\n        const file = files[0];\n        updatedFormData[index]['logoFile'] = URL.createObjectURL(file);\n  \n        // Convert the image file to a base64 encoded string\n        const reader = new FileReader();\n        reader.readAsDataURL(file);\n        reader.onloadend = () => {\n          updatedFormData[index]['base64Image'] = reader.result;\n          setFormData(updatedFormData);\n        };\n      } else {\n        updatedFormData[index][name] = value;\n        setFormData(updatedFormData);\n      }\n    };\n\n  useEffect(() => {  \n    axios.get('client/findAll/distributer', {headers: { Authorization: `Bearer ${localStorage.getItem('token')}` }}).then(response => setClients(response.data.data))\n    .catch(error => console.error('error fetching clients', error));\n  }, [])\n \n    \n    const addProductAction = async (e) => {\n        e.preventDefault();\n        setIsSubmitting(true)\n        let payload = {\n            manuDesc: manuDesc,\n            name: name,\n            distItemNum:distItemNum,\n            manuItemNum:manuItemNum,\n            manuMarkStmt:manuMarkStmt,\n            distributerId: distributerId,\n            productType: productType,\n            caseDime: caseDime,\n            servingSize: servingSize,\n            shelfLifeManu: shelfLifeManu,\n            storageMethod: storageMethod,\n            tips: tips,\n            ingreList: ingreList,\n            servicePerCont: servicePerCont,\n            serviceSizeQty: serviceSizeQty,\n            serviceSizeWt: serviceSizeWt,\n            shelfLife: shelfLife,\n            masterPack: masterPack,\n            grossCaseWeight: grossCaseWeight,\n            masterUnitSize: masterUnitSize,\n            gtinNum: gtinNum,\n            caseCount: caseCount,\n            calories: calories,\n            cholestrol: cholestrol,\n            totalFat: totalFat,\n            saturatedFat: saturatedFat,\n            transFat: transFat,\n            sodium: sodium,\n            totalCarboht: totalCarboht,\n            dietaryFiber: dietaryFiber,\n            totalSugar: totalSugar,\n            addedSugar: addedSugar,\n            protein: protein,\n            vitD: vitD,\n            calcuim: calcuim,\n            iron: iron,\n            potassium: potassium,\n            cnLabel: cnLabel,\n            isActive: isActive\n        }\n        const productImages = formData.map(data => ({\n          imageType: data.imageType,\n          image: data.base64Image,\n        }));\n\n        const dataToSend = {\n          ...payload,\n          images: JSON.stringify(productImages)\n        };\n        axios.post('/product/create', dataToSend, {headers: { Authorization: `Bearer ${localStorage.getItem('token')}` }} )\n        .then((r) => {\n            setIsSubmitting(false)\n            navigate(\"/products\");\n        })\n        .catch((e) => {\n            setIsSubmitting(false)\n            toast.error(\"There is something wrong !!\");\n        });\n    }\n  return (\n    <div className=\"bg-body-tertiary min-vh-75 d-flex flex-row align-items-center\">\n      <CContainer>\n        <CAlert className='mb-4' color='danger'>Note: All fields are required except GTIN Number, if any field not available please input 0 or NA !!</CAlert>\n        <CForm className=\"row g-3\" onSubmit={(e)=>addProductAction(e)}>\n        <CRow className=\"justify-content-center\">\n          <CCol md={9} lg={7} xl={12}>\n            <CCard className=\"mb-4\">\n              <CCardHeader>MFG Product Information</CCardHeader>\n              <CCardBody className=\"p-4\">\n                <CRow className='mb-4'>\n                <CCol md={12}>\n                  <CFormInput type=\"text\" id=\"name\" label=\"Name\" onChange={(e)=>{setName(e.target.value)}} value={name} name='name' />\n                </CCol>\n                </CRow>\n\n                <CRow className='mb-4'>\n                  <CCol md={6}>\n                    <CFormInput type=\"number\" id=\"manuItemNum\" label=\"Manufacturer Item Number\" onChange={(e)=>{setManuItemNum(e.target.value)}} value={manuItemNum} name='manuItemNum' />\n                  </CCol>\n                  <CCol md={6}>\n                    <CFormInput type=\"text\" id=\"distItemNum\" label=\"Distributor Item Number\" onChange={(e)=>{setDistItemNum(e.target.value)}} value={distItemNum} name='distItemNum' />\n                  </CCol>\n                </CRow>\n                <CRow className='mb-4'>\n                  <CCol md={12}>\n                    <CFormTextarea id=\"manuDesc\" label=\"Manufacturer Description\" onChange={(e)=>{setManuDesc(e.target.value)}} value={manuDesc} name='manuDesc'></CFormTextarea>\n                  </CCol>\n                </CRow>\n                <CRow className='mb-4'>\n                  <CCol md={12}>\n                    <CFormTextarea id=\"manuMarkStmt\" label=\"Manufacturer Marketing Statement\" onChange={(e)=>{setManuMarkStmt(e.target.value)}} value={manuMarkStmt} name='manuMarkStmt'></CFormTextarea>\n                  </CCol>\n                </CRow>\n                <CRow className='mb-4'>\n                <CCol md={6}>\n                  <CFormSelect id=\"distributerId\" label=\"Distributer\" name='distributerId' onChange={(e)=>{setDistributerId(e.target.value)}} value={distributerId} >\n                    <option>...Choose</option>\n                    {clients.map((e, key) => {\n                        return <option key={key} value={e.id}>{e.companyName}</option>;\n                    })}\n                  </CFormSelect>\n                </CCol>\n                <CCol md={6}>\n                  <CFormSelect id=\"productType\" label=\"Product Type\" name='productType' onChange={(e)=>{setProductType(e.target.value)}} value={productType} >\n                    <option>Choose...</option>\n                    <option value='Paper' >Paper</option>\n                    <option value='Disposables' >Disposables</option>\n                    <option value='Beverages' >Beverages</option>\n                    <option value='Food-Frozen' >Food-Frozen</option>\n                    <option value='Food-Fresh' >Food-Fresh</option>\n                    <option value='SmallWares' >Small Wares</option>\n                  </CFormSelect>\n                </CCol>\n                </CRow>\n                </CCardBody>\n                </CCard>\n                </CCol>\n                </CRow>\n                <CRow>\n                  <CCol md={9} lg={7} xl={12}>                    \n                    <CCard className=\"mb-4\">\n                      <CCardHeader>Product Images</CCardHeader>\n                      <CCardBody className=\"p-4\">\n                      {formData.map((data, index) => (\n                        <CRow key={index} className=\"mb-3\">\n                          <CCol>\n                            <CFormSelect\n                              id={`imageType${index}`}\n                              name=\"imageType\"\n                              value={data.imageType}\n                              onChange={(e) => handleInputChange(index, e)}\n                            >\n                              <option value=\"\">...Choose</option>\n                              <option value=\"close\">Closed Case</option>\n                              <option value=\"open\">Open Case</option>\n                              <option value=\"innerPack\">Inner Pack</option>\n                              <option value=\"raw\">Raw/Uncooked</option>\n                              <option value=\"plated\">Plated</option>\n                              <option value=\"styled\">Styled</option>\n                            </CFormSelect>\n                          </CCol>\n                          <CCol>\n                            <CFormInput\n                              type=\"file\"\n                              id={`productImage${index}`}\n                              name=\"logo\"\n                              onChange={(e) => handleInputChange(index, e)}\n                            />\n                            {data.logoFile && <CImage rounded thumbnail width={200} height={200} src={data.logoFile} />}\n                          </CCol>\n                          <CCol>\n                            <CButton color=\"danger\" onClick={() => handleRemoveForm(index)}>\n                              Remove\n                            </CButton>\n                          </CCol>\n                        </CRow>\n                      ))}\n                      <CButton type=\"button\" onClick={handleAddForm}>\n                        Add Image\n                      </CButton>\n                      </CCardBody>\n                    </CCard>\n                  </CCol>\n                </CRow>\n                <CRow>\n                  <CCol md={9} lg={7} xl={12}>\n                    \n                    <CCard className=\"mb-4\">\n                    <CCardHeader>Product Attributes</CCardHeader>\n                  <CCardBody className=\"p-4\">\n                    \n                <CRow className='mb-4'>\n                    <CCol md={6}>\n                      <CFormInput type=\"number\" id=\"gtinNum\" label=\"GTIN Number\" onChange={(e)=>{setGtinNum(e.target.value)}} value={gtinNum} name='gtinNum' />\n                    </CCol>\n                    <CCol md={6}>\n                    <CFormInput type='number' locale=\"en-US\" id=\"caseCount\" label=\"Case Count\" onChange={(e)=>{setCaseCount(e.target.value)}} value={caseCount} name='caseCount' />\n                    </CCol>\n                </CRow>\n                  <CRow>\n                    <CCol>\n                    <CFormInput type=\"number\" id=\"masterPack\" label=\"Master Pack\" onChange={(e)=>{setMasterPack(e.target.value)}} value={masterPack} name='masterPack' />\n                    </CCol>\n                    <CCol>\n                    <CFormInput type=\"number\" id=\"grossCaseWeight\" label=\"Gross Case Weight\" onChange={(e)=>{setGrossCaseWeight(e.target.value)}} value={grossCaseWeight} name='grossCaseWeight' />\n                    </CCol>\n                    <CCol>\n                    <CFormInput type=\"number\" id=\"masterUnitSize\" label=\"Master Unit Size\" onChange={(e)=>{setMasterUnitSize(e.target.value)}} value={masterUnitSize} name='masterUnitSize' />\n                    </CCol>\n                  </CRow>\n                    <CCol xs={12} className='mb-4'>\n                      <CFormInput type='text' id=\"caseDime\" name=\"caseDime\" label=\"Case Dimensions\" placeholder=\"(LxWxH)\" onChange={(e)=>{setCaseDime(e.target.value)}} value={caseDime}  />\n                    </CCol>\n                    <CCol xs={12} className='mb-4'>\n                      <CFormInput type='number' id=\"servingSize\" label=\"Serving Size\" name=\"servingSize\"  onChange={(e)=>{setServingSize(e.target.value)}} value={servingSize} />\n                    </CCol>\n                    <CCol xs={12} className='mb-4'>\n                      <CFormInput type='text' id=\"shelfLifeManu\" label=\"Shelf Life from Manufacturer\" name=\"shelfLifeManu\" onChange={(e)=>{setShelfLifeManu(e.target.value)}} value={shelfLifeManu} />\n                    </CCol>\n                    <CRow>\n                    <CCol md={6}>\n                      <CFormSelect id=\"storageMethod\" label=\"Storage Method\" name='storageMethod' onChange={(e)=>{setStorageMethod(e.target.value)}} value={storageMethod} >\n                        <option>Choose...</option>\n                        <option value='Dry' >Dry</option>\n                        <option value='Refrigerated' >Refrigerated</option>\n                        <option value='Frozen' >Frozen</option>\n                      </CFormSelect>\n                    </CCol>\n                    <CCol md={6}>\n                      <CFormSelect id=\"shelfLife\" label=\"Shelf Life\" name='shelfLife' onChange={(e)=>{setshelfLife(e.target.value)}} value={shelfLife} >\n                        <option>Choose...</option>\n                        <option value='UseByDate' >Use By Date</option>\n                        <option value='days365' >365 days</option>\n                        <option value='days365Plus' >365 days plus</option>\n                      </CFormSelect>\n                    </CCol>\n                    </CRow>\n                    <CRow className='mb-4'>\n                  <CCol md={12}>\n                    <CFormTextarea id=\"ingreList\" label=\"List of all Ingredients\" onChange={(e)=>{setIngreList(e.target.value)}} value={ingreList} name='ingreList'></CFormTextarea>\n                  </CCol>\n                </CRow>\n                <CRow className='mb-4'>\n                  <CCol md={12}>\n                    <CFormTextarea id=\"tips\" label=\"Tips & Handling\" onChange={(e)=>{setTips(e.target.value)}} value={tips} name='tips'></CFormTextarea>\n                  </CCol>\n                </CRow>\n                <CRow>\n                    <CCol>\n                    <CFormInput type=\"number\" id=\"servicePerCont\" label=\"Servings per Container\" onChange={(e)=>{setServicePerCont(e.target.value)}} value={servicePerCont} name='servicePerCont' />\n                    </CCol>\n                    <CCol>\n                    <CFormInput type=\"number\" id=\"serviceSizeQty\" label=\"Serving Size Qty\" onChange={(e)=>{setServiceSizeQty(e.target.value)}} value={serviceSizeQty} name='serviceSizeQty' />\n                    </CCol>\n                    <CCol>\n                    <CFormInput type=\"number\" id=\"serviceSizeWt\" label=\"Serving Size Weight (g)\" onChange={(e)=>{setServiceSizeWt(e.target.value)}} value={serviceSizeWt} name='serviceSizeWt' />\n                    </CCol>\n                  </CRow>\n                  </CCardBody>\n                </CCard>\n                  </CCol>\n            </CRow>\n            <CRow>\n              <CCard>\n                <CCardHeader>Nutritional Facts</CCardHeader>\n                <CCardBody className=\"p-4\">\n                <CRow>\n                    <CCol>\n                    <CFormInput type=\"number\" id=\"calories\" label=\"Calories\" onChange={(e)=>{setCalories(e.target.value)}} value={calories} name='calories' />\n                    </CCol>\n                    <CCol>\n                    <CFormInput type=\"number\" id=\"cholestrol\" label=\"Cholesterol (mg)\" onChange={(e)=>{setCholestrol(e.target.value)}} value={cholestrol} name='cholestrol' />\n                    </CCol>\n                    <CCol>\n                    <CFormInput type=\"number\" id=\"sodium\" label=\"Sodium (mg)\" onChange={(e)=>{setSodium(e.target.value)}} value={sodium} name='sodium' />\n                    </CCol>\n                  </CRow>\n                  <CRow>\n                    <CCol>\n                    <CFormInput type=\"number\" id=\"totalFat\" label=\"Total Fat (g)\" onChange={(e)=>{setTotalFat(e.target.value)}} value={totalFat} name='totalFat' />\n                    </CCol>\n                    <CCol>\n                    <CFormInput type=\"number\" id=\"saturatedFat\" label=\"Saturated Fat (g)\" onChange={(e)=>{setSaturatedFat(e.target.value)}} value={saturatedFat} name='saturatedFat' />\n                    </CCol>\n                    <CCol>\n                    <CFormInput type=\"number\" id=\"transFat\" label=\"Trans Fat (g)\" onChange={(e)=>{setTransFat(e.target.value)}} value={transFat} name='transFat' />\n                    </CCol>\n                  </CRow>\n                  <CRow>\n                    <CCol>\n                    <CFormInput type=\"number\" id=\"totalCarboht\" label=\"Total Carbohydrate (g)\" onChange={(e)=>{setTotalCarboht(e.target.value)}} value={totalCarboht} name='totalCarboht' />\n                    </CCol>\n                    <CCol>\n                    <CFormInput type=\"number\" id=\"dietaryFiber\" label=\"Dietary Fiber (g)\" onChange={(e)=>{setDietaryFiber(e.target.value)}} value={dietaryFiber} name='dietaryFiber' />\n                    </CCol>\n                  </CRow>\n                  <CRow>\n                    <CCol>\n                    <CFormInput type=\"number\" id=\"totalSugar\" label=\"Total Sugars (g)\" onChange={(e)=>{setTotalSugar(e.target.value)}} value={totalSugar} name='totalSugar' />\n                    </CCol>\n                    <CCol>\n                    <CFormInput type=\"number\" id=\"addedSugar\" label=\"Added Sugars (g)\" onChange={(e)=>{setAddedSugar(e.target.value)}} value={addedSugar} name='addedSugar' />\n                    </CCol>\n                  </CRow>\n                  <CRow>\n                    <CCol>\n                    <CFormInput type=\"number\" id=\"protein\" label=\"Protein (g)\" onChange={(e)=>{setProtein(e.target.value)}} value={protein} name='protein' />\n                    </CCol>\n                    <CCol>\n                    <CFormInput type=\"number\" id=\"vitD\" label=\" Vitamin D (mcg)\" onChange={(e)=>{setVitD(e.target.value)}} value={vitD} name='vitD' />\n                    </CCol>\n                  </CRow>\n                  <CRow>\n                    <CCol>\n                    <CFormInput type=\"number\" id=\"calcuim\" label=\"Calcium (mg)\" onChange={(e)=>{setCalcuim(e.target.value)}} value={calcuim} name='calcuim' />\n                    </CCol>\n                    <CCol>\n                    <CFormInput type=\"number\" id=\"iron\" label=\"Iron (mg)\" onChange={(e)=>{setIron(e.target.value)}} value={iron} name='iron' />\n                    </CCol>\n                    <CCol>\n                    <CFormInput type=\"number\" id=\"potassium\" label=\"Potassium (mg)\" onChange={(e)=>{setPotassium(e.target.value)}} value={potassium} name='potassium' />\n                    </CCol>\n                  </CRow>\n              </CCardBody>\n              </CCard>\n              </CRow>\n              <CRow>\n                <CCard className=\"mb-4\">\n                  <CCardHeader>Published Product</CCardHeader>\n                  <CCardBody className=\"p-4\">\n                    <CRow className='mb-4'>\n                      <CCol>\n                        <CFormSelect id=\"cnLabel\" label=\"C N Label\" name='cnLabel' onChange={(e)=>{setCnLabel(e.target.value)}} value={cnLabel} >\n                          <option value='Yes' >Yes</option>\n                          <option value='No' >No</option>\n                        </CFormSelect>\n                      </CCol>\n                    </CRow>\n                    <CRow className='mb-4'>\n                      <CCol>\n                        <CFormSelect id=\"isActive\" label=\"Published Product\" name='isActive' onChange={(e)=>{setIsActive(e.target.value)}} value={isActive} >\n                          <option value='1' >Published</option>\n                          <option value='0' >Unpublished</option>\n                        </CFormSelect>\n                      </CCol>\n                    </CRow>\n                  </CCardBody>\n                </CCard>\n              </CRow>\n              <CRow className='p-4'>\n              <CCol xs={12}>\n                  <CButton color=\"primary\" type=\"submit\" disabled={isSubmitting} className='float-end'>Add Product</CButton>\n                </CCol>\n              </CRow>\n              </CForm>\n      </CContainer>\n    </div>\n  )\n}\n\nexport default AddProduct\n","import React, { forwardRef, HTMLAttributes, useEffect, useState, useRef } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\nimport { Transition } from 'react-transition-group'\n\nimport { CCloseButton } from '../close-button/CCloseButton'\n\nimport { useForkedRef } from '../../hooks'\nimport { colorPropType } from '../../props'\nimport type { Colors } from '../../types'\n\nexport interface CAlertProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * Sets the color context of the component to one of CoreUI’s themed colors.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | string\n   */\n  color: Colors\n  /**\n   * Optionally add a close button to alert and allow it to self dismiss.\n   */\n  dismissible?: boolean\n  /**\n   * Callback fired when the component requests to be closed.\n   */\n  onClose?: () => void\n  /**\n   * Set the alert variant to a solid.\n   */\n  variant?: 'solid' | string\n  /**\n   * Toggle the visibility of component.\n   */\n  visible?: boolean\n}\n\nexport const CAlert = forwardRef<HTMLDivElement, CAlertProps>(\n  (\n    {\n      children,\n      className,\n      color = 'primary',\n      dismissible,\n      variant,\n      visible = true,\n      onClose,\n      ...rest\n    },\n    ref,\n  ) => {\n    const alertRef = useRef<HTMLDivElement>(null)\n    const forkedRef = useForkedRef(ref, alertRef)\n    const [_visible, setVisible] = useState(visible)\n\n    useEffect(() => {\n      setVisible(visible)\n    }, [visible])\n\n    return (\n      <Transition\n        in={_visible}\n        mountOnEnter\n        nodeRef={alertRef}\n        onExit={onClose}\n        timeout={150}\n        unmountOnExit\n      >\n        {(state) => (\n          <div\n            className={classNames(\n              'alert',\n              variant === 'solid' ? `bg-${color} text-white` : `alert-${color}`,\n              {\n                'alert-dismissible fade': dismissible,\n                show: state === 'entered',\n              },\n              className,\n            )}\n            role=\"alert\"\n            {...rest}\n            ref={forkedRef}\n          >\n            {children}\n            {dismissible && <CCloseButton onClick={() => setVisible(false)} />}\n          </div>\n        )}\n      </Transition>\n    )\n  },\n)\n\nCAlert.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  color: colorPropType.isRequired,\n  dismissible: PropTypes.bool,\n  onClose: PropTypes.func,\n  variant: PropTypes.string,\n  visible: PropTypes.bool,\n}\n\nCAlert.displayName = 'CAlert'\n","import React, { forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { colorPropType, gradientsPropType } from '../../props'\nimport type { Colors, Gradients } from '../../types'\n\nexport interface CCardProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n  /**\n   * Sets the color context of the component to one of CoreUI’s themed colors.\n   *\n   * @type {'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | 'primary-gradient' | 'secondary-gradient' | 'success-gradient' | 'danger-gradient' | 'warning-gradient' | 'info-gradient' | 'dark-gradient' | 'light-gradient' | string }\n   */\n  color?: Colors | Gradients\n  /**\n   * Sets the text color context of the component to one of CoreUI’s themed colors.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | 'primary-emphasis' | 'secondary-emphasis' | 'success-emphasis' | 'danger-emphasis' | 'warning-emphasis' | 'info-emphasis' | 'light-emphasis' | 'body' | 'body-emphasis' | 'body-secondary' | 'body-tertiary' | 'black' | 'black-50' | 'white' | 'white-50' | string\n   */\n  textColor?: string\n  /**\n   * Sets the component's color scheme to one of CoreUI's themed colors, ensuring the text color contrast adheres to the WCAG 4.5:1 contrast ratio standard for accessibility.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | string\n   * @since 5.0.0\n   */\n  textBgColor?: Colors\n}\n\nexport const CCard = forwardRef<HTMLDivElement, CCardProps>(\n  ({ children, className, color, textBgColor, textColor, ...rest }, ref) => {\n    return (\n      <div\n        className={classNames(\n          'card',\n          {\n            [`bg-${color}`]: color,\n            [`text-${textColor}`]: textColor,\n            [`text-bg-${textBgColor}`]: textBgColor,\n          },\n          className,\n        )}\n        {...rest}\n        ref={ref}\n      >\n        {children}\n      </div>\n    )\n  },\n)\n\nCCard.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  color: PropTypes.oneOfType([colorPropType, gradientsPropType]),\n  textBgColor: colorPropType,\n  textColor: PropTypes.string,\n}\n\nCCard.displayName = 'CCard'\n","import React, { forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nexport interface CCardBodyProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n}\n\nexport const CCardBody = forwardRef<HTMLDivElement, CCardBodyProps>(\n  ({ children, className, ...rest }, ref) => {\n    return (\n      <div className={classNames('card-body', className)} {...rest} ref={ref}>\n        {children}\n      </div>\n    )\n  },\n)\n\nCCardBody.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n}\n\nCCardBody.displayName = 'CCardBody'\n","import React, { ElementType, forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { PolymorphicRefForwardingComponent } from '../../helpers'\n\nexport interface CCardHeaderProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * Component used for the root node. Either a string to use a HTML element or a component.\n   */\n  as?: ElementType\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n}\n\nexport const CCardHeader: PolymorphicRefForwardingComponent<'div', CCardHeaderProps> = forwardRef<\n  HTMLDivElement,\n  CCardHeaderProps\n>(({ children, as: Component = 'div', className, ...rest }, ref) => {\n  return (\n    <Component className={classNames('card-header', className)} {...rest} ref={ref}>\n      {children}\n    </Component>\n  )\n})\n\nCCardHeader.propTypes = {\n  as: PropTypes.elementType,\n  children: PropTypes.node,\n  className: PropTypes.string,\n}\n\nCCardHeader.displayName = 'CCardHeader'\n","import React, { forwardRef, FormHTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nexport interface CFormProps extends FormHTMLAttributes<HTMLFormElement> {\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * Mark a form as validated. If you set it `true`, all validation styles will be applied to the forms component.\n   */\n  validated?: boolean\n}\n\nexport const CForm = forwardRef<HTMLFormElement, CFormProps>(\n  ({ children, className, validated, ...rest }, ref) => {\n    return (\n      <form\n        className={classNames({ 'was-validated': validated }, className) || undefined}\n        {...rest}\n        ref={ref}\n      >\n        {children}\n      </form>\n    )\n  },\n)\n\nCForm.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  validated: PropTypes.bool,\n}\n\nCForm.displayName = 'CForm'\n","import React, { FC, ReactNode } from 'react'\nimport PropTypes from 'prop-types'\n\nimport { CFormFeedback } from './CFormFeedback'\n\nexport interface CFormControlValidationProps {\n  /**\n   * @ignore\n   */\n  describedby?: string\n  /**\n   * Provide valuable, actionable feedback.\n   *\n   * @since 4.2.0\n   */\n  feedback?: ReactNode | string\n  /**\n   * Provide valuable, actionable feedback.\n   *\n   * @since 4.2.0\n   */\n  feedbackInvalid?: ReactNode | string\n  /**\n   * Provide valuable, actionable invalid feedback when using standard HTML form validation which applied two CSS pseudo-classes, `:invalid` and `:valid`.\n   *\n   * @since 4.2.0\n   */\n  feedbackValid?: ReactNode | string\n  /**\n   * Provide valuable, actionable valid feedback when using standard HTML form validation which applied two CSS pseudo-classes, `:invalid` and `:valid`.\n   *\n   * @since 4.2.0\n   */\n  floatingLabel?: ReactNode | string\n  /**\n   * Set component validation state to invalid.\n   */\n  invalid?: boolean\n  /**\n   * Display validation feedback in a styled tooltip.\n   *\n   * @since 4.2.0\n   */\n  tooltipFeedback?: boolean\n  /**\n   * Set component validation state to valid.\n   */\n  valid?: boolean\n}\n\nexport const CFormControlValidation: FC<CFormControlValidationProps> = ({\n  describedby,\n  feedback,\n  feedbackInvalid,\n  feedbackValid,\n  invalid,\n  tooltipFeedback,\n  valid,\n}) => {\n  return (\n    <>\n      {feedback && (valid || invalid) && (\n        <CFormFeedback\n          {...(invalid && { id: describedby })}\n          invalid={invalid}\n          tooltip={tooltipFeedback}\n          valid={valid}\n        >\n          {feedback}\n        </CFormFeedback>\n      )}\n      {feedbackInvalid && (\n        <CFormFeedback id={describedby} invalid tooltip={tooltipFeedback}>\n          {feedbackInvalid}\n        </CFormFeedback>\n      )}\n      {feedbackValid && (\n        <CFormFeedback valid tooltip={tooltipFeedback}>\n          {feedbackValid}\n        </CFormFeedback>\n      )}\n    </>\n  )\n}\n\nCFormControlValidation.propTypes = {\n  describedby: PropTypes.string,\n  feedback: PropTypes.oneOfType([PropTypes.node, PropTypes.string]),\n  feedbackValid: PropTypes.oneOfType([PropTypes.node, PropTypes.string]),\n  feedbackInvalid: PropTypes.oneOfType([PropTypes.node, PropTypes.string]),\n  invalid: PropTypes.bool,\n  tooltipFeedback: PropTypes.bool,\n  valid: PropTypes.bool,\n}\n\nCFormControlValidation.displayName = 'CFormControlValidation'\n","import React, { ElementType, forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { PolymorphicRefForwardingComponent } from '../../helpers'\n\nexport interface CFormTextProps extends HTMLAttributes<HTMLDivElement | HTMLSpanElement> {\n  /**\n   * Component used for the root node. Either a string to use a HTML element or a component.\n   */\n  as?: ElementType\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n}\n\nexport const CFormText: PolymorphicRefForwardingComponent<'div', CFormTextProps> = forwardRef<\n  HTMLDivElement | HTMLSpanElement,\n  CFormTextProps\n>(({ children, as: Component = 'div', className, ...rest }, ref) => {\n  return (\n    <Component className={classNames('form-text', className)} {...rest} ref={ref}>\n      {children}\n    </Component>\n  )\n})\n\nCFormText.propTypes = {\n  as: PropTypes.elementType,\n  children: PropTypes.node,\n  className: PropTypes.string,\n}\n\nCFormText.displayName = 'CFormText'\n","import React, { FC, ReactNode } from 'react'\nimport PropTypes from 'prop-types'\n\nimport { CFormControlValidation, CFormControlValidationProps } from './CFormControlValidation'\nimport { CFormFloating } from './CFormFloating'\nimport { CFormLabel } from './CFormLabel'\nimport { CFormText } from './CFormText'\n\nexport interface CFormControlWrapperProps extends CFormControlValidationProps {\n  /**\n   * @ignore\n   */\n  children?: ReactNode\n  /**\n   * A string of all className you want applied to the floating label wrapper.\n   *\n   * @since 4.5.0\n   */\n  floatingClassName?: string\n  /**\n   * Provide valuable, actionable valid feedback when using standard HTML form validation which applied two CSS pseudo-classes, `:invalid` and `:valid`.\n   *\n   * @since 4.2.0\n   */\n  floatingLabel?: ReactNode | string\n  /**\n   * @ignore\n   */\n  id?: string\n  /**\n   * Add a caption for a component.\n   *\n   * @since 4.2.0\n   */\n  label?: ReactNode | string\n  /**\n   * Add helper text to the component.\n   *\n   * @since 4.2.0\n   */\n  text?: ReactNode | string\n}\n\nexport const CFormControlWrapper: FC<CFormControlWrapperProps> = ({\n  children,\n  describedby,\n  feedback,\n  feedbackInvalid,\n  feedbackValid,\n  floatingClassName,\n  floatingLabel,\n  id,\n  invalid,\n  label,\n  text,\n  tooltipFeedback,\n  valid,\n}) => {\n  const FormControlValidation = () => (\n    <CFormControlValidation\n      describedby={describedby}\n      feedback={feedback}\n      feedbackInvalid={feedbackInvalid}\n      feedbackValid={feedbackValid}\n      floatingLabel={floatingLabel}\n      invalid={invalid}\n      tooltipFeedback={tooltipFeedback}\n      valid={valid}\n    />\n  )\n  return floatingLabel ? (\n    <CFormFloating className={floatingClassName}>\n      {children}\n      <CFormLabel htmlFor={id}>{label || floatingLabel}</CFormLabel>\n      {text && <CFormText id={describedby}>{text}</CFormText>}\n      <FormControlValidation />\n    </CFormFloating>\n  ) : (\n    <>\n      {label && <CFormLabel htmlFor={id}>{label}</CFormLabel>}\n      {children}\n      {text && <CFormText id={describedby}>{text}</CFormText>}\n      <FormControlValidation />\n    </>\n  )\n}\n\nCFormControlWrapper.propTypes = {\n  children: PropTypes.node,\n  floatingClassName: PropTypes.string,\n  floatingLabel: PropTypes.oneOfType([PropTypes.node, PropTypes.string]),\n  label: PropTypes.oneOfType([PropTypes.node, PropTypes.string]),\n  text: PropTypes.oneOfType([PropTypes.node, PropTypes.string]),\n  ...CFormControlValidation.propTypes,\n}\n\nCFormControlWrapper.displayName = 'CFormControlWrapper'\n","import React, { ElementType, forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { PolymorphicRefForwardingComponent } from '../../helpers'\n\nexport interface CFormFeedbackProps extends HTMLAttributes<HTMLDivElement | HTMLSpanElement> {\n  /**\n   * Component used for the root node. Either a string to use a HTML element or a component.\n   */\n  as?: ElementType\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n\n  /**\n   * Method called immediately after the `value` prop changes.\n   */\n  invalid?: boolean\n  /**\n   * If your form layout allows it, you can display validation feedback in a styled tooltip.\n   */\n  tooltip?: boolean\n  /**\n   * Set component validation state to valid.\n   */\n  valid?: boolean\n}\n\nexport const CFormFeedback: PolymorphicRefForwardingComponent<'div', CFormFeedbackProps> =\n  forwardRef<HTMLDivElement | HTMLSpanElement, CFormFeedbackProps>(\n    ({ children, as: Component = 'div', className, invalid, tooltip, valid, ...rest }, ref) => {\n      return (\n        <Component\n          className={classNames(\n            {\n              [`invalid-${tooltip ? 'tooltip' : 'feedback'}`]: invalid,\n              [`valid-${tooltip ? 'tooltip' : 'feedback'}`]: valid,\n            },\n            className,\n          )}\n          {...rest}\n          ref={ref}\n        >\n          {children}\n        </Component>\n      )\n    },\n  )\n\nCFormFeedback.propTypes = {\n  as: PropTypes.elementType,\n  children: PropTypes.node,\n  className: PropTypes.string,\n  invalid: PropTypes.bool,\n  tooltip: PropTypes.bool,\n  valid: PropTypes.bool,\n}\n\nCFormFeedback.displayName = 'CFormFeedback'\n","import React, { forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nexport interface CFormFloatingProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n}\n\nexport const CFormFloating = forwardRef<HTMLDivElement, CFormFloatingProps>(\n  ({ children, className, ...rest }, ref) => {\n    return (\n      <div className={classNames('form-floating', className)} {...rest} ref={ref}>\n        {children}\n      </div>\n    )\n  },\n)\n\nCFormFloating.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n}\n\nCFormFloating.displayName = 'CFormFloating'\n","import React, {\n  ChangeEventHandler,\n  forwardRef,\n  InputHTMLAttributes,\n  useEffect,\n  useState,\n} from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { CFormControlWrapper, CFormControlWrapperProps } from './CFormControlWrapper'\n\nexport interface CFormInputProps\n  extends CFormControlWrapperProps,\n    Omit<InputHTMLAttributes<HTMLInputElement>, 'size'> {\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * Delay onChange event while typing. If set to true onChange event will be delayed 500ms, you can also provide the number of milliseconds you want to delay the onChange event.\n   */\n  delay?: boolean | number\n  /**\n   * Toggle the disabled state for the component.\n   */\n  disabled?: boolean\n  /**\n   * Method called immediately after the `value` prop changes.\n   */\n  onChange?: ChangeEventHandler<HTMLInputElement>\n  /**\n   * Render the component styled as plain text. Removes the default form field styling and preserve the correct margin and padding. Recommend to use only along side `readonly`.\n   */\n  plainText?: boolean\n  /**\n   * Toggle the readonly state for the component.\n   */\n  readOnly?: boolean\n  /**\n   * Size the component small or large.\n   */\n  size?: 'sm' | 'lg'\n  /**\n   * Specifies the type of component.\n   */\n  type?: 'color' | 'file' | 'text' | string\n  /**\n   * The `value` attribute of component.\n   *\n   * @controllable onChange\n   * */\n  value?: string | string[] | number\n}\n\nexport const CFormInput = forwardRef<HTMLInputElement, CFormInputProps>(\n  (\n    {\n      children,\n      className,\n      delay = false,\n      feedback,\n      feedbackInvalid,\n      feedbackValid,\n      floatingClassName,\n      floatingLabel,\n      id,\n      invalid,\n      label,\n      onChange,\n      plainText,\n      size,\n      text,\n      tooltipFeedback,\n      type = 'text',\n      valid,\n      ...rest\n    },\n    ref,\n  ) => {\n    const [value, setValue] = useState<React.ChangeEvent<HTMLInputElement>>()\n\n    useEffect(() => {\n      const timeOutId = setTimeout(\n        () => value && onChange && onChange(value),\n        typeof delay === 'number' ? delay : 500,\n      )\n\n      return () => clearTimeout(timeOutId)\n    }, [value])\n\n    return (\n      <CFormControlWrapper\n        describedby={rest['aria-describedby']}\n        feedback={feedback}\n        feedbackInvalid={feedbackInvalid}\n        feedbackValid={feedbackValid}\n        floatingClassName={floatingClassName}\n        floatingLabel={floatingLabel}\n        id={id}\n        invalid={invalid}\n        label={label}\n        text={text}\n        tooltipFeedback={tooltipFeedback}\n        valid={valid}\n      >\n        <input\n          className={classNames(\n            plainText ? 'form-control-plaintext' : 'form-control',\n            {\n              [`form-control-${size}`]: size,\n              'form-control-color': type === 'color',\n              'is-invalid': invalid,\n              'is-valid': valid,\n            },\n            className,\n          )}\n          id={id}\n          type={type}\n          onChange={(event) => (delay ? setValue(event) : onChange && onChange(event))}\n          {...rest}\n          ref={ref}\n        >\n          {children}\n        </input>\n      </CFormControlWrapper>\n    )\n  },\n)\n\nCFormInput.propTypes = {\n  className: PropTypes.string,\n  id: PropTypes.string,\n  delay: PropTypes.oneOfType([PropTypes.bool, PropTypes.number]),\n  plainText: PropTypes.bool,\n  size: PropTypes.oneOf(['sm', 'lg']),\n  type: PropTypes.oneOfType([PropTypes.oneOf(['color', 'file', 'text']), PropTypes.string]),\n  ...CFormControlWrapper.propTypes,\n}\n\nCFormInput.displayName = 'CFormInput'\n","import React, { ChangeEventHandler, forwardRef, InputHTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { CFormControlWrapper, CFormControlWrapperProps } from './CFormControlWrapper'\n\ntype Option = {\n  disabled?: boolean\n  label?: string\n  value?: string\n}\n\nexport interface CFormSelectProps\n  extends CFormControlWrapperProps,\n    Omit<InputHTMLAttributes<HTMLSelectElement>, 'size'> {\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * Specifies the number of visible options in a drop-down list.\n   */\n  htmlSize?: number\n  /**\n   * Method called immediately after the `value` prop changes.\n   */\n  onChange?: ChangeEventHandler<HTMLSelectElement>\n  /**\n   * Options list of the select component. Available keys: `label`, `value`, `disabled`.\n   * Examples:\n   * - `options={[{ value: 'js', label: 'JavaScript' }, { value: 'html', label: 'HTML', disabled: true }]}`\n   * - `options={['js', 'html']}`\n   */\n  options?: Option[] | string[]\n  /**\n   * Size the component small or large.\n   */\n  size?: 'sm' | 'lg'\n  /**\n   * The `value` attribute of component.\n   *\n   * @controllable onChange\n   */\n  value?: string | string[] | number\n}\n\nexport const CFormSelect = forwardRef<HTMLSelectElement, CFormSelectProps>(\n  (\n    {\n      children,\n      className,\n      feedback,\n      feedbackInvalid,\n      feedbackValid,\n      floatingClassName,\n      floatingLabel,\n      htmlSize,\n      id,\n      invalid,\n      label,\n      options,\n      size,\n      text,\n      tooltipFeedback,\n      valid,\n      ...rest\n    },\n    ref,\n  ) => {\n    return (\n      <CFormControlWrapper\n        describedby={rest['aria-describedby']}\n        feedback={feedback}\n        feedbackInvalid={feedbackInvalid}\n        feedbackValid={feedbackValid}\n        floatingClassName={floatingClassName}\n        floatingLabel={floatingLabel}\n        id={id}\n        invalid={invalid}\n        label={label}\n        text={text}\n        tooltipFeedback={tooltipFeedback}\n        valid={valid}\n      >\n        <select\n          id={id}\n          className={classNames(\n            'form-select',\n            {\n              [`form-select-${size}`]: size,\n              'is-invalid': invalid,\n              'is-valid': valid,\n            },\n            className,\n          )}\n          size={htmlSize}\n          {...rest}\n          ref={ref}\n        >\n          {options\n            ? options.map((option, index) => {\n                return (\n                  <option\n                    {...(typeof option === 'object' &&\n                      option.disabled && { disabled: option.disabled })}\n                    {...(typeof option === 'object' &&\n                      option.value !== undefined && { value: option.value })}\n                    key={index}\n                  >\n                    {typeof option === 'string' ? option : option.label}\n                  </option>\n                )\n              })\n            : children}\n        </select>\n      </CFormControlWrapper>\n    )\n  },\n)\n\nCFormSelect.propTypes = {\n  className: PropTypes.string,\n  htmlSize: PropTypes.number,\n  options: PropTypes.array,\n  ...CFormControlWrapper.propTypes,\n}\n\nCFormSelect.displayName = 'CFormSelect'\n","import React, { ChangeEventHandler, forwardRef, TextareaHTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { CFormControlWrapper, CFormControlWrapperProps } from './CFormControlWrapper'\n\nexport interface CFormTextareaProps\n  extends CFormControlWrapperProps,\n    TextareaHTMLAttributes<HTMLTextAreaElement> {\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * Toggle the disabled state for the component.\n   */\n  disabled?: boolean\n  /**\n   * Method called immediately after the `value` prop changes.\n   */\n  onChange?: ChangeEventHandler<HTMLTextAreaElement>\n  /**\n   * Render the component styled as plain text. Removes the default form field styling and preserve the correct margin and padding. Recommend to use only along side `readonly`.\n   */\n  plainText?: boolean\n  /**\n   * Toggle the readonly state for the component.\n   */\n  readOnly?: boolean\n  /**\n   * The `value` attribute of component.\n   *\n   * @controllable onChange\n   * */\n  value?: string | string[] | number\n}\n\nexport const CFormTextarea = forwardRef<HTMLTextAreaElement, CFormTextareaProps>(\n  (\n    {\n      children,\n      className,\n      feedback,\n      feedbackInvalid,\n      feedbackValid,\n      floatingClassName,\n      floatingLabel,\n      id,\n      invalid,\n      label,\n      plainText,\n      text,\n      tooltipFeedback,\n      valid,\n      ...rest\n    },\n    ref,\n  ) => {\n    return (\n      <CFormControlWrapper\n        describedby={rest['aria-describedby']}\n        feedback={feedback}\n        feedbackInvalid={feedbackInvalid}\n        feedbackValid={feedbackValid}\n        floatingClassName={floatingClassName}\n        floatingLabel={floatingLabel}\n        id={id}\n        invalid={invalid}\n        label={label}\n        text={text}\n        tooltipFeedback={tooltipFeedback}\n        valid={valid}\n      >\n        <textarea\n          className={classNames(\n            plainText ? 'form-control-plaintext' : 'form-control',\n            {\n              'is-invalid': invalid,\n              'is-valid': valid,\n            },\n            className,\n          )}\n          id={id}\n          {...rest}\n          ref={ref}\n        >\n          {children}\n        </textarea>\n      </CFormControlWrapper>\n    )\n  },\n)\n\nCFormTextarea.propTypes = {\n  className: PropTypes.string,\n  id: PropTypes.string,\n  plainText: PropTypes.bool,\n  ...CFormControlWrapper.propTypes,\n}\n\nCFormTextarea.displayName = 'CFormTextarea'\n","import React, { forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\ntype Span = 'auto' | number | string | boolean | null\n\ntype BPObject = {\n  span?: Span\n  offset?: number | string | null\n  order?: 'first' | 'last' | number | string | null\n}\n\ntype Col = Span | BPObject\n\nexport interface CColProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n  /**\n   * The number of columns/offset/order on extra small devices (<576px).\n   *\n   * @type { 'auto' | number | string | boolean | { span: 'auto' | number | string | boolean } | { offset: number | string } | { order: 'first' | 'last' | number | string }}\n   */\n  xs?: Col\n  /**\n   * The number of columns/offset/order on small devices (<768px).\n   *\n   * @type { 'auto' | number | string | boolean | { span: 'auto' | number | string | boolean } | { offset: number | string } | { order: 'first' | 'last' | number | string }}\n   */\n  sm?: Col\n  /**\n   * The number of columns/offset/order on medium devices (<992px).\n   *\n   * @type { 'auto' | number | string | boolean | { span: 'auto' | number | string | boolean } | { offset: number | string } | { order: 'first' | 'last' | number | string }}\n   */\n  md?: Col\n  /**\n   * The number of columns/offset/order on large devices (<1200px).\n   *\n   * @type { 'auto' | number | string | boolean | { span: 'auto' | number | string | boolean } | { offset: number | string } | { order: 'first' | 'last' | number | string }}\n   */\n  lg?: Col\n  /**\n   * The number of columns/offset/order on X-Large devices (<1400px).\n   *\n   * @type { 'auto' | number | string | boolean | { span: 'auto' | number | string | boolean } | { offset: number | string } | { order: 'first' | 'last' | number | string }}\n   */\n  xl?: Col\n  /**\n   * The number of columns/offset/order on XX-Large devices (≥1400px).\n   *\n   * @type { 'auto' | number | string | boolean | { span: 'auto' | number | string | boolean } | { offset: number | string } | { order: 'first' | 'last' | number | string }}\n   */\n  xxl?: Col\n}\n\nconst BREAKPOINTS = [\n  'xxl' as const,\n  'xl' as const,\n  'lg' as const,\n  'md' as const,\n  'sm' as const,\n  'xs' as const,\n]\n\nexport const CCol = forwardRef<HTMLDivElement, CColProps>(\n  ({ children, className, ...rest }, ref) => {\n    const repsonsiveClassNames: string[] = []\n\n    BREAKPOINTS.forEach((bp) => {\n      const breakpoint = rest[bp]\n      delete rest[bp]\n\n      const infix = bp === 'xs' ? '' : `-${bp}`\n\n      if (typeof breakpoint === 'number' || typeof breakpoint === 'string') {\n        repsonsiveClassNames.push(`col${infix}-${breakpoint}`)\n      }\n\n      if (typeof breakpoint === 'boolean') {\n        repsonsiveClassNames.push(`col${infix}`)\n      }\n\n      if (breakpoint && typeof breakpoint === 'object') {\n        if (typeof breakpoint.span === 'number' || typeof breakpoint.span === 'string') {\n          repsonsiveClassNames.push(`col${infix}-${breakpoint.span}`)\n        }\n\n        if (typeof breakpoint.span === 'boolean') {\n          repsonsiveClassNames.push(`col${infix}`)\n        }\n\n        if (typeof breakpoint.order === 'number' || typeof breakpoint.order === 'string') {\n          repsonsiveClassNames.push(`order${infix}-${breakpoint.order}`)\n        }\n\n        if (typeof breakpoint.offset === 'number') {\n          repsonsiveClassNames.push(`offset${infix}-${breakpoint.offset}`)\n        }\n      }\n    })\n\n    return (\n      <div\n        className={classNames(\n          repsonsiveClassNames.length > 0 ? repsonsiveClassNames : 'col',\n          className,\n        )}\n        {...rest}\n        ref={ref}\n      >\n        {children}\n      </div>\n    )\n  },\n)\n\nconst span = PropTypes.oneOfType([\n  PropTypes.bool,\n  PropTypes.number,\n  PropTypes.string,\n  PropTypes.oneOf(['auto']),\n])\n\nconst col = PropTypes.oneOfType([\n  span,\n  PropTypes.shape({\n    span: span,\n    offset: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n    order: PropTypes.oneOfType([\n      PropTypes.oneOf(['first', 'last']),\n      PropTypes.number,\n      PropTypes.string,\n    ]),\n  }),\n])\n\nCCol.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  xs: col,\n  sm: col,\n  md: col,\n  lg: col,\n  xl: col,\n  xxl: col,\n}\n\nCCol.displayName = 'CCol'\n","import React, { forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nexport type BPObject = {\n  cols?: 'auto' | number | string | null\n  gutter?: number | string | null\n  gutterX?: number | string | null\n  gutterY?: number | string | null\n}\n\nexport interface CRowProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n  /**\n   * The number of columns/offset/order on extra small devices (<576px).\n   *\n   * @type {{ cols: 'auto' | number | string } | { gutter: number | string } | { gutterX: number | string } | { gutterY: number | string }}\n   */\n  xs?: BPObject\n  /**\n   * The number of columns/offset/order on small devices (<768px).\n   *\n   * @type {{ cols: 'auto' | number | string } | { gutter: number | string } | { gutterX: number | string } | { gutterY: number | string }}\n   */\n  sm?: BPObject\n  /**\n   * The number of columns/offset/order on medium devices (<992px).\n   *\n   * @type {{ cols: 'auto' | number | string } | { gutter: number | string } | { gutterX: number | string } | { gutterY: number | string }}\n   */\n  md?: BPObject\n  /**\n   * The number of columns/offset/order on large devices (<1200px).\n   *\n   * @type {{ cols: 'auto' | number | string } | { gutter: number | string } | { gutterX: number | string } | { gutterY: number | string }}\n   */\n  lg?: BPObject\n  /**\n   * The number of columns/offset/order on X-Large devices (<1400px).\n   *\n   * @type {{ cols: 'auto' | number | string } | { gutter: number | string } | { gutterX: number | string } | { gutterY: number | string }}\n   */\n  xl?: BPObject\n  /**\n   * The number of columns/offset/order on XX-Large devices (≥1400px).\n   *\n   * @type {{ cols: 'auto' | number | string } | { gutter: number | string } | { gutterX: number | string } | { gutterY: number | string }}\n   */\n  xxl?: BPObject\n}\n\nconst BREAKPOINTS = [\n  'xxl' as const,\n  'xl' as const,\n  'lg' as const,\n  'md' as const,\n  'sm' as const,\n  'xs' as const,\n]\n\nexport const CRow = forwardRef<HTMLDivElement, CRowProps>(\n  ({ children, className, ...rest }, ref) => {\n    const repsonsiveClassNames: string[] = []\n\n    BREAKPOINTS.forEach((bp) => {\n      const breakpoint = rest[bp]\n      delete rest[bp]\n\n      const infix = bp === 'xs' ? '' : `-${bp}`\n\n      if (typeof breakpoint === 'object') {\n        if (breakpoint.cols) {\n          repsonsiveClassNames.push(`row-cols${infix}-${breakpoint.cols}`)\n        }\n\n        if (typeof breakpoint.gutter === 'number') {\n          repsonsiveClassNames.push(`g${infix}-${breakpoint.gutter}`)\n        }\n\n        if (typeof breakpoint.gutterX === 'number') {\n          repsonsiveClassNames.push(`gx${infix}-${breakpoint.gutterX}`)\n        }\n\n        if (typeof breakpoint.gutterY === 'number') {\n          repsonsiveClassNames.push(`gy${infix}-${breakpoint.gutterY}`)\n        }\n      }\n    })\n\n    return (\n      <div className={classNames('row', repsonsiveClassNames, className)} ref={ref}>\n        {children}\n      </div>\n    )\n  },\n)\n\nconst bp = PropTypes.shape({\n  cols: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.number, PropTypes.string]),\n  gutter: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  gutterX: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  gutterY: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n})\n\nCRow.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  xs: bp,\n  sm: bp,\n  md: bp,\n  lg: bp,\n  xl: bp,\n  xxl: bp,\n}\n\nCRow.displayName = 'CRow'\n"],"names":["AddProduct","navigate","useNavigate","manuDesc","setManuDesc","useState","distItemNum","setDistItemNum","name","setName","manuItemNum","setManuItemNum","productType","setProductType","caseDime","setCaseDime","servingSize","setServingSize","shelfLifeManu","setShelfLifeManu","storageMethod","setStorageMethod","tips","setTips","ingreList","setIngreList","servicePerCont","setServicePerCont","serviceSizeQty","setServiceSizeQty","serviceSizeWt","setServiceSizeWt","shelfLife","setshelfLife","distributerId","setDistributerId","manuMarkStmt","setManuMarkStmt","caseCount","setCaseCount","masterPack","setMasterPack","grossCaseWeight","setGrossCaseWeight","masterUnitSize","setMasterUnitSize","gtinNum","setGtinNum","calories","setCalories","cholestrol","setCholestrol","totalFat","setTotalFat","saturatedFat","setSaturatedFat","transFat","setTransFat","sodium","setSodium","totalCarboht","setTotalCarboht","dietaryFiber","setDietaryFiber","totalSugar","setTotalSugar","addedSugar","setAddedSugar","protein","setProtein","vitD","setVitD","calcuim","setCalcuim","iron","setIron","potassium","setPotassium","cnLabel","setCnLabel","isActive","setIsActive","validationErrors","setValidationErrors","isSubmitting","setIsSubmitting","formData","setFormData","imageType","logo","logoFile","base64Image","clients","setClients","handleInputChange","async","index","event","value","files","target","updatedFormData","file","URL","createObjectURL","reader","FileReader","readAsDataURL","onloadend","result","useEffect","axios","get","headers","Authorization","concat","localStorage","getItem","then","response","data","catch","error","console","_jsx","className","children","_jsxs","CContainer","CAlert","color","CForm","onSubmit","e","preventDefault","payload","productImages","map","image","dataToSend","images","JSON","stringify","post","r","toast","addProductAction","CRow","CCol","md","lg","xl","CCard","CCardHeader","CCardBody","CFormInput","type","id","label","onChange","CFormTextarea","CFormSelect","key","companyName","CImage","rounded","thumbnail","width","height","src","CButton","onClick","splice","handleRemoveForm","handleAddForm","locale","xs","placeholder","disabled","forwardRef","_a","ref","_b","dismissible","variant","_c","visible","onClose","rest","__rest","alertRef","useRef","forkedRef","useForkedRef","_d","_visible","setVisible","React","Transition","in","mountOnEnter","nodeRef","onExit","timeout","unmountOnExit","state","__assign","classNames","show","role","CCloseButton","propTypes","PropTypes","colorPropType","isRequired","displayName","textBgColor","textColor","gradientsPropType","as","Component","validated","undefined","CFormControlValidation","describedby","feedback","feedbackInvalid","feedbackValid","invalid","tooltipFeedback","valid","CFormFeedback","tooltip","CFormText","CFormControlWrapper","floatingClassName","floatingLabel","text","FormControlValidation","CFormFloating","CFormLabel","htmlFor","delay","plainText","size","_e","setValue","timeOutId","setTimeout","clearTimeout","htmlSize","options","option","BREAKPOINTS","repsonsiveClassNames","forEach","bp","breakpoint","infix","push","span","order","offset","length","col","sm","xxl","cols","gutter","gutterX","gutterY"],"sourceRoot":""}