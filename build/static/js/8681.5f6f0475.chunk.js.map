{"version":3,"file":"static/js/8681.5f6f0475.chunk.js","mappings":"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","sources":["views/dashboard/Dashboard.js","../node_modules/@coreui/icons/src/brand/cib-facebook.ts","../node_modules/@coreui/icons/src/brand/cib-linkedin.ts","../node_modules/@coreui/icons/src/brand/cib-twitter.ts","../node_modules/@coreui/icons/src/free/cil-arrow-bottom.ts","../node_modules/@coreui/icons/src/free/cil-arrow-top.ts","../node_modules/@coreui/icons/src/free/cil-cart.ts","../node_modules/@coreui/icons/src/free/cil-people.ts","../node_modules/@coreui/icons/src/free/cil-user-female.ts","../node_modules/@coreui/react-pro/src/components/card/CCardSubtitle.tsx","../node_modules/@coreui/react-pro/src/components/card/CCardTitle.tsx","../node_modules/@coreui/react-pro/src/components/table/CTableResponsiveWrapper.tsx","../node_modules/@coreui/react-pro/src/components/table/utils.ts","../node_modules/@coreui/react-pro/src/components/table/CTable.tsx","../node_modules/@coreui/react-pro/src/components/table/CTableBody.tsx","../node_modules/@coreui/react-pro/src/components/table/CTableCaption.tsx","../node_modules/@coreui/react-pro/src/components/table/CTableDataCell.tsx","../node_modules/@coreui/react-pro/src/components/table/CTableFoot.tsx","../node_modules/@coreui/react-pro/src/components/table/CTableHead.tsx","../node_modules/@coreui/react-pro/src/components/table/CTableHeaderCell.tsx","../node_modules/@coreui/react-pro/src/components/table/CTableRow.tsx","../node_modules/@coreui/utils/src/getStyle.ts"],"sourcesContent":["import React, { useEffect, useRef } from 'react'\nimport { useTranslation } from 'react-i18next'\nimport { useNavigate } from 'react-router-dom'\n\nimport {\n  CAvatar,\n  CButton,\n  CCard,\n  CCardBody,\n  CCardSubtitle,\n  CCardTitle,\n  CCol,\n  CDropdown,\n  CDropdownItem,\n  CDropdownMenu,\n  CDropdownToggle,\n  CProgress,\n  CRow,\n  CTable,\n  CTableBody,\n  CTableDataCell,\n  CTableHead,\n  CTableHeaderCell,\n  CTableRow,\n  CWidgetStatsA,\n} from '@coreui/react-pro'\nimport { CChartBar, CChartLine } from '@coreui/react-chartjs'\nimport { getStyle } from '@coreui/utils'\nimport CIcon from '@coreui/icons-react'\nimport {\n  cibGoogle,\n  cibFacebook,\n  cibLinkedin,\n  cifBr,\n  cifEs,\n  cifFr,\n  cifIn,\n  cifPl,\n  cifUs,\n  cibTwitter,\n  cilPeople,\n  cilUser,\n  cilUserFemale,\n  cilArrowBottom,\n  cilCart,\n  cilArrowTop,\n  cilUserPlus,\n  cilOptions,\n} from '@coreui/icons'\n\nimport avatar1 from 'src/assets/images/avatars/1.jpg'\nimport avatar2 from 'src/assets/images/avatars/2.jpg'\nimport avatar3 from 'src/assets/images/avatars/3.jpg'\nimport avatar4 from 'src/assets/images/avatars/4.jpg'\nimport avatar5 from 'src/assets/images/avatars/5.jpg'\nimport avatar6 from 'src/assets/images/avatars/6.jpg'\n\nconst Dashboard = () => {\n  const navigate = useNavigate()\n  const { t } = useTranslation()\n  const chartBartRef = useRef(null)\n  const chartLineRef = useRef(null)\n\n  const mainChartLabel = (date) => {\n    return t('date', {\n      date,\n      formatParams: { date: { month: 'short' } },\n    })\n  }\n\n  useEffect(()=>{\n    if(localStorage.getItem('token') == \"\" || localStorage.getItem('token') == null){\n        navigate(\"/login\");\n    }\n},[])\n\n  useEffect(() => {\n    document.documentElement.addEventListener('ColorSchemeChange', () => {\n      if (chartBartRef.current) {\n        setTimeout(() => {\n          chartBartRef.current.options.scales.x.grid.color = getStyle(\n            '--cui-border-color-translucent',\n          )\n          chartBartRef.current.options.scales.x.ticks.color = getStyle('--cui-body-color')\n          chartBartRef.current.options.scales.y.grid.color = getStyle(\n            '--cui-border-color-translucent',\n          )\n          chartBartRef.current.options.scales.y.ticks.color = getStyle('--cui-body-color')\n          chartBartRef.current.update()\n        })\n      }\n\n      if (chartLineRef.current) {\n        setTimeout(() => {\n          chartLineRef.current.data.datasets[0].pointBackgroundColor = getStyle('--cui-primary')\n          chartLineRef.current.update()\n        })\n      }\n    })\n  }, [chartBartRef, chartLineRef])\n\n  const progressGroupExample1 = [\n    { title: t('monday'), value1: 34, value2: 78 },\n    { title: t('tuesday'), value1: 56, value2: 94 },\n    { title: t('wednesday'), value1: 12, value2: 67 },\n    { title: t('thursday'), value1: 43, value2: 91 },\n    { title: t('friday'), value1: 22, value2: 73 },\n    { title: t('saturday'), value1: 53, value2: 82 },\n    { title: t('sunday'), value1: 9, value2: 69 },\n  ]\n\n  const progressGroupExample2 = [\n    { title: t('male'), icon: cilUser, value: 53 },\n    { title: t('female'), icon: cilUserFemale, value: 43 },\n  ]\n\n  const progressGroupExample3 = [\n    { title: t('organicSearch'), icon: cibGoogle, percent: 56, value: '191,235' },\n    { title: 'Facebook', icon: cibFacebook, percent: 15, value: '51,223' },\n    { title: 'Twitter', icon: cibTwitter, percent: 11, value: '37,564' },\n    { title: 'LinkedIn', icon: cibLinkedin, percent: 8, value: '27,319' },\n  ]\n\n  const tableExampleUsagePeriod = (dateStart, dateEnd) => {\n    const formatParams = { date: { year: 'numeric', month: 'short', day: 'numeric' } }\n    return `${t('date', {\n      date: dateStart,\n      formatParams,\n    })} - ${t('date', {\n      date: dateEnd,\n      formatParams,\n    })}`\n  }\n\n  const tableExample = [\n    {\n      avatar: { src: avatar1, status: 'success' },\n      user: {\n        name: 'Yiorgos Avraamu',\n        new: true,\n        registered: t('date', {\n          date: new Date(2023, 0, 10),\n          formatParams: { date: { year: 'numeric', month: 'short', day: 'numeric' } },\n        }),\n      },\n      country: { name: 'USA', flag: cifUs },\n      usage: {\n        value: 50,\n        period: tableExampleUsagePeriod(new Date(2023, 5, 11), new Date(2023, 6, 10)),\n        color: 'success',\n      },\n      activity: t('relativeTime', { val: -10, range: 'seconds' }),\n    },\n    {\n      avatar: { src: avatar2, status: 'danger' },\n      user: {\n        name: 'Avram Tarasios',\n        new: false,\n        registered: t('date', {\n          date: new Date(2023, 0, 10),\n          formatParams: { date: { year: 'numeric', month: 'short', day: 'numeric' } },\n        }),\n      },\n      country: { name: 'Brazil', flag: cifBr },\n      usage: {\n        value: 22,\n        period: tableExampleUsagePeriod(new Date(2023, 5, 11), new Date(2023, 6, 10)),\n        color: 'info',\n      },\n      activity: t('relativeTime', { val: -5, range: 'minutes' }),\n    },\n    {\n      avatar: { src: avatar3, status: 'warning' },\n      user: {\n        name: 'Quintin Ed',\n        new: true,\n        registered: t('date', {\n          date: new Date(2023, 0, 10),\n          formatParams: { date: { year: 'numeric', month: 'short', day: 'numeric' } },\n        }),\n      },\n      country: { name: 'India', flag: cifIn },\n      usage: {\n        value: 74,\n        period: tableExampleUsagePeriod(new Date(2023, 5, 11), new Date(2023, 6, 10)),\n        color: 'warning',\n      },\n      activity: t('relativeTime', { val: -1, range: 'hours' }),\n    },\n    {\n      avatar: { src: avatar4, status: 'secondary' },\n      user: {\n        name: 'Enéas Kwadwo',\n        new: true,\n        registered: t('date', {\n          date: new Date(2023, 0, 10),\n          formatParams: { date: { year: 'numeric', month: 'short', day: 'numeric' } },\n        }),\n      },\n      country: { name: 'France', flag: cifFr },\n      usage: {\n        value: 98,\n        period: tableExampleUsagePeriod(new Date(2023, 5, 11), new Date(2023, 6, 10)),\n        color: 'danger',\n      },\n      activity: t('relativeTime', { val: -1, range: 'weeks' }),\n    },\n    {\n      avatar: { src: avatar5, status: 'success' },\n      user: {\n        name: 'Agapetus Tadeáš',\n        new: true,\n        registered: t('date', {\n          date: new Date(2023, 0, 10),\n          formatParams: { date: { year: 'numeric', month: 'short', day: 'numeric' } },\n        }),\n      },\n      country: { name: 'Spain', flag: cifEs },\n      usage: {\n        value: 22,\n        period: tableExampleUsagePeriod(new Date(2023, 5, 11), new Date(2023, 6, 10)),\n        color: 'primary',\n      },\n      activity: t('relativeTime', { val: -3, range: 'months' }),\n    },\n    {\n      avatar: { src: avatar6, status: 'danger' },\n      user: {\n        name: 'Friderik Dávid',\n        new: true,\n        registered: t('date', {\n          date: new Date(2023, 0, 10),\n          formatParams: { date: { year: 'numeric', month: 'short', day: 'numeric' } },\n        }),\n      },\n      country: { name: 'Poland', flag: cifPl },\n      usage: {\n        value: 43,\n        period: tableExampleUsagePeriod(new Date(2023, 5, 11), new Date(2023, 6, 10)),\n        color: 'success',\n      },\n      activity: t('relativeTime', { val: -1, range: 'years' }),\n    },\n  ]\n\n  return (\n    <>\n      <CRow>\n        <CCol xl={8}>\n          <CRow>\n            {/*\n            <CCol lg={12}>\n              <CCard className=\"overflow-hidden mb-4\">\n                <CCardBody className=\"p-4\">\n                  <CRow>\n                    <CCol>\n                      <CCardTitle className=\"fs-4 fw-semibold\">{t('sale')}</CCardTitle>\n                    </CCol>\n                    <CCol className=\"text-end text-primary fs-4 fw-semibold\">$613.200</CCol>\n                  </CRow>\n                  <CCardSubtitle className=\"fw-normal text-body-secondary\">\n                    {t('date', {\n                      date: new Date(2023, 0, 1),\n                      formatParams: {\n                        date: {\n                          month: 'long',\n                        },\n                      },\n                    })}{' '}\n                    -{' '}\n                    {t('date', {\n                      date: new Date(2023, 6, 1),\n                      formatParams: {\n                        date: {\n                          year: 'numeric',\n                          month: 'long',\n                        },\n                      },\n                    })}\n                  </CCardSubtitle>\n                </CCardBody>\n                <CChartLine\n                  className=\"mt-3\"\n                  style={{ height: '150px' }}\n                  data={{\n                    labels: [\n                      t('january'),\n                      t('february'),\n                      t('march'),\n                      t('april'),\n                      t('may'),\n                      t('june'),\n                      t('july'),\n                    ],\n                    datasets: [\n                      {\n                        label: 'My First dataset',\n                        backgroundColor: `rgba(${getStyle('--cui-primary-rgb')}, .1)`,\n                        borderColor: getStyle('--cui-primary'),\n                        borderWidth: 3,\n                        data: [78, 81, 80, 45, 34, 22, 40],\n                        fill: true,\n                      },\n                    ],\n                  }}\n                  options={{\n                    plugins: {\n                      legend: {\n                        display: false,\n                      },\n                    },\n                    maintainAspectRatio: false,\n                    scales: {\n                      x: {\n                        display: false,\n                      },\n                      y: {\n                        beginAtZero: true,\n                        display: false,\n                      },\n                    },\n                    elements: {\n                      line: {\n                        borderWidth: 2,\n                        tension: 0.4,\n                      },\n                      point: {\n                        radius: 0,\n                        hitRadius: 10,\n                        hoverRadius: 4,\n                      },\n                    },\n                  }}\n                />\n              </CCard>\n            </CCol> */}\n            <CCol sm={6}>\n              <CCard className=\"mb-4\">\n                <CCardBody>\n                  <div className=\"d-flex justify-content-between\">\n                    <CCardTitle as=\"h6\" className=\"text-body-secondary text-truncate\">\n                      {t('customers')}\n                    </CCardTitle>\n                    <div className=\"bg-primary bg-opacity-25 text-primary rounded p-2 ms-2\">\n                      <CIcon icon={cilPeople} size=\"xl\" />\n                    </div>\n                  </div>\n                  <div className=\"fs-4 fw-semibold pb-3\">44.725</div>\n                  <small className=\"text-danger\">\n                    (-12.4% <CIcon icon={cilArrowBottom} />)\n                  </small>\n                </CCardBody>\n              </CCard>\n            </CCol>\n            <CCol sm={6}>\n              <CCard className=\"mb-4\">\n                <CCardBody>\n                  <div className=\"d-flex justify-content-between\">\n                    <CCardTitle as=\"h6\" className=\"text-body-secondary text-truncate\">\n                      {t('products')}\n                    </CCardTitle>\n                    <div className=\"bg-primary bg-opacity-25 text-primary rounded p-2 ms-2\">\n                      <CIcon icon={cilCart} size=\"xl\" />\n                    </div>\n                  </div>\n                  <div className=\"fs-4 fw-semibold pb-3\">385</div>\n                  <small className=\"text-success\">\n                    (17.2% <CIcon icon={cilArrowTop} />)\n                  </small>\n                </CCardBody>\n              </CCard>\n            </CCol>\n          </CRow>\n        </CCol>\n        {/* <CCol xl={8}>\n          <CCard className=\"mb-4\">\n            <CCardBody className=\"p-4\">\n              <CCardTitle className=\"fs-4 fw-semibold\">{t('traffic')}</CCardTitle>\n              <CCardSubtitle\n                className=\"fw-normal text-body-secondary\"\n                style={{ marginBottom: '40px' }}\n              >\n                {t('date', {\n                  date: new Date(2022, 0, 1),\n                  formatParams: {\n                    date: { year: 'numeric', month: 'long', day: 'numeric' },\n                  },\n                })}{' '}\n                -{' '}\n                {t('date', {\n                  date: new Date(2022, 11, 31),\n                  formatParams: {\n                    date: { year: 'numeric', month: 'long', day: 'numeric' },\n                  },\n                })}\n              </CCardSubtitle>\n              <CChartBar\n                ref={chartBartRef}\n                data={{\n                  labels: [\n                    mainChartLabel(new Date(Date.UTC(2022, 0, 1))),\n                    mainChartLabel(new Date(Date.UTC(2022, 1, 1))),\n                    mainChartLabel(new Date(Date.UTC(2022, 2, 1))),\n                    mainChartLabel(new Date(Date.UTC(2022, 3, 1))),\n                    mainChartLabel(new Date(Date.UTC(2022, 4, 1))),\n                    mainChartLabel(new Date(Date.UTC(2022, 5, 1))),\n                    mainChartLabel(new Date(Date.UTC(2022, 6, 1))),\n                    mainChartLabel(new Date(Date.UTC(2022, 7, 1))),\n                    mainChartLabel(new Date(Date.UTC(2022, 8, 1))),\n                    mainChartLabel(new Date(Date.UTC(2022, 9, 1))),\n                    mainChartLabel(new Date(Date.UTC(2022, 10, 1))),\n                    mainChartLabel(new Date(Date.UTC(2022, 11, 1))),\n                  ],\n                  datasets: [\n                    {\n                      label: 'Users',\n                      backgroundColor: getStyle('--cui-primary'),\n                      borderRadius: 6,\n                      borderSkipped: false,\n                      data: [78, 81, 80, 45, 34, 12, 40, 85, 65, 23, 12, 98, 34, 84, 67, 82],\n                      barPercentage: 0.6,\n                      categoryPercentage: 0.5,\n                    },\n                    {\n                      label: 'New users',\n                      backgroundColor: getStyle('--cui-gray-200'),\n                      borderRadius: 6,\n                      borderSkipped: false,\n                      data: [78, 81, 80, 45, 34, 12, 40, 85, 65, 23, 12, 98, 34, 84, 67, 82],\n                      barPercentage: 0.6,\n                      categoryPercentage: 0.5,\n                    },\n                  ],\n                }}\n                options={{\n                  maintainAspectRatio: false,\n                  plugins: {\n                    legend: {\n                      display: false,\n                    },\n                  },\n                  scales: {\n                    x: {\n                      border: {\n                        display: false,\n                      },\n                      grid: {\n                        color: getStyle('--cui-border-color-translucent'),\n                        display: false,\n                        drawTicks: false,\n                      },\n                      ticks: {\n                        color: getStyle('--cui-body-color'),\n                        font: {\n                          size: 14,\n                        },\n                        padding: 16,\n                      },\n                    },\n                    y: {\n                      beginAtZero: true,\n                      border: {\n                        dash: [2, 4],\n                        display: false,\n                      },\n                      grid: {\n                        color: getStyle('--cui-border-color-translucent'),\n                      },\n                      ticks: {\n                        color: getStyle('--cui-body-color'),\n                        font: {\n                          size: 14,\n                        },\n                        maxTicksLimit: 5,\n                        padding: 16,\n                        stepSize: Math.ceil(100 / 4),\n                      },\n                    },\n                  },\n                }}\n                style={{ height: '300px' }}\n              />\n            </CCardBody>\n          </CCard>\n              </CCol> */}\n      </CRow>\n      <CRow>\n        <CCol xl={12}>\n          <CCard className=\"mb-4\">\n            <CCardBody className=\"p-4\">\n              <CRow>\n                <CCol>\n                  <CCardTitle className=\"fs-4 fw-semibold\">{t('users')}</CCardTitle>\n                  <CCardSubtitle className=\"fw-normal text-body-secondary mb-4\">\n                    {t('recent registered users', {\n                      counter: '1.232.15',\n                    })}\n                  </CCardSubtitle>\n                </CCol>\n                {/*<CCol xs=\"auto\" className=\"ms-auto\">\n                  <CButton color=\"secondary\">\n                    <CIcon icon={cilUserPlus} className=\"me-2\" />\n                    {t('addNewUser')}\n                  </CButton>\n                </CCol> */}\n              </CRow>\n              <CTable align=\"middle\" className=\"mb-0\" hover responsive>\n                <CTableHead className=\"fw-semibold text-body-secondary\">\n                  <CTableRow>\n                    <CTableHeaderCell className=\"text-center\">\n                      <CIcon icon={cilPeople} />\n                    </CTableHeaderCell>\n                    <CTableHeaderCell>{t('user')}</CTableHeaderCell>\n                    <CTableHeaderCell className=\"text-center\">{t('country')}</CTableHeaderCell>\n                    <CTableHeaderCell>{t('usage')}</CTableHeaderCell>\n                    <CTableHeaderCell>{t('activity')}</CTableHeaderCell>\n                  </CTableRow>\n                </CTableHead>\n                <CTableBody>\n                  {tableExample.map((item, index) => (\n                    <CTableRow v-for=\"item in tableItems\" key={index}>\n                      <CTableDataCell className=\"text-center\">\n                        <CAvatar size=\"md\" src={item.avatar.src} status={item.avatar.status} />\n                      </CTableDataCell>\n                      <CTableDataCell>\n                        <div>{item.user.name}</div>\n                        <div className=\"small text-body-secondary text-nowrap\">\n                          <span>{item.user.new ? t('new') : t('recurring')}</span> |{' '}\n                          {t('registered')}\n                          {item.user.registered}\n                        </div>\n                      </CTableDataCell>\n                      <CTableDataCell className=\"text-center\">\n                        <CIcon size=\"xl\" icon={item.country.flag} title={item.country.name} />\n                      </CTableDataCell>\n                      <CTableDataCell>\n                        <div className=\"d-flex justify-content-between align-items-baseline mb-1\">\n                          <div className=\"fw-semibold\">{item.usage.value}%</div>\n                          <div className=\"small text-body-secondary text-nowrap ms-3\">\n                            {item.usage.period}\n                          </div>\n                        </div>\n                        <CProgress\n                          thin\n                          color={`${item.usage.color}-gradient`}\n                          value={item.usage.value}\n                        />\n                      </CTableDataCell>\n                      <CTableDataCell>\n                        <div className=\"small text-body-secondary\">{t('lastLogin')}</div>\n                        <div className=\"fw-semibold text-nowrap\">{item.activity}</div>\n                      </CTableDataCell>\n                    </CTableRow>\n                  ))}\n                </CTableBody>\n              </CTable>\n            </CCardBody>\n          </CCard>\n        </CCol>\n        {/* <CCol xl={3}>\n          <CRow>\n            <CCol md={4} xl={12}>\n              <CWidgetStatsA\n                className=\"mb-4\"\n                color=\"primary-gradient\"\n                value={\n                  <>\n                    26K{' '}\n                    <span className=\"fs-6 fw-normal\">\n                      (-12.4% <CIcon icon={cilArrowBottom} />)\n                    </span>\n                  </>\n                }\n                title={t('users')}\n                action={\n                  <CDropdown alignment=\"end\">\n                    <CDropdownToggle color=\"transparent\" caret={false} className=\"p-0\">\n                      <CIcon icon={cilOptions} className=\"text-white\" />\n                    </CDropdownToggle>\n                    <CDropdownMenu>\n                      <CDropdownItem>{t('action')}</CDropdownItem>\n                      <CDropdownItem>{t('anotherAction')}</CDropdownItem>\n                      <CDropdownItem>{t('somethingElseHere')}</CDropdownItem>\n                      <CDropdownItem disabled>{t('disabledAction')}</CDropdownItem>\n                    </CDropdownMenu>\n                  </CDropdown>\n                }\n                chart={\n                  <CChartLine\n                    className=\"mt-3 mx-3\"\n                    style={{ height: '85px' }}\n                    data={{\n                      labels: [\n                        t('january'),\n                        t('february'),\n                        t('march'),\n                        t('april'),\n                        t('may'),\n                        t('june'),\n                        t('july'),\n                      ],\n                      datasets: [\n                        {\n                          label: 'My First dataset',\n                          backgroundColor: 'transparent',\n                          borderColor: 'rgba(255,255,255,.55)',\n                          pointBackgroundColor: getStyle('--cui-primary'),\n                          data: [65, 59, 84, 84, 51, 55, 40],\n                        },\n                      ],\n                    }}\n                    options={{\n                      plugins: {\n                        legend: {\n                          display: false,\n                        },\n                      },\n                      maintainAspectRatio: false,\n                      scales: {\n                        x: {\n                          border: {\n                            display: false,\n                          },\n                          grid: {\n                            display: false,\n                          },\n                          ticks: {\n                            display: false,\n                          },\n                        },\n                        y: {\n                          min: 30,\n                          max: 89,\n                          display: false,\n                          grid: {\n                            display: false,\n                          },\n                          ticks: {\n                            display: false,\n                          },\n                        },\n                      },\n                      elements: {\n                        line: {\n                          borderWidth: 1,\n                          tension: 0.4,\n                        },\n                        point: {\n                          radius: 4,\n                          hitRadius: 10,\n                          hoverRadius: 4,\n                        },\n                      },\n                    }}\n                  />\n                }\n              />\n            </CCol>\n            <CCol md={4} xl={12}>\n              <CWidgetStatsA\n                className=\"mb-4\"\n                color=\"warning-gradient\"\n                value={\n                  <>\n                    2.49%{' '}\n                    <span className=\"fs-6 fw-normal\">\n                      (84.7% <CIcon icon={cilArrowTop} />)\n                    </span>\n                  </>\n                }\n                title={t('conversionRate')}\n                action={\n                  <CDropdown alignment=\"end\">\n                    <CDropdownToggle color=\"transparent\" caret={false} className=\"p-0\">\n                      <CIcon icon={cilOptions} className=\"text-white\" />\n                    </CDropdownToggle>\n                    <CDropdownMenu>\n                      <CDropdownItem>{t('action')}</CDropdownItem>\n                      <CDropdownItem>{t('anotherAction')}</CDropdownItem>\n                      <CDropdownItem>{t('somethingElseHere')}</CDropdownItem>\n                      <CDropdownItem disabled>{t('disabledAction')}</CDropdownItem>\n                    </CDropdownMenu>\n                  </CDropdown>\n                }\n                chart={\n                  <CChartLine\n                    className=\"mt-3\"\n                    style={{ height: '85px' }}\n                    data={{\n                      labels: [\n                        t('january'),\n                        t('february'),\n                        t('march'),\n                        t('april'),\n                        t('may'),\n                        t('june'),\n                        t('july'),\n                      ],\n                      datasets: [\n                        {\n                          label: 'My First dataset',\n                          backgroundColor: 'rgba(255,255,255,.2)',\n                          borderColor: 'rgba(255,255,255,.55)',\n                          data: [78, 81, 80, 45, 34, 12, 40],\n                          fill: true,\n                        },\n                      ],\n                    }}\n                    options={{\n                      plugins: {\n                        legend: {\n                          display: false,\n                        },\n                      },\n                      maintainAspectRatio: false,\n                      scales: {\n                        x: {\n                          display: false,\n                        },\n                        y: {\n                          display: false,\n                        },\n                      },\n                      elements: {\n                        line: {\n                          borderWidth: 2,\n                          tension: 0.4,\n                        },\n                        point: {\n                          radius: 0,\n                          hitRadius: 10,\n                          hoverRadius: 4,\n                        },\n                      },\n                    }}\n                  />\n                }\n              />\n            </CCol>\n            <CCol md={4} xl={12}>\n              <CWidgetStatsA\n                className=\"mb-4\"\n                color=\"danger-gradient\"\n                value={\n                  <>\n                    44K{' '}\n                    <span className=\"fs-6 fw-normal\">\n                      (-23.6% <CIcon icon={cilArrowBottom} />)\n                    </span>\n                  </>\n                }\n                title={t('sessions')}\n                action={\n                  <CDropdown alignment=\"end\">\n                    <CDropdownToggle color=\"transparent\" caret={false} className=\"p-0\">\n                      <CIcon icon={cilOptions} className=\"text-white\" />\n                    </CDropdownToggle>\n                    <CDropdownMenu>\n                      <CDropdownItem>{t('action')}</CDropdownItem>\n                      <CDropdownItem>{t('anotherAction')}</CDropdownItem>\n                      <CDropdownItem>{t('somethingElseHere')}</CDropdownItem>\n                      <CDropdownItem disabled>{t('disabledAction')}</CDropdownItem>\n                    </CDropdownMenu>\n                  </CDropdown>\n                }\n                chart={\n                  <CChartBar\n                    className=\"mt-3 mx-3\"\n                    style={{ height: '85px' }}\n                    data={{\n                      labels: [\n                        t('january'),\n                        t('february'),\n                        t('march'),\n                        t('april'),\n                        t('may'),\n                        t('june'),\n                        t('july'),\n                        t('august'),\n                        t('september'),\n                        t('october'),\n                        t('november'),\n                        t('december'),\n                        t('january'),\n                        t('february'),\n                        t('march'),\n                        t('april'),\n                      ],\n                      datasets: [\n                        {\n                          label: 'My First dataset',\n                          backgroundColor: 'rgba(255,255,255,.2)',\n                          borderColor: 'rgba(255,255,255,.55)',\n                          data: [78, 81, 80, 45, 34, 12, 40, 85, 65, 23, 12, 98, 34, 84, 67, 82],\n                          barPercentage: 0.6,\n                        },\n                      ],\n                    }}\n                    options={{\n                      maintainAspectRatio: false,\n                      plugins: {\n                        legend: {\n                          display: false,\n                        },\n                      },\n                      scales: {\n                        x: {\n                          grid: {\n                            display: false,\n                            drawTicks: false,\n                          },\n                          ticks: {\n                            display: false,\n                          },\n                        },\n                        y: {\n                          border: {\n                            display: false,\n                          },\n                          grid: {\n                            display: false,\n                            drawTicks: false,\n                          },\n                          ticks: {\n                            display: false,\n                          },\n                        },\n                      },\n                    }}\n                  />\n                }\n              />\n            </CCol>\n          </CRow>\n              </CCol> */}\n      </CRow>\n      {/*<CRow>\n        <CCol xs>\n          <CCard className=\"mb-4\">\n            <CCardBody className=\"p-4\">\n              <CCardTitle className=\"fs-4 fw-semibold\">Traffic</CCardTitle>\n              <CCardSubtitle className=\"fw-normal text-body-secondary border-bottom mb-3 pb-4\">\n                Last Week\n              </CCardSubtitle>\n              <CRow>\n                <CCol xs={12} md={6} xl={6}>\n                  <CRow>\n                    <CCol xs={6}>\n                      <div className=\"border-start border-start-4 border-start-info py-1 px-3 mb-3\">\n                        <div className=\"text-body-secondary text-truncate small\">\n                          {t('newClients')}\n                        </div>\n                        <div className=\"fs-5 fw-semibold\">9,123</div>\n                      </div>\n                    </CCol>\n                    <CCol xs={6}>\n                      <div className=\"border-start border-start-4 border-start-danger py-1 px-3 mb-3\">\n                        <div className=\"text-body-secondary text-truncate small\">\n                          {t('recurringClients')}\n                        </div>\n                        <div className=\"fs-5 fw-semibold\">22,643</div>\n                      </div>\n                    </CCol>\n                  </CRow>\n                  <div className=\"border-top mb-4\" />\n                  {progressGroupExample1.map((item, index) => (\n                    <div className=\"progress-group mb-4\" key={index}>\n                      <div className=\"progress-group-prepend\">\n                        <span className=\"text-body-secondary small\">{item.title}</span>\n                      </div>\n                      <div className=\"progress-group-bars\">\n                        <CProgress thin color=\"info-gradient\" value={item.value1} />\n                        <CProgress thin color=\"danger-gradient\" value={item.value2} />\n                      </div>\n                    </div>\n                  ))}\n                </CCol>\n                <CCol xs={12} md={6} xl={6}>\n                  <CRow>\n                    <CCol xs={6}>\n                      <div className=\"border-start border-start-4 border-start-warning py-1 px-3 mb-3\">\n                        <div className=\"text-body-secondary text-truncate small\">\n                          {t('pageviews')}\n                        </div>\n                        <div className=\"fs-5 fw-semibold\">78,623</div>\n                      </div>\n                    </CCol>\n                    <CCol xs={6}>\n                      <div className=\"border-start border-start-4 border-start-success py-1 px-3 mb-3\">\n                        <div className=\"text-body-secondary text-truncate small\">\n                          {t('organic')}\n                        </div>\n                        <div className=\"fs-5 fw-semibold\">49,123</div>\n                      </div>\n                    </CCol>\n                  </CRow>\n                  <div className=\"border-top mb-4\" />\n                  {progressGroupExample2.map((item, index) => (\n                    <div className=\"progress-group mb-4\" key={index}>\n                      <div className=\"progress-group-header\">\n                        <CIcon className=\"me-2\" icon={item.icon} size=\"lg\" />\n                        <span>{item.title}</span>\n                        <span className=\"ms-auto fw-semibold\">{item.value}%</span>\n                      </div>\n                      <div className=\"progress-group-bars\">\n                        <CProgress thin color=\"warning-gradient\" value={item.value} />\n                      </div>\n                    </div>\n                  ))}\n\n                  <div className=\"mb-5\"></div>\n\n                  {progressGroupExample3.map((item, index) => (\n                    <div className=\"progress-group\" key={index}>\n                      <div className=\"progress-group-header\">\n                        <CIcon className=\"me-2\" icon={item.icon} size=\"lg\" />\n                        <span>{item.title}</span>\n                        <span className=\"ms-auto fw-semibold\">\n                          {item.value}{' '}\n                          <span className=\"text-body-secondary small\">({item.percent}%)</span>\n                        </span>\n                      </div>\n                      <div className=\"progress-group-bars\">\n                        <CProgress thin color=\"success-gradient\" value={item.percent} />\n                      </div>\n                    </div>\n                  ))}\n                </CCol>\n              </CRow>\n              <br />\n            </CCardBody>\n          </CCard>\n        </CCol>\n      </CRow> */}\n    </>\n  )\n}\n\nexport default Dashboard\n","export var cibFacebook = [\"32 32\", \"<path d='M32 16c0-8.839-7.167-16-16-16-8.839 0-16 7.161-16 16 0 7.984 5.849 14.604 13.5 15.803v-11.177h-4.063v-4.625h4.063v-3.527c0-4.009 2.385-6.223 6.041-6.223 1.751 0 3.584 0.312 3.584 0.312v3.937h-2.021c-1.984 0-2.604 1.235-2.604 2.5v3h4.437l-0.713 4.625h-3.724v11.177c7.645-1.199 13.5-7.819 13.5-15.803z'/>\"];\n","export var cibLinkedin = [\"32 32\", \"<path d='M27.26 27.271h-4.733v-7.427c0-1.771-0.037-4.047-2.475-4.047-2.468 0-2.844 1.921-2.844 3.916v7.557h-4.739v-15.271h4.552v2.083h0.061c0.636-1.203 2.183-2.468 4.491-2.468 4.801 0 5.692 3.161 5.692 7.271v8.385zM7.115 9.912c-1.527 0-2.751-1.235-2.751-2.756 0-1.516 1.229-2.749 2.751-2.749s2.755 1.233 2.755 2.749c0 1.521-1.233 2.756-2.755 2.756zM9.489 27.271h-4.749v-15.271h4.749zM29.636 0h-27.276c-1.303 0-2.36 1.031-2.36 2.307v27.387c0 1.276 1.057 2.307 2.36 2.307h27.271c1.301 0 2.369-1.031 2.369-2.307v-27.387c0-1.276-1.068-2.307-2.369-2.307z'/>\"];\n","export var cibTwitter = [\"32 32\", \"<path d='M31.937 6.093c-1.177 0.516-2.437 0.871-3.765 1.032 1.355-0.813 2.391-2.099 2.885-3.631-1.271 0.74-2.677 1.276-4.172 1.579-1.192-1.276-2.896-2.079-4.787-2.079-3.625 0-6.563 2.937-6.563 6.557 0 0.521 0.063 1.021 0.172 1.495-5.453-0.255-10.287-2.875-13.52-6.833-0.568 0.964-0.891 2.084-0.891 3.303 0 2.281 1.161 4.281 2.916 5.457-1.073-0.031-2.083-0.328-2.968-0.817v0.079c0 3.181 2.26 5.833 5.26 6.437-0.547 0.145-1.131 0.229-1.724 0.229-0.421 0-0.823-0.041-1.224-0.115 0.844 2.604 3.26 4.5 6.14 4.557-2.239 1.755-5.077 2.801-8.135 2.801-0.521 0-1.041-0.025-1.563-0.088 2.917 1.86 6.36 2.948 10.079 2.948 12.067 0 18.661-9.995 18.661-18.651 0-0.276 0-0.557-0.021-0.839 1.287-0.917 2.401-2.079 3.281-3.396z'/>\"];\n","export var cilArrowBottom = [\"512 512\", \"<polygon fill='var(--ci-primary-color, currentColor)' points='367.997 338.75 271.999 434.747 271.999 17.503 239.999 17.503 239.999 434.745 144.003 338.75 121.376 361.377 256 496 390.624 361.377 367.997 338.75' class='ci-primary'/>\"];\n","export var cilArrowTop = [\"512 512\", \"<polygon fill='var(--ci-primary-color, currentColor)' points='390.624 150.625 256 16 121.376 150.625 144.004 173.252 240.001 77.254 240.001 495.236 272.001 495.236 272.001 77.257 367.996 173.252 390.624 150.625' class='ci-primary'/>\"];\n","export var cilCart = [\"512 512\", \"<polygon fill='var(--ci-primary-color, currentColor)' points='160 96.039 160 128.039 464 128.039 464 191.384 428.5 304.039 149.932 304.039 109.932 16 16 16 16 48 82.068 48 122.068 336.039 451.968 336.039 496 196.306 496 96.039 160 96.039' class='ci-primary'/><path fill='var(--ci-primary-color, currentColor)' d='M176.984,368.344a64.073,64.073,0,0,0-64,64h0a64,64,0,0,0,128,0h0A64.072,64.072,0,0,0,176.984,368.344Zm0,96a32,32,0,1,1,32-32A32.038,32.038,0,0,1,176.984,464.344Z' class='ci-primary'/><path fill='var(--ci-primary-color, currentColor)' d='M400.984,368.344a64.073,64.073,0,0,0-64,64h0a64,64,0,0,0,128,0h0A64.072,64.072,0,0,0,400.984,368.344Zm0,96a32,32,0,1,1,32-32A32.038,32.038,0,0,1,400.984,464.344Z' class='ci-primary'/>\"];\n","export var cilPeople = [\"512 512\", \"<path fill='var(--ci-primary-color, currentColor)' d='M462.541,316.3l-64.344-42.1,24.774-45.418A79.124,79.124,0,0,0,432.093,192V120A103.941,103.941,0,0,0,257.484,43.523L279.232,67a71.989,71.989,0,0,1,120.861,53v72a46.809,46.809,0,0,1-5.215,21.452L355.962,284.8l89.058,58.274a42.16,42.16,0,0,1,19.073,35.421V432h-72v32h104V378.494A74.061,74.061,0,0,0,462.541,316.3Z' class='ci-primary'/><path fill='var(--ci-primary-color, currentColor)' d='M318.541,348.3l-64.343-42.1,24.773-45.418A79.124,79.124,0,0,0,288.093,224V152A104.212,104.212,0,0,0,184.04,47.866C126.723,47.866,80.093,94.581,80.093,152v72a78,78,0,0,0,9.015,36.775l24.908,45.664L50.047,348.3A74.022,74.022,0,0,0,16.5,410.4L16,496H352.093V410.494A74.061,74.061,0,0,0,318.541,348.3ZM320.093,464H48.186l.31-53.506a42.158,42.158,0,0,1,19.073-35.421l88.682-58.029L117.2,245.452A46.838,46.838,0,0,1,112.093,224V152a72,72,0,1,1,144,0v72a46.809,46.809,0,0,1-5.215,21.452L211.962,316.8l89.058,58.274a42.16,42.16,0,0,1,19.073,35.421Z' class='ci-primary'/>\"];\n","export var cilUserFemale = [\"512 512\", \"<path fill='var(--ci-primary-color, currentColor)' d='M403.6,343.656l-72.823-47.334L344.043,272h23.428a48,48,0,0,0,44.119-66.908L361.581,90.57a112.029,112.029,0,0,0-211.162,0L100.41,205.092A48,48,0,0,0,144.529,272h23.428l13.266,24.322L108.4,343.656A79.725,79.725,0,0,0,72,410.732V496H440V410.732A79.727,79.727,0,0,0,403.6,343.656ZM408,464H104V410.732a47.836,47.836,0,0,1,21.841-40.246l97.66-63.479L186.953,240H144.529a16,16,0,0,1-14.72-22.27l50.172-114.9.448-1.143a80.029,80.029,0,0,1,151.142,0l.2.58L382.191,217.73A16,16,0,0,1,367.471,240H325.047L288.5,307.007l97.661,63.479h0A47.836,47.836,0,0,1,408,410.732Z' class='ci-primary'/>\"];\n","import React, { ElementType, forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { PolymorphicRefForwardingComponent } from '../../helpers'\n\nexport interface CCardSubtitleProps extends HTMLAttributes<HTMLHeadingElement> {\n  /**\n   * Component used for the root node. Either a string to use a HTML element or a component.\n   */\n  as?: ElementType\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n}\n\nexport const CCardSubtitle: PolymorphicRefForwardingComponent<'h6', CCardSubtitleProps> =\n  forwardRef<HTMLHeadingElement, CCardSubtitleProps>(\n    ({ children, as: Component = 'h6', className, ...rest }, ref) => {\n      return (\n        <Component className={classNames('card-subtitle', className)} {...rest} ref={ref}>\n          {children}\n        </Component>\n      )\n    },\n  )\n\nCCardSubtitle.propTypes = {\n  as: PropTypes.elementType,\n  children: PropTypes.node,\n  className: PropTypes.string,\n}\n\nCCardSubtitle.displayName = 'CCardSubtitle'\n","import React, { ElementType, forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { PolymorphicRefForwardingComponent } from '../../helpers'\n\nexport interface CCardTitleProps extends HTMLAttributes<HTMLHeadingElement> {\n  /**\n   * Component used for the root node. Either a string to use a HTML element or a component.\n   */\n  as?: ElementType\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n}\n\nexport const CCardTitle: PolymorphicRefForwardingComponent<'h5', CCardTitleProps> = forwardRef<\n  HTMLHeadingElement,\n  CCardTitleProps\n>(({ children, as: Component = 'h5', className, ...rest }, ref) => {\n  return (\n    <Component className={classNames('card-title', className)} {...rest} ref={ref}>\n      {children}\n    </Component>\n  )\n})\n\nCCardTitle.propTypes = {\n  as: PropTypes.elementType,\n  children: PropTypes.node,\n  className: PropTypes.string,\n}\n\nCCardTitle.displayName = 'CCardTitle'\n","import React, { FC, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\n\nexport interface CTableResponsiveWrapperProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * Make any table responsive across all viewports or pick a maximum breakpoint with which to have a responsive table up to.\n   */\n  responsive?: boolean | 'sm' | 'md' | 'lg' | 'xl' | 'xxl'\n}\n\nexport const CTableResponsiveWrapper: FC<CTableResponsiveWrapperProps> = ({\n  children,\n  responsive,\n  ...rest\n}) => {\n  return responsive ? (\n    <div\n      className={\n        typeof responsive === 'boolean' ? 'table-responsive' : `table-responsive-${responsive}`\n      }\n      {...rest}\n    >\n      {children}\n    </div>\n  ) : (\n    <>{children}</>\n  )\n}\n\nCTableResponsiveWrapper.propTypes = {\n  children: PropTypes.node,\n  responsive: PropTypes.oneOfType([\n    PropTypes.bool,\n    PropTypes.oneOf<'sm' | 'md' | 'lg' | 'xl' | 'xxl'>(['sm', 'md', 'lg', 'xl', 'xxl']),\n  ]),\n}\n\nCTableResponsiveWrapper.displayName = 'CTableResponsiveWrapper'\n","import type { Column, Item } from './types'\n\nexport const pretifyName = (name: string) => {\n  return name\n    .replace(/[-_.]/g, ' ')\n    .replace(/ +/g, ' ')\n    .replace(/([a-z0-9])([A-Z])/g, '$1 $2')\n    .split(' ')\n    .map((word) => word.charAt(0).toUpperCase() + word.slice(1))\n    .join(' ')\n}\n\nexport const getColumnLabel = (column: Column | string) =>\n  typeof column === 'object' ? column.label ?? pretifyName(column.key) : pretifyName(column)\n\nexport const getColumnNames = (columns: (string | Column)[] | undefined, items?: Item[]) =>\n  columns\n    ? columns.map((column: Column | string) => {\n        return typeof column === 'object' ? column.key : column\n      })\n    : items && getColumnNamesFromItems(items)\n\nexport const getColumnNamesFromItems = (items: Item[]) =>\n  Object.keys(items[0] || {}).filter((el) => el.charAt(0) !== '_')\n","import React, { forwardRef, TableHTMLAttributes, useMemo } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { CTableHead, CTableHeadProps } from './CTableHead'\nimport { CTableHeaderCell } from './CTableHeaderCell'\nimport { CTableBody } from './CTableBody'\nimport { CTableDataCell } from './CTableDataCell'\nimport { CTableRow } from './CTableRow'\nimport { CTableFoot, CTableFootProps } from './CTableFoot'\nimport { CTableCaption } from './CTableCaption'\nimport { CTableResponsiveWrapper } from './CTableResponsiveWrapper'\n\nimport { colorPropType } from '../../props'\nimport type { Colors } from '../../types'\nimport { getColumnLabel, getColumnNames } from './utils'\nimport type { Column, FooterItem, Item } from './types'\n\nexport interface CTableProps extends Omit<TableHTMLAttributes<HTMLTableElement>, 'align'> {\n  /**\n   * Set the vertical aligment.\n   */\n  align?: 'bottom' | 'middle' | 'top' | string\n  /**\n   * Sets the border color of the component to one of CoreUI’s themed colors.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | string\n   */\n  borderColor?: Colors\n  /**\n   * Add borders on all sides of the table and cells.\n   */\n  bordered?: boolean\n  /**\n   * Remove borders on all sides of the table and cells.\n   */\n  borderless?: boolean\n  /**\n   * Put the caption on the top if you set `caption=\"top\"` of the table or set the text of the table caption.\n   */\n  caption?: 'top' | string\n  /**\n   * Set the text of the table caption and the caption on the top of the table.\n   *\n   * @since 4.3.0\n   */\n  captionTop?: string\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * Prop for table columns configuration. If prop is not defined, table will display columns based on the first item keys, omitting keys that begins with underscore (e.g. '_props')\n   *\n   * In columns prop each array item represents one column. Item might be specified in two ways:\n   * String: each item define column name equal to item value.\n   * Object: item is object with following keys available as column configuration:\n   * - key (required)(String) - define column name equal to item key.\n   * - label (String) - define visible label of column. If not defined, label will be generated automatically based on column name, by converting kebab-case and snake_case to individual words and capitalization of each word.\n   * - _props (Object) - adds classes to all cels in column, ex. `_props: { scope: 'col', className: 'custom-class' }`,\n   * - _style (Object) - adds styles to the column header (useful for defining widths)\n   *\n   * @since 4.3.0\n   */\n  columns?: (string | Column)[]\n  /**\n   * Sets the color context of the component to one of CoreUI’s themed colors.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | string\n   */\n  color?: Colors\n  /**\n   * Array of objects or strings, where each element represents one cell in the table footer.\n   *\n   * Example items:\n   * `['FooterCell', 'FooterCell', 'FooterCell']`\n   * or\n   * `[{ label: 'FooterCell', _props: { color: 'success' }, ...]`\n   *\n   * @since 4.3.0\n   */\n  footer?: (FooterItem | string)[]\n  /**\n   * Enable a hover state on table rows within a `<CTableBody>`.\n   */\n  hover?: boolean\n  /**\n   * Array of objects, where each object represents one item - row in table. Additionally, you can add style classes to each row by passing them by '_props' key and to single cell by '_cellProps'.\n   *\n   * Example item:\n   * `{ name: 'John' , age: 12, _props: { color: 'success' }, _cellProps: { age: { className: 'fw-bold'}}}`\n   *\n   * @since 4.3.0\n   */\n  items?: Item[]\n  /**\n   * Make any table responsive across all viewports or pick a maximum breakpoint with which to have a responsive table up to.\n   */\n  responsive?: boolean | 'sm' | 'md' | 'lg' | 'xl' | 'xxl'\n  /**\n   * Make table more compact by cutting all cell `padding` in half.\n   */\n  small?: boolean\n  /**\n   * Add zebra-striping to any table row within the `<CTableBody>`.\n   */\n  striped?: boolean\n  /**\n   * Add zebra-striping to any table column.\n   *\n   * @since 4.3.0\n   */\n  stripedColumns?: boolean\n  /**\n   * Properties that will be passed to the table footer component.\n   *\n   * @link https://coreui.io/react/docs/components/table/#ctablefoot\n   * @since 4.3.0\n   */\n  tableFootProps?: CTableFootProps\n  /**\n   * Properties that will be passed to the table head component.\n   *\n   * @link https://coreui.io/react/docs/components/table/#ctablehead\n   * @since 4.3.0\n   */\n  tableHeadProps?: CTableHeadProps\n}\n\nexport const CTable = forwardRef<HTMLTableElement, CTableProps>(\n  (\n    {\n      children,\n      align,\n      borderColor,\n      bordered,\n      borderless,\n      caption,\n      captionTop,\n      className,\n      color,\n      columns,\n      footer,\n      hover,\n      items,\n      responsive,\n      small,\n      striped,\n      stripedColumns,\n      tableFootProps,\n      tableHeadProps,\n      ...rest\n    },\n    ref,\n  ) => {\n    const columnNames = useMemo(() => getColumnNames(columns, items), [columns, items])\n\n    return (\n      <CTableResponsiveWrapper responsive={responsive}>\n        <table\n          className={classNames(\n            'table',\n            {\n              [`align-${align}`]: align,\n              [`border-${borderColor}`]: borderColor,\n              [`caption-top`]: captionTop || caption === 'top',\n              'table-bordered': bordered,\n              'table-borderless': borderless,\n              [`table-${color}`]: color,\n              'table-hover': hover,\n              'table-sm': small,\n              'table-striped': striped,\n              'table-striped-columns': stripedColumns,\n            },\n            className,\n          )}\n          {...rest}\n          ref={ref}\n        >\n          {((caption && caption !== 'top') || captionTop) && (\n            <CTableCaption>{caption || captionTop}</CTableCaption>\n          )}\n          {columns && (\n            <CTableHead {...tableHeadProps}>\n              <CTableRow>\n                {columns.map((column: Column, index: number) => (\n                  <CTableHeaderCell\n                    {...(column._props && { ...column._props })}\n                    {...(column._style && { style: { ...column._style } })}\n                    key={index}\n                  >\n                    {getColumnLabel(column)}\n                  </CTableHeaderCell>\n                ))}\n              </CTableRow>\n            </CTableHead>\n          )}\n          {items && (\n            <CTableBody>\n              {items.map((item: Item, index: number) => (\n                <CTableRow {...(item._props && { ...item._props })} key={index}>\n                  {columnNames &&\n                    columnNames.map((colName: string, index: number) => {\n                      // eslint-disable-next-line unicorn/no-negated-condition\n                      return item[colName] !== undefined ? (\n                        <CTableDataCell\n                          {...(item._cellProps && {\n                            ...(item._cellProps['all'] && { ...item._cellProps['all'] }),\n                            ...(item._cellProps[colName] && { ...item._cellProps[colName] }),\n                          })}\n                          key={index}\n                        >\n                          {item[colName]}\n                        </CTableDataCell>\n                      ) : null\n                    })}\n                </CTableRow>\n              ))}\n            </CTableBody>\n          )}\n          {children}\n          {footer && (\n            <CTableFoot {...tableFootProps}>\n              <CTableRow>\n                {footer.map((item: FooterItem | string, index: number) => (\n                  <CTableDataCell\n                    {...(typeof item === 'object' && item._props && { ...item._props })}\n                    key={index}\n                  >\n                    {typeof item === 'object' ? item.label : item}\n                  </CTableDataCell>\n                ))}\n              </CTableRow>\n            </CTableFoot>\n          )}\n        </table>\n      </CTableResponsiveWrapper>\n    )\n  },\n)\n\nCTable.propTypes = {\n  align: PropTypes.oneOf(['bottom', 'middle', 'top']),\n  borderColor: PropTypes.string,\n  bordered: PropTypes.bool,\n  borderless: PropTypes.bool,\n  caption: PropTypes.oneOfType([PropTypes.string, PropTypes.oneOf(['top'])]),\n  captionTop: PropTypes.string,\n  children: PropTypes.node,\n  className: PropTypes.string,\n  color: colorPropType,\n  columns: PropTypes.array,\n  footer: PropTypes.array,\n  hover: PropTypes.bool,\n  items: PropTypes.array,\n  responsive: PropTypes.oneOfType([\n    PropTypes.bool,\n    PropTypes.oneOf<'sm' | 'md' | 'lg' | 'xl' | 'xxl'>(['sm', 'md', 'lg', 'xl', 'xxl']),\n  ]),\n  small: PropTypes.bool,\n  striped: PropTypes.bool,\n  stripedColumns: PropTypes.bool,\n  tableFootProps: PropTypes.shape({ ...CTableFoot.propTypes }),\n  tableHeadProps: PropTypes.shape({ ...CTableHead.propTypes }),\n}\n\nCTable.displayName = 'CTable'\n","import React, { forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { colorPropType } from '../../props'\nimport type { Colors } from '../../types'\n\nexport interface CTableBodyProps extends HTMLAttributes<HTMLTableSectionElement> {\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * Sets the color context of the component to one of CoreUI’s themed colors.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | string\n   */\n  color?: Colors\n}\n\nexport const CTableBody = forwardRef<HTMLTableSectionElement, CTableBodyProps>(\n  ({ children, className, color, ...rest }, ref) => {\n    return (\n      <tbody\n        className={\n          classNames(\n            {\n              [`table-${color}`]: color,\n            },\n            className,\n          ) || undefined\n        }\n        {...rest}\n        ref={ref}\n      >\n        {children}\n      </tbody>\n    )\n  },\n)\n\nCTableBody.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  color: colorPropType,\n}\n\nCTableBody.displayName = 'CTableBody'\n","import React, { forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\n\nexport const CTableCaption = forwardRef<\n  HTMLTableCaptionElement,\n  HTMLAttributes<HTMLTableCaptionElement>\n>(({ children, ...props }, ref) => {\n  return (\n    <caption {...props} ref={ref}>\n      {children}\n    </caption>\n  )\n})\n\nCTableCaption.propTypes = {\n  children: PropTypes.node,\n}\n\nCTableCaption.displayName = 'CTableCaption'\n","import React, { forwardRef, TdHTMLAttributes, ThHTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { colorPropType } from '../../props'\nimport type { Colors } from '../../types'\n\nexport interface CTableDataCellProps\n  extends Omit<TdHTMLAttributes<HTMLTableCellElement>, 'align'>,\n    Omit<ThHTMLAttributes<HTMLTableCellElement>, 'align'> {\n  /**\n   * Highlight a table row or cell.\n   */\n  active?: boolean\n  /**\n   * Set the vertical aligment.\n   */\n  align?: 'bottom' | 'middle' | 'top' | string\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * Sets the color context of the component to one of CoreUI’s themed colors.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | string\n   */\n  color?: Colors\n  /**\n   * @ignore\n   */\n  colSpan?: number\n}\n\nexport const CTableDataCell = forwardRef<HTMLTableCellElement, CTableDataCellProps>(\n  ({ children, active, align, className, color, ...rest }, ref) => {\n    const Component = rest.scope ? 'th' : 'td'\n\n    return (\n      <Component\n        className={\n          classNames(\n            {\n              [`align-${align}`]: align,\n              'table-active': active,\n              [`table-${color}`]: color,\n            },\n            className,\n          ) || undefined\n        }\n        {...rest}\n        ref={ref}\n      >\n        {children}\n      </Component>\n    )\n  },\n)\n\nCTableDataCell.propTypes = {\n  active: PropTypes.bool,\n  align: PropTypes.oneOf(['bottom', 'middle', 'top']),\n  children: PropTypes.node,\n  className: PropTypes.string,\n  color: colorPropType,\n}\n\nCTableDataCell.displayName = 'CTableDataCell'\n","import PropTypes from 'prop-types'\nimport React, { forwardRef, HTMLAttributes } from 'react'\nimport classNames from 'classnames'\n\nimport { colorPropType } from '../../props'\nimport type { Colors } from '../../types'\n\nexport interface CTableFootProps extends HTMLAttributes<HTMLTableSectionElement> {\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * Sets the color context of the component to one of CoreUI’s themed colors.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | string\n   */\n  color?: Colors\n}\n\nexport const CTableFoot = forwardRef<HTMLTableSectionElement, CTableFootProps>(\n  ({ children, className, color, ...rest }, ref) => {\n    return (\n      <tfoot\n        className={\n          classNames(\n            {\n              [`table-${color}`]: color,\n            },\n            className,\n          ) || undefined\n        }\n        {...rest}\n        ref={ref}\n      >\n        {children}\n      </tfoot>\n    )\n  },\n)\n\nCTableFoot.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  color: colorPropType,\n}\n\nCTableFoot.displayName = 'CTableFoot'\n","import React, { forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { colorPropType } from '../../props'\nimport type { Colors } from '../../types'\n\nexport interface CTableHeadProps extends HTMLAttributes<HTMLTableSectionElement> {\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * Sets the color context of the component to one of CoreUI’s themed colors.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | string\n   */\n  color?: Colors\n}\n\nexport const CTableHead = forwardRef<HTMLTableSectionElement, CTableHeadProps>(\n  ({ children, className, color, ...rest }, ref) => {\n    return (\n      <thead\n        className={\n          classNames(\n            {\n              [`table-${color}`]: color,\n            },\n            className,\n          ) || undefined\n        }\n        {...rest}\n        ref={ref}\n      >\n        {children}\n      </thead>\n    )\n  },\n)\n\nCTableHead.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  color: colorPropType,\n}\n\nCTableHead.displayName = 'CTableHead'\n","import React, { forwardRef, ThHTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { colorPropType } from '../../props'\nimport type { Colors } from '../../types'\n\nexport interface CTableHeaderCellProps extends ThHTMLAttributes<HTMLTableCellElement> {\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * Sets the color context of the component to one of CoreUI’s themed colors.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | string\n   */\n  color?: Colors\n}\n\nexport const CTableHeaderCell = forwardRef<HTMLTableCellElement, CTableHeaderCellProps>(\n  ({ children, className, color, ...rest }, ref) => {\n    return (\n      <th\n        className={\n          classNames(\n            {\n              [`table-${color}`]: color,\n            },\n            className,\n          ) || undefined\n        }\n        {...rest}\n        ref={ref}\n      >\n        {children}\n      </th>\n    )\n  },\n)\n\nCTableHeaderCell.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  color: colorPropType,\n}\n\nCTableHeaderCell.displayName = 'CTableHeaderCell'\n","import React, { forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { colorPropType } from '../../props'\nimport type { Colors } from '../../types'\n\nexport interface CTableRowProps extends HTMLAttributes<HTMLTableRowElement> {\n  /**\n   * Highlight a table row or cell..\n   */\n  active?: boolean\n  /**\n   * Set the vertical aligment.\n   */\n  align?: 'bottom' | 'middle' | 'top' | string\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * Sets the color context of the component to one of CoreUI’s themed colors.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | string\n   */\n  color?: Colors\n}\n\nexport const CTableRow = forwardRef<HTMLTableRowElement, CTableRowProps>(\n  ({ children, active, align, className, color, ...rest }, ref) => {\n    return (\n      <tr\n        className={\n          classNames(\n            {\n              [`align-${align}`]: align,\n              'table-active': active,\n              [`table-${color}`]: color,\n            },\n            className,\n          ) || undefined\n        }\n        {...rest}\n        ref={ref}\n      >\n        {children}\n      </tr>\n    )\n  },\n)\n\nCTableRow.propTypes = {\n  active: PropTypes.bool,\n  align: PropTypes.oneOf(['bottom', 'middle', 'top']),\n  children: PropTypes.node,\n  className: PropTypes.string,\n  color: colorPropType,\n}\n\nCTableRow.displayName = 'CTableRow'\n","/**\n * --------------------------------------------------------------------------\n * CoreUI Utils (__COREUI_VERSION__): getStyle.ts\n * Licensed under MIT (https://github.com/coreui/coreui-utils/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n\nconst getStyle = (property: string, element?: Element) => {\n  if (typeof window === 'undefined') {\n    return\n  }\n\n  if (typeof document === 'undefined') {\n    return\n  }\n\n  const _element = element ?? document.body\n\n  return window.getComputedStyle(_element, null).getPropertyValue(property).replace(/^\\s/, '')\n}\n\nexport default getStyle\n"],"names":["Dashboard","navigate","useNavigate","t","useTranslation","chartBartRef","useRef","chartLineRef","useEffect","localStorage","getItem","document","documentElement","addEventListener","current","setTimeout","options","scales","x","grid","color","getStyle","ticks","y","update","data","datasets","pointBackgroundColor","cilUser","cilUserFemale","cibFacebook","cibTwitter","cibLinkedin","tableExampleUsagePeriod","dateStart","dateEnd","formatParams","date","year","month","day","concat","tableExample","avatar","src","avatar1","status","user","name","new","registered","Date","country","flag","cifUs","usage","value","period","activity","val","range","avatar2","cifBr","avatar3","cifIn","avatar4","cifFr","avatar5","cifEs","avatar6","cifPl","_jsxs","_Fragment","children","_jsx","CRow","CCol","xl","sm","CCard","className","CCardBody","CCardTitle","as","CIcon","icon","cilPeople","size","cilArrowBottom","cilCart","cilArrowTop","CCardSubtitle","counter","CTable","align","hover","responsive","CTableHead","CTableRow","CTableHeaderCell","CTableBody","map","item","index","CTableDataCell","CAvatar","title","CProgress","thin","forwardRef","_a","ref","_b","Component","rest","__rest","React","__assign","classNames","propTypes","PropTypes","displayName","CTableResponsiveWrapper","pretifyName","replace","split","word","charAt","toUpperCase","slice","join","getColumnNamesFromItems","items","Object","keys","filter","el","borderColor","bordered","borderless","caption","captionTop","columns","footer","small","striped","stripedColumns","tableFootProps","tableHeadProps","columnNames","useMemo","column","key","getColumnNames","CTableCaption","_props","_style","style","label","getColumnLabel","colName","undefined","_cellProps","CTableFoot","colorPropType","props","active","scope","property","element","window","_element","body","getComputedStyle","getPropertyValue"],"sourceRoot":""}