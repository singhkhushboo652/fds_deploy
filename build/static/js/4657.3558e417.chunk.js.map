{"version":3,"file":"static/js/4657.3558e417.chunk.js","mappings":"iQAAA,IAAIA,EAAY,EACZC,GAAW,IAAIC,MAAOC,cAAcC,QAAQ,OAAQ,IAEjD,MAAMC,EAAiB,CAC5B,CACEC,GAAIC,IACJC,MAAO,gBACPC,MAAOR,GAET,CACEK,GAAIC,IACJC,MAAO,cACPC,MAAOR,EAAW,cAIf,SAASM,IACd,OAAOG,OAAOV,IAChB,C,0DCRe,MAAMW,UAAiBC,EAAAA,UAAgBC,WAAAA,GAAA,SAAAC,WAAA,KACpDC,MAAQ,CACNC,iBAAiB,EACjBC,cAAe,IAChB,KAsCDC,qBAAuB,KACrBC,KAAKC,SAAS,CACZJ,iBAAkBG,KAAKJ,MAAMC,iBAC7B,EACH,KAEDK,iBAAoBC,IAClB,IAAId,EAAQe,OAAO,2CACfC,EAAcF,EAAWG,KAAKC,SAElCF,EAAYG,WAERnB,GACFgB,EAAYI,SAAS,CACnBtB,GAAIC,IACJC,QACAC,MAAOa,EAAWO,SAClBC,IAAKR,EAAWS,OAChBC,OAAQV,EAAWU,QAEvB,EACD,KAEDC,iBAAoBC,IAEdC,QAAQ,8CAADC,OAA+CF,EAAUG,MAAM7B,MAAK,OAC7E0B,EAAUG,MAAMC,QAClB,EACD,KAEDC,aAAgBC,IACdrB,KAAKC,SAAS,CACZH,cAAeuB,GACf,CACH,CAtEDC,MAAAA,GACE,OACEC,EAAAA,EAAAA,MAACC,EAAAA,EAAK,CAACC,UAAU,OAAMC,SAAA,EACrBH,EAAAA,EAAAA,MAACI,EAAAA,EAAW,CAAAD,SAAA,CAAC,iBACEE,EAAAA,EAAAA,KAACC,EAAAA,GAAQ,QAExBD,EAAAA,EAAAA,KAACE,EAAAA,EAAS,CAAAJ,UACRE,EAAAA,EAAAA,KAACG,EAAAA,EAAY,CACXC,QAAS,CAACC,EAAAA,EAAeC,EAAAA,EAAgBC,EAAAA,IACzCC,cAAe,CACbC,KAAM,kBACNC,OAAQ,QACRC,MAAO,yCAETC,YAAY,eACZC,UAAU,EACVC,YAAY,EACZC,cAAc,EACdC,cAAc,EACdC,SAAU7C,KAAKJ,MAAMC,gBACrBiD,cAAe5D,EACf6D,OAAQ/C,KAAKE,iBACb8C,aAAcC,EACdC,WAAYlD,KAAKc,iBACjBqC,UAAWnD,KAAKoB,mBAU1B,EAuCF,MAAM6B,EAAsBG,IAExB7B,EAAAA,EAAAA,MAAA8B,EAAAA,SAAA,CAAA3B,SAAA,EACEE,EAAAA,EAAAA,KAAA,KAAAF,SAAI0B,EAAUE,YACd1B,EAAAA,EAAAA,KAAA,KAAAF,SAAI0B,EAAUlC,MAAM7B,U","sources":["views/plugins/calendar/event-utils.js","views/plugins/calendar/Calendar.js"],"sourcesContent":["let eventGuid = 0\nlet todayStr = new Date().toISOString().replace(/T.*$/, '') // YYYY-MM-DD of today\n\nexport const INITIAL_EVENTS = [\n  {\n    id: createEventId(),\n    title: 'All-day event',\n    start: todayStr,\n  },\n  {\n    id: createEventId(),\n    title: 'Timed event',\n    start: todayStr + 'T12:00:00',\n  },\n]\n\nexport function createEventId() {\n  return String(eventGuid++)\n}\n","import React from 'react'\nimport FullCalendar from '@fullcalendar/react'\nimport dayGridPlugin from '@fullcalendar/daygrid'\nimport timeGridPlugin from '@fullcalendar/timegrid'\nimport interactionPlugin from '@fullcalendar/interaction'\nimport { INITIAL_EVENTS, createEventId } from './event-utils'\nimport { CCard, CCardBody, CCardHeader } from '@coreui/react-pro'\n\nimport { ProBadge } from 'src/components'\n\nexport default class Calendar extends React.Component {\n  state = {\n    weekendsVisible: true,\n    currentEvents: [],\n  }\n\n  render() {\n    return (\n      <CCard className=\"mb-4\">\n        <CCardHeader>\n          FullCalendar <ProBadge />\n        </CCardHeader>\n        <CCardBody>\n          <FullCalendar\n            plugins={[dayGridPlugin, timeGridPlugin, interactionPlugin]}\n            headerToolbar={{\n              left: 'prev,next today',\n              center: 'title',\n              right: 'dayGridMonth,timeGridWeek,timeGridDay',\n            }}\n            initialView=\"dayGridMonth\"\n            editable={true}\n            selectable={true}\n            selectMirror={true}\n            dayMaxEvents={true}\n            weekends={this.state.weekendsVisible}\n            initialEvents={INITIAL_EVENTS} // alternatively, use the `events` setting to fetch from a feed\n            select={this.handleDateSelect}\n            eventContent={renderEventContent} // custom render function\n            eventClick={this.handleEventClick}\n            eventsSet={this.handleEvents} // called after events are initialized/added/changed/removed\n            /* you can update a remote database when these fire:\n            eventAdd={function(){}}\n            eventChange={function(){}}\n            eventRemove={function(){}}\n            */\n          />\n        </CCardBody>\n      </CCard>\n    )\n  }\n\n  handleWeekendsToggle = () => {\n    this.setState({\n      weekendsVisible: !this.state.weekendsVisible,\n    })\n  }\n\n  handleDateSelect = (selectInfo) => {\n    let title = prompt('Please enter a new title for your event')\n    let calendarApi = selectInfo.view.calendar\n\n    calendarApi.unselect() // clear date selection\n\n    if (title) {\n      calendarApi.addEvent({\n        id: createEventId(),\n        title,\n        start: selectInfo.startStr,\n        end: selectInfo.endStr,\n        allDay: selectInfo.allDay,\n      })\n    }\n  }\n\n  handleEventClick = (clickInfo) => {\n    // eslint-disable-next-line no-restricted-globals\n    if (confirm(`Are you sure you want to delete the event '${clickInfo.event.title}'`)) {\n      clickInfo.event.remove()\n    }\n  }\n\n  handleEvents = (events) => {\n    this.setState({\n      currentEvents: events,\n    })\n  }\n}\n\nconst renderEventContent = (eventInfo) => {\n  return (\n    <>\n      <b>{eventInfo.timeText}</b>\n      <i>{eventInfo.event.title}</i>\n    </>\n  )\n}\n"],"names":["eventGuid","todayStr","Date","toISOString","replace","INITIAL_EVENTS","id","createEventId","title","start","String","Calendar","React","constructor","arguments","state","weekendsVisible","currentEvents","handleWeekendsToggle","this","setState","handleDateSelect","selectInfo","prompt","calendarApi","view","calendar","unselect","addEvent","startStr","end","endStr","allDay","handleEventClick","clickInfo","confirm","concat","event","remove","handleEvents","events","render","_jsxs","CCard","className","children","CCardHeader","_jsx","ProBadge","CCardBody","FullCalendar","plugins","dayGridPlugin","timeGridPlugin","interactionPlugin","headerToolbar","left","center","right","initialView","editable","selectable","selectMirror","dayMaxEvents","weekends","initialEvents","select","eventContent","renderEventContent","eventClick","eventsSet","eventInfo","_Fragment","timeText"],"sourceRoot":""}